Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> mat
Rule 1     mat -> element mat
Rule 2     mat -> <empty>
Rule 3     element -> compoundstmt
Rule 4     element -> FUNCTION IDENTIFIER EQUAL IDENTIFIER LPAREN optargs RPAREN compoundstmt END
Rule 5     compoundstmt -> stmt SEMICOLON compoundstmt
Rule 6     compoundstmt -> stmt compoundstmt
Rule 7     compoundstmt -> COMMENT compoundstmt
Rule 8     compoundstmt -> <empty>
Rule 9     stmt -> IF exp compoundstmt END
Rule 10    stmt -> IF exp compoundstmt ELSE compoundstmt END
Rule 11    stmt -> SWITCH exp multiclause END
Rule 12    stmt -> TRY compoundstmt multiclause END
Rule 13    stmt -> FOR range compoundstmt END
Rule 14    stmt -> WHILE exp compoundstmt END
Rule 15    stmt -> IDENTIFIER EQUAL exp
Rule 16    stmt -> matrix EQUAL exp
Rule 17    stmt -> RETURN exp
Rule 18    stmt -> keycall
Rule 19    stmt -> IDENTIFIER PERIOD IDENTIFIER
Rule 20    stmt -> exp
Rule 21    multiclause -> clause multiclause
Rule 22    multiclause -> <empty>
Rule 23    clause -> CASE exp compoundstmt
Rule 24    clause -> OTHERWISE compoundstmt
Rule 25    clause -> CATCH IDENTIFIER compoundstmt
Rule 26    clause -> CATCH compoundstmt
Rule 27    range -> IDENTIFIER EQUAL exp COLON exp
Rule 28    range -> IDENTIFIER EQUAL exp COLON exp COLON exp
Rule 29    keycall -> CLC
Rule 30    keycall -> CLOSE optvars
Rule 31    keycall -> CLEAR optvars
Rule 32    keycall -> BREAK
Rule 33    keycall -> CONTINUE
Rule 34    optvars -> exp optvars
Rule 35    optvars -> exp
Rule 36    number -> INTEGER
Rule 37    number -> FLOAT
Rule 38    exp -> IDENTIFIER
Rule 39    exp -> STRING
Rule 40    exp -> DIRECTORY
Rule 41    exp -> exp TRANSPOSE
Rule 42    exp -> LPAREN exp RPAREN
Rule 43    exp -> IDENTIFIER LPAREN optargs RPAREN
Rule 44    exp -> number
Rule 45    exp -> keyword
Rule 46    keyword -> ALL
Rule 47    keyword -> NOT
Rule 48    keyword -> TRUE
Rule 49    keyword -> FALSE
Rule 50    keyword -> COLON
Rule 51    optargs -> args
Rule 52    optargs -> <empty>
Rule 53    args -> exp COMMA args
Rule 54    args -> exp
Rule 55    exp -> exp ELOR exp
Rule 56    exp -> exp ELAND exp
Rule 57    exp -> exp OROR exp
Rule 58    exp -> exp ANDAND exp
Rule 59    exp -> exp EQUALEQUAL exp
Rule 60    exp -> exp NOTEQUAL exp
Rule 61    exp -> exp LT exp
Rule 62    exp -> exp GT exp
Rule 63    exp -> exp LE exp
Rule 64    exp -> exp GE exp
Rule 65    exp -> exp MPOWER exp
Rule 66    exp -> exp POWER exp
Rule 67    exp -> exp MTIMES exp
Rule 68    exp -> exp MDIVIDE exp
Rule 69    exp -> exp TIMES exp
Rule 70    exp -> exp DIVIDE exp
Rule 71    exp -> exp BACKSLASH exp
Rule 72    exp -> exp PLUS exp
Rule 73    exp -> exp MINUS exp
Rule 74    exp -> exp COLON exp COLON exp
Rule 75    exp -> exp COLON exp
Rule 76    exp -> matrix
Rule 77    matrix -> LBRACKET explist RBRACKET
Rule 78    explist -> exp
Rule 79    explist -> explist exp
Rule 80    explist -> explist COMMA exp
Rule 81    explist -> explist SEMICOLON explist
Rule 82    exp -> IDENTIFIER LBRACE args RBRACE

Terminals, with rules where they appear

ALL                  : 46
ANDAND               : 58
BACKSLASH            : 71
BREAK                : 32
CASE                 : 23
CATCH                : 25 26
CLC                  : 29
CLEAR                : 31
CLOSE                : 30
COLON                : 27 28 28 50 74 74 75
COMMA                : 53 80
COMMENT              : 7
CONTINUE             : 33
DIRECTORY            : 40
DIVIDE               : 70
ELAND                : 56
ELOR                 : 55
ELSE                 : 10
END                  : 4 9 10 11 12 13 14
EQUAL                : 4 15 16 27 28
EQUALEQUAL           : 59
FALSE                : 49
FLOAT                : 37
FOR                  : 13
FUNCTION             : 4
GE                   : 64
GT                   : 62
IDENTIFIER           : 4 4 15 19 19 25 27 28 38 43 82
IF                   : 9 10
INTEGER              : 36
LBRACE               : 82
LBRACKET             : 77
LE                   : 63
LPAREN               : 4 42 43
LT                   : 61
MDIVIDE              : 68
MINUS                : 73
MPOWER               : 65
MTIMES               : 67
NOT                  : 47
NOTEQUAL             : 60
OROR                 : 57
OTHERWISE            : 24
PERIOD               : 19
PLUS                 : 72
POWER                : 66
RBRACE               : 82
RBRACKET             : 77
RETURN               : 17
RPAREN               : 4 42 43
SEMICOLON            : 5 81
STRING               : 39
SWITCH               : 11
TIMES                : 69
TRANSPOSE            : 41
TRUE                 : 48
TRY                  : 12
WHILE                : 14
error                : 

Nonterminals, with rules where they appear

args                 : 51 53 82
clause               : 21
compoundstmt         : 3 4 5 6 7 9 10 10 12 13 14 23 24 25 26
element              : 1
exp                  : 9 10 11 14 15 16 17 20 23 27 27 28 28 28 34 35 41 42 53 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 72 73 73 74 74 74 75 75 78 79 80
explist              : 77 79 80 81 81
keycall              : 18
keyword              : 45
mat                  : 1 0
matrix               : 16 76
multiclause          : 11 12 21
number               : 44
optargs              : 4 43
optvars              : 30 31 34
range                : 13
stmt                 : 5 6

Parsing method: LALR

state 0

    (0) S' -> . mat
    (1) mat -> . element mat
    (2) mat -> .
    (3) element -> . compoundstmt
    (4) element -> . FUNCTION IDENTIFIER EQUAL IDENTIFIER LPAREN optargs RPAREN compoundstmt END
    (5) compoundstmt -> . stmt SEMICOLON compoundstmt
    (6) compoundstmt -> . stmt compoundstmt
    (7) compoundstmt -> . COMMENT compoundstmt
    (8) compoundstmt -> .
    (9) stmt -> . IF exp compoundstmt END
    (10) stmt -> . IF exp compoundstmt ELSE compoundstmt END
    (11) stmt -> . SWITCH exp multiclause END
    (12) stmt -> . TRY compoundstmt multiclause END
    (13) stmt -> . FOR range compoundstmt END
    (14) stmt -> . WHILE exp compoundstmt END
    (15) stmt -> . IDENTIFIER EQUAL exp
    (16) stmt -> . matrix EQUAL exp
    (17) stmt -> . RETURN exp
    (18) stmt -> . keycall
    (19) stmt -> . IDENTIFIER PERIOD IDENTIFIER
    (20) stmt -> . exp
    (77) matrix -> . LBRACKET explist RBRACKET
    (29) keycall -> . CLC
    (30) keycall -> . CLOSE optvars
    (31) keycall -> . CLEAR optvars
    (32) keycall -> . BREAK
    (33) keycall -> . CONTINUE
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON

  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 2 (mat -> .)
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for CLC resolved as shift
  ! shift/reduce conflict for CLOSE resolved as shift
  ! shift/reduce conflict for CLEAR resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for DIRECTORY resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for ALL resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    $end            reduce using rule 2 (mat -> .)
    FUNCTION        shift and go to state 13
    COMMENT         shift and go to state 5
    IF              shift and go to state 24
    SWITCH          shift and go to state 9
    TRY             shift and go to state 18
    FOR             shift and go to state 15
    WHILE           shift and go to state 3
    IDENTIFIER      shift and go to state 12
    RETURN          shift and go to state 1
    LBRACKET        shift and go to state 2
    CLC             shift and go to state 23
    CLOSE           shift and go to state 10
    CLEAR           shift and go to state 16
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7

  ! FUNCTION        [ reduce using rule 8 (compoundstmt -> .) ]
  ! COMMENT         [ reduce using rule 8 (compoundstmt -> .) ]
  ! IF              [ reduce using rule 8 (compoundstmt -> .) ]
  ! SWITCH          [ reduce using rule 8 (compoundstmt -> .) ]
  ! TRY             [ reduce using rule 8 (compoundstmt -> .) ]
  ! FOR             [ reduce using rule 8 (compoundstmt -> .) ]
  ! WHILE           [ reduce using rule 8 (compoundstmt -> .) ]
  ! IDENTIFIER      [ reduce using rule 8 (compoundstmt -> .) ]
  ! RETURN          [ reduce using rule 8 (compoundstmt -> .) ]
  ! LBRACKET        [ reduce using rule 8 (compoundstmt -> .) ]
  ! CLC             [ reduce using rule 8 (compoundstmt -> .) ]
  ! CLOSE           [ reduce using rule 8 (compoundstmt -> .) ]
  ! CLEAR           [ reduce using rule 8 (compoundstmt -> .) ]
  ! BREAK           [ reduce using rule 8 (compoundstmt -> .) ]
  ! CONTINUE        [ reduce using rule 8 (compoundstmt -> .) ]
  ! STRING          [ reduce using rule 8 (compoundstmt -> .) ]
  ! DIRECTORY       [ reduce using rule 8 (compoundstmt -> .) ]
  ! LPAREN          [ reduce using rule 8 (compoundstmt -> .) ]
  ! INTEGER         [ reduce using rule 8 (compoundstmt -> .) ]
  ! FLOAT           [ reduce using rule 8 (compoundstmt -> .) ]
  ! ALL             [ reduce using rule 8 (compoundstmt -> .) ]
  ! NOT             [ reduce using rule 8 (compoundstmt -> .) ]
  ! TRUE            [ reduce using rule 8 (compoundstmt -> .) ]
  ! FALSE           [ reduce using rule 8 (compoundstmt -> .) ]
  ! COLON           [ reduce using rule 8 (compoundstmt -> .) ]
  ! $end            [ reduce using rule 8 (compoundstmt -> .) ]

    number                         shift and go to state 22
    mat                            shift and go to state 14
    keycall                        shift and go to state 8
    stmt                           shift and go to state 17
    element                        shift and go to state 29
    matrix                         shift and go to state 6
    keyword                        shift and go to state 27
    exp                            shift and go to state 32
    compoundstmt                   shift and go to state 34

state 1

    (17) stmt -> RETURN . exp
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    number                         shift and go to state 22
    exp                            shift and go to state 37

state 2

    (77) matrix -> LBRACKET . explist RBRACKET
    (78) explist -> . exp
    (79) explist -> . explist exp
    (80) explist -> . explist COMMA exp
    (81) explist -> . explist SEMICOLON explist
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    number                         shift and go to state 22
    exp                            shift and go to state 39
    explist                        shift and go to state 38

state 3

    (14) stmt -> WHILE . exp compoundstmt END
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    number                         shift and go to state 22
    exp                            shift and go to state 40

state 4

    (48) keyword -> TRUE .

    TRANSPOSE       reduce using rule 48 (keyword -> TRUE .)
    ELOR            reduce using rule 48 (keyword -> TRUE .)
    ELAND           reduce using rule 48 (keyword -> TRUE .)
    OROR            reduce using rule 48 (keyword -> TRUE .)
    ANDAND          reduce using rule 48 (keyword -> TRUE .)
    EQUALEQUAL      reduce using rule 48 (keyword -> TRUE .)
    NOTEQUAL        reduce using rule 48 (keyword -> TRUE .)
    LT              reduce using rule 48 (keyword -> TRUE .)
    GT              reduce using rule 48 (keyword -> TRUE .)
    LE              reduce using rule 48 (keyword -> TRUE .)
    GE              reduce using rule 48 (keyword -> TRUE .)
    MPOWER          reduce using rule 48 (keyword -> TRUE .)
    POWER           reduce using rule 48 (keyword -> TRUE .)
    MTIMES          reduce using rule 48 (keyword -> TRUE .)
    MDIVIDE         reduce using rule 48 (keyword -> TRUE .)
    TIMES           reduce using rule 48 (keyword -> TRUE .)
    DIVIDE          reduce using rule 48 (keyword -> TRUE .)
    BACKSLASH       reduce using rule 48 (keyword -> TRUE .)
    PLUS            reduce using rule 48 (keyword -> TRUE .)
    MINUS           reduce using rule 48 (keyword -> TRUE .)
    COLON           reduce using rule 48 (keyword -> TRUE .)
    SEMICOLON       reduce using rule 48 (keyword -> TRUE .)
    COMMENT         reduce using rule 48 (keyword -> TRUE .)
    IF              reduce using rule 48 (keyword -> TRUE .)
    SWITCH          reduce using rule 48 (keyword -> TRUE .)
    TRY             reduce using rule 48 (keyword -> TRUE .)
    FOR             reduce using rule 48 (keyword -> TRUE .)
    WHILE           reduce using rule 48 (keyword -> TRUE .)
    IDENTIFIER      reduce using rule 48 (keyword -> TRUE .)
    RETURN          reduce using rule 48 (keyword -> TRUE .)
    LBRACKET        reduce using rule 48 (keyword -> TRUE .)
    CLC             reduce using rule 48 (keyword -> TRUE .)
    CLOSE           reduce using rule 48 (keyword -> TRUE .)
    CLEAR           reduce using rule 48 (keyword -> TRUE .)
    BREAK           reduce using rule 48 (keyword -> TRUE .)
    CONTINUE        reduce using rule 48 (keyword -> TRUE .)
    STRING          reduce using rule 48 (keyword -> TRUE .)
    DIRECTORY       reduce using rule 48 (keyword -> TRUE .)
    LPAREN          reduce using rule 48 (keyword -> TRUE .)
    INTEGER         reduce using rule 48 (keyword -> TRUE .)
    FLOAT           reduce using rule 48 (keyword -> TRUE .)
    ALL             reduce using rule 48 (keyword -> TRUE .)
    NOT             reduce using rule 48 (keyword -> TRUE .)
    TRUE            reduce using rule 48 (keyword -> TRUE .)
    FALSE           reduce using rule 48 (keyword -> TRUE .)
    FUNCTION        reduce using rule 48 (keyword -> TRUE .)
    $end            reduce using rule 48 (keyword -> TRUE .)
    CASE            reduce using rule 48 (keyword -> TRUE .)
    OTHERWISE       reduce using rule 48 (keyword -> TRUE .)
    CATCH           reduce using rule 48 (keyword -> TRUE .)
    END             reduce using rule 48 (keyword -> TRUE .)
    ELSE            reduce using rule 48 (keyword -> TRUE .)
    RBRACKET        reduce using rule 48 (keyword -> TRUE .)
    COMMA           reduce using rule 48 (keyword -> TRUE .)
    RPAREN          reduce using rule 48 (keyword -> TRUE .)
    RBRACE          reduce using rule 48 (keyword -> TRUE .)


state 5

    (7) compoundstmt -> COMMENT . compoundstmt
    (5) compoundstmt -> . stmt SEMICOLON compoundstmt
    (6) compoundstmt -> . stmt compoundstmt
    (7) compoundstmt -> . COMMENT compoundstmt
    (8) compoundstmt -> .
    (9) stmt -> . IF exp compoundstmt END
    (10) stmt -> . IF exp compoundstmt ELSE compoundstmt END
    (11) stmt -> . SWITCH exp multiclause END
    (12) stmt -> . TRY compoundstmt multiclause END
    (13) stmt -> . FOR range compoundstmt END
    (14) stmt -> . WHILE exp compoundstmt END
    (15) stmt -> . IDENTIFIER EQUAL exp
    (16) stmt -> . matrix EQUAL exp
    (17) stmt -> . RETURN exp
    (18) stmt -> . keycall
    (19) stmt -> . IDENTIFIER PERIOD IDENTIFIER
    (20) stmt -> . exp
    (77) matrix -> . LBRACKET explist RBRACKET
    (29) keycall -> . CLC
    (30) keycall -> . CLOSE optvars
    (31) keycall -> . CLEAR optvars
    (32) keycall -> . BREAK
    (33) keycall -> . CONTINUE
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON

  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for CLC resolved as shift
  ! shift/reduce conflict for CLOSE resolved as shift
  ! shift/reduce conflict for CLEAR resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for DIRECTORY resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for ALL resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    COMMENT         shift and go to state 5
    FUNCTION        reduce using rule 8 (compoundstmt -> .)
    $end            reduce using rule 8 (compoundstmt -> .)
    CASE            reduce using rule 8 (compoundstmt -> .)
    OTHERWISE       reduce using rule 8 (compoundstmt -> .)
    CATCH           reduce using rule 8 (compoundstmt -> .)
    END             reduce using rule 8 (compoundstmt -> .)
    ELSE            reduce using rule 8 (compoundstmt -> .)
    IF              shift and go to state 24
    SWITCH          shift and go to state 9
    TRY             shift and go to state 18
    FOR             shift and go to state 15
    WHILE           shift and go to state 3
    IDENTIFIER      shift and go to state 12
    RETURN          shift and go to state 1
    LBRACKET        shift and go to state 2
    CLC             shift and go to state 23
    CLOSE           shift and go to state 10
    CLEAR           shift and go to state 16
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7

  ! COMMENT         [ reduce using rule 8 (compoundstmt -> .) ]
  ! IF              [ reduce using rule 8 (compoundstmt -> .) ]
  ! SWITCH          [ reduce using rule 8 (compoundstmt -> .) ]
  ! TRY             [ reduce using rule 8 (compoundstmt -> .) ]
  ! FOR             [ reduce using rule 8 (compoundstmt -> .) ]
  ! WHILE           [ reduce using rule 8 (compoundstmt -> .) ]
  ! IDENTIFIER      [ reduce using rule 8 (compoundstmt -> .) ]
  ! RETURN          [ reduce using rule 8 (compoundstmt -> .) ]
  ! LBRACKET        [ reduce using rule 8 (compoundstmt -> .) ]
  ! CLC             [ reduce using rule 8 (compoundstmt -> .) ]
  ! CLOSE           [ reduce using rule 8 (compoundstmt -> .) ]
  ! CLEAR           [ reduce using rule 8 (compoundstmt -> .) ]
  ! BREAK           [ reduce using rule 8 (compoundstmt -> .) ]
  ! CONTINUE        [ reduce using rule 8 (compoundstmt -> .) ]
  ! STRING          [ reduce using rule 8 (compoundstmt -> .) ]
  ! DIRECTORY       [ reduce using rule 8 (compoundstmt -> .) ]
  ! LPAREN          [ reduce using rule 8 (compoundstmt -> .) ]
  ! INTEGER         [ reduce using rule 8 (compoundstmt -> .) ]
  ! FLOAT           [ reduce using rule 8 (compoundstmt -> .) ]
  ! ALL             [ reduce using rule 8 (compoundstmt -> .) ]
  ! NOT             [ reduce using rule 8 (compoundstmt -> .) ]
  ! TRUE            [ reduce using rule 8 (compoundstmt -> .) ]
  ! FALSE           [ reduce using rule 8 (compoundstmt -> .) ]
  ! COLON           [ reduce using rule 8 (compoundstmt -> .) ]

    matrix                         shift and go to state 6
    keycall                        shift and go to state 8
    stmt                           shift and go to state 17
    number                         shift and go to state 22
    keyword                        shift and go to state 27
    exp                            shift and go to state 32
    compoundstmt                   shift and go to state 41

state 6

    (16) stmt -> matrix . EQUAL exp
    (76) exp -> matrix .

    EQUAL           shift and go to state 42
    TRANSPOSE       reduce using rule 76 (exp -> matrix .)
    ELOR            reduce using rule 76 (exp -> matrix .)
    ELAND           reduce using rule 76 (exp -> matrix .)
    OROR            reduce using rule 76 (exp -> matrix .)
    ANDAND          reduce using rule 76 (exp -> matrix .)
    EQUALEQUAL      reduce using rule 76 (exp -> matrix .)
    NOTEQUAL        reduce using rule 76 (exp -> matrix .)
    LT              reduce using rule 76 (exp -> matrix .)
    GT              reduce using rule 76 (exp -> matrix .)
    LE              reduce using rule 76 (exp -> matrix .)
    GE              reduce using rule 76 (exp -> matrix .)
    MPOWER          reduce using rule 76 (exp -> matrix .)
    POWER           reduce using rule 76 (exp -> matrix .)
    MTIMES          reduce using rule 76 (exp -> matrix .)
    MDIVIDE         reduce using rule 76 (exp -> matrix .)
    TIMES           reduce using rule 76 (exp -> matrix .)
    DIVIDE          reduce using rule 76 (exp -> matrix .)
    BACKSLASH       reduce using rule 76 (exp -> matrix .)
    PLUS            reduce using rule 76 (exp -> matrix .)
    MINUS           reduce using rule 76 (exp -> matrix .)
    COLON           reduce using rule 76 (exp -> matrix .)
    SEMICOLON       reduce using rule 76 (exp -> matrix .)
    COMMENT         reduce using rule 76 (exp -> matrix .)
    IF              reduce using rule 76 (exp -> matrix .)
    SWITCH          reduce using rule 76 (exp -> matrix .)
    TRY             reduce using rule 76 (exp -> matrix .)
    FOR             reduce using rule 76 (exp -> matrix .)
    WHILE           reduce using rule 76 (exp -> matrix .)
    IDENTIFIER      reduce using rule 76 (exp -> matrix .)
    RETURN          reduce using rule 76 (exp -> matrix .)
    LBRACKET        reduce using rule 76 (exp -> matrix .)
    CLC             reduce using rule 76 (exp -> matrix .)
    CLOSE           reduce using rule 76 (exp -> matrix .)
    CLEAR           reduce using rule 76 (exp -> matrix .)
    BREAK           reduce using rule 76 (exp -> matrix .)
    CONTINUE        reduce using rule 76 (exp -> matrix .)
    STRING          reduce using rule 76 (exp -> matrix .)
    DIRECTORY       reduce using rule 76 (exp -> matrix .)
    LPAREN          reduce using rule 76 (exp -> matrix .)
    INTEGER         reduce using rule 76 (exp -> matrix .)
    FLOAT           reduce using rule 76 (exp -> matrix .)
    ALL             reduce using rule 76 (exp -> matrix .)
    NOT             reduce using rule 76 (exp -> matrix .)
    TRUE            reduce using rule 76 (exp -> matrix .)
    FALSE           reduce using rule 76 (exp -> matrix .)
    CASE            reduce using rule 76 (exp -> matrix .)
    OTHERWISE       reduce using rule 76 (exp -> matrix .)
    CATCH           reduce using rule 76 (exp -> matrix .)
    END             reduce using rule 76 (exp -> matrix .)
    ELSE            reduce using rule 76 (exp -> matrix .)
    FUNCTION        reduce using rule 76 (exp -> matrix .)
    $end            reduce using rule 76 (exp -> matrix .)


state 7

    (50) keyword -> COLON .

    TRANSPOSE       reduce using rule 50 (keyword -> COLON .)
    ELOR            reduce using rule 50 (keyword -> COLON .)
    ELAND           reduce using rule 50 (keyword -> COLON .)
    OROR            reduce using rule 50 (keyword -> COLON .)
    ANDAND          reduce using rule 50 (keyword -> COLON .)
    EQUALEQUAL      reduce using rule 50 (keyword -> COLON .)
    NOTEQUAL        reduce using rule 50 (keyword -> COLON .)
    LT              reduce using rule 50 (keyword -> COLON .)
    GT              reduce using rule 50 (keyword -> COLON .)
    LE              reduce using rule 50 (keyword -> COLON .)
    GE              reduce using rule 50 (keyword -> COLON .)
    MPOWER          reduce using rule 50 (keyword -> COLON .)
    POWER           reduce using rule 50 (keyword -> COLON .)
    MTIMES          reduce using rule 50 (keyword -> COLON .)
    MDIVIDE         reduce using rule 50 (keyword -> COLON .)
    TIMES           reduce using rule 50 (keyword -> COLON .)
    DIVIDE          reduce using rule 50 (keyword -> COLON .)
    BACKSLASH       reduce using rule 50 (keyword -> COLON .)
    PLUS            reduce using rule 50 (keyword -> COLON .)
    MINUS           reduce using rule 50 (keyword -> COLON .)
    COLON           reduce using rule 50 (keyword -> COLON .)
    SEMICOLON       reduce using rule 50 (keyword -> COLON .)
    COMMENT         reduce using rule 50 (keyword -> COLON .)
    IF              reduce using rule 50 (keyword -> COLON .)
    SWITCH          reduce using rule 50 (keyword -> COLON .)
    TRY             reduce using rule 50 (keyword -> COLON .)
    FOR             reduce using rule 50 (keyword -> COLON .)
    WHILE           reduce using rule 50 (keyword -> COLON .)
    IDENTIFIER      reduce using rule 50 (keyword -> COLON .)
    RETURN          reduce using rule 50 (keyword -> COLON .)
    LBRACKET        reduce using rule 50 (keyword -> COLON .)
    CLC             reduce using rule 50 (keyword -> COLON .)
    CLOSE           reduce using rule 50 (keyword -> COLON .)
    CLEAR           reduce using rule 50 (keyword -> COLON .)
    BREAK           reduce using rule 50 (keyword -> COLON .)
    CONTINUE        reduce using rule 50 (keyword -> COLON .)
    STRING          reduce using rule 50 (keyword -> COLON .)
    DIRECTORY       reduce using rule 50 (keyword -> COLON .)
    LPAREN          reduce using rule 50 (keyword -> COLON .)
    INTEGER         reduce using rule 50 (keyword -> COLON .)
    FLOAT           reduce using rule 50 (keyword -> COLON .)
    ALL             reduce using rule 50 (keyword -> COLON .)
    NOT             reduce using rule 50 (keyword -> COLON .)
    TRUE            reduce using rule 50 (keyword -> COLON .)
    FALSE           reduce using rule 50 (keyword -> COLON .)
    FUNCTION        reduce using rule 50 (keyword -> COLON .)
    $end            reduce using rule 50 (keyword -> COLON .)
    CASE            reduce using rule 50 (keyword -> COLON .)
    OTHERWISE       reduce using rule 50 (keyword -> COLON .)
    CATCH           reduce using rule 50 (keyword -> COLON .)
    END             reduce using rule 50 (keyword -> COLON .)
    ELSE            reduce using rule 50 (keyword -> COLON .)
    RBRACKET        reduce using rule 50 (keyword -> COLON .)
    COMMA           reduce using rule 50 (keyword -> COLON .)
    RPAREN          reduce using rule 50 (keyword -> COLON .)
    RBRACE          reduce using rule 50 (keyword -> COLON .)


state 8

    (18) stmt -> keycall .

    SEMICOLON       reduce using rule 18 (stmt -> keycall .)
    COMMENT         reduce using rule 18 (stmt -> keycall .)
    IF              reduce using rule 18 (stmt -> keycall .)
    SWITCH          reduce using rule 18 (stmt -> keycall .)
    TRY             reduce using rule 18 (stmt -> keycall .)
    FOR             reduce using rule 18 (stmt -> keycall .)
    WHILE           reduce using rule 18 (stmt -> keycall .)
    IDENTIFIER      reduce using rule 18 (stmt -> keycall .)
    RETURN          reduce using rule 18 (stmt -> keycall .)
    LBRACKET        reduce using rule 18 (stmt -> keycall .)
    CLC             reduce using rule 18 (stmt -> keycall .)
    CLOSE           reduce using rule 18 (stmt -> keycall .)
    CLEAR           reduce using rule 18 (stmt -> keycall .)
    BREAK           reduce using rule 18 (stmt -> keycall .)
    CONTINUE        reduce using rule 18 (stmt -> keycall .)
    STRING          reduce using rule 18 (stmt -> keycall .)
    DIRECTORY       reduce using rule 18 (stmt -> keycall .)
    LPAREN          reduce using rule 18 (stmt -> keycall .)
    INTEGER         reduce using rule 18 (stmt -> keycall .)
    FLOAT           reduce using rule 18 (stmt -> keycall .)
    ALL             reduce using rule 18 (stmt -> keycall .)
    NOT             reduce using rule 18 (stmt -> keycall .)
    TRUE            reduce using rule 18 (stmt -> keycall .)
    FALSE           reduce using rule 18 (stmt -> keycall .)
    COLON           reduce using rule 18 (stmt -> keycall .)
    END             reduce using rule 18 (stmt -> keycall .)
    CASE            reduce using rule 18 (stmt -> keycall .)
    OTHERWISE       reduce using rule 18 (stmt -> keycall .)
    CATCH           reduce using rule 18 (stmt -> keycall .)
    FUNCTION        reduce using rule 18 (stmt -> keycall .)
    $end            reduce using rule 18 (stmt -> keycall .)
    ELSE            reduce using rule 18 (stmt -> keycall .)


state 9

    (11) stmt -> SWITCH . exp multiclause END
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    number                         shift and go to state 22
    exp                            shift and go to state 43

state 10

    (30) keycall -> CLOSE . optvars
    (34) optvars -> . exp optvars
    (35) optvars -> . exp
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    optvars                        shift and go to state 44
    number                         shift and go to state 22
    exp                            shift and go to state 45

state 11

    (39) exp -> STRING .

    TRANSPOSE       reduce using rule 39 (exp -> STRING .)
    ELOR            reduce using rule 39 (exp -> STRING .)
    ELAND           reduce using rule 39 (exp -> STRING .)
    OROR            reduce using rule 39 (exp -> STRING .)
    ANDAND          reduce using rule 39 (exp -> STRING .)
    EQUALEQUAL      reduce using rule 39 (exp -> STRING .)
    NOTEQUAL        reduce using rule 39 (exp -> STRING .)
    LT              reduce using rule 39 (exp -> STRING .)
    GT              reduce using rule 39 (exp -> STRING .)
    LE              reduce using rule 39 (exp -> STRING .)
    GE              reduce using rule 39 (exp -> STRING .)
    MPOWER          reduce using rule 39 (exp -> STRING .)
    POWER           reduce using rule 39 (exp -> STRING .)
    MTIMES          reduce using rule 39 (exp -> STRING .)
    MDIVIDE         reduce using rule 39 (exp -> STRING .)
    TIMES           reduce using rule 39 (exp -> STRING .)
    DIVIDE          reduce using rule 39 (exp -> STRING .)
    BACKSLASH       reduce using rule 39 (exp -> STRING .)
    PLUS            reduce using rule 39 (exp -> STRING .)
    MINUS           reduce using rule 39 (exp -> STRING .)
    COLON           reduce using rule 39 (exp -> STRING .)
    SEMICOLON       reduce using rule 39 (exp -> STRING .)
    COMMENT         reduce using rule 39 (exp -> STRING .)
    IF              reduce using rule 39 (exp -> STRING .)
    SWITCH          reduce using rule 39 (exp -> STRING .)
    TRY             reduce using rule 39 (exp -> STRING .)
    FOR             reduce using rule 39 (exp -> STRING .)
    WHILE           reduce using rule 39 (exp -> STRING .)
    IDENTIFIER      reduce using rule 39 (exp -> STRING .)
    RETURN          reduce using rule 39 (exp -> STRING .)
    LBRACKET        reduce using rule 39 (exp -> STRING .)
    CLC             reduce using rule 39 (exp -> STRING .)
    CLOSE           reduce using rule 39 (exp -> STRING .)
    CLEAR           reduce using rule 39 (exp -> STRING .)
    BREAK           reduce using rule 39 (exp -> STRING .)
    CONTINUE        reduce using rule 39 (exp -> STRING .)
    STRING          reduce using rule 39 (exp -> STRING .)
    DIRECTORY       reduce using rule 39 (exp -> STRING .)
    LPAREN          reduce using rule 39 (exp -> STRING .)
    INTEGER         reduce using rule 39 (exp -> STRING .)
    FLOAT           reduce using rule 39 (exp -> STRING .)
    ALL             reduce using rule 39 (exp -> STRING .)
    NOT             reduce using rule 39 (exp -> STRING .)
    TRUE            reduce using rule 39 (exp -> STRING .)
    FALSE           reduce using rule 39 (exp -> STRING .)
    FUNCTION        reduce using rule 39 (exp -> STRING .)
    $end            reduce using rule 39 (exp -> STRING .)
    CASE            reduce using rule 39 (exp -> STRING .)
    OTHERWISE       reduce using rule 39 (exp -> STRING .)
    CATCH           reduce using rule 39 (exp -> STRING .)
    END             reduce using rule 39 (exp -> STRING .)
    ELSE            reduce using rule 39 (exp -> STRING .)
    RBRACKET        reduce using rule 39 (exp -> STRING .)
    COMMA           reduce using rule 39 (exp -> STRING .)
    RPAREN          reduce using rule 39 (exp -> STRING .)
    RBRACE          reduce using rule 39 (exp -> STRING .)


state 12

    (15) stmt -> IDENTIFIER . EQUAL exp
    (19) stmt -> IDENTIFIER . PERIOD IDENTIFIER
    (38) exp -> IDENTIFIER .
    (43) exp -> IDENTIFIER . LPAREN optargs RPAREN
    (82) exp -> IDENTIFIER . LBRACE args RBRACE

  ! shift/reduce conflict for LPAREN resolved as shift
    EQUAL           shift and go to state 47
    PERIOD          shift and go to state 48
    TRANSPOSE       reduce using rule 38 (exp -> IDENTIFIER .)
    ELOR            reduce using rule 38 (exp -> IDENTIFIER .)
    ELAND           reduce using rule 38 (exp -> IDENTIFIER .)
    OROR            reduce using rule 38 (exp -> IDENTIFIER .)
    ANDAND          reduce using rule 38 (exp -> IDENTIFIER .)
    EQUALEQUAL      reduce using rule 38 (exp -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 38 (exp -> IDENTIFIER .)
    LT              reduce using rule 38 (exp -> IDENTIFIER .)
    GT              reduce using rule 38 (exp -> IDENTIFIER .)
    LE              reduce using rule 38 (exp -> IDENTIFIER .)
    GE              reduce using rule 38 (exp -> IDENTIFIER .)
    MPOWER          reduce using rule 38 (exp -> IDENTIFIER .)
    POWER           reduce using rule 38 (exp -> IDENTIFIER .)
    MTIMES          reduce using rule 38 (exp -> IDENTIFIER .)
    MDIVIDE         reduce using rule 38 (exp -> IDENTIFIER .)
    TIMES           reduce using rule 38 (exp -> IDENTIFIER .)
    DIVIDE          reduce using rule 38 (exp -> IDENTIFIER .)
    BACKSLASH       reduce using rule 38 (exp -> IDENTIFIER .)
    PLUS            reduce using rule 38 (exp -> IDENTIFIER .)
    MINUS           reduce using rule 38 (exp -> IDENTIFIER .)
    COLON           reduce using rule 38 (exp -> IDENTIFIER .)
    SEMICOLON       reduce using rule 38 (exp -> IDENTIFIER .)
    COMMENT         reduce using rule 38 (exp -> IDENTIFIER .)
    IF              reduce using rule 38 (exp -> IDENTIFIER .)
    SWITCH          reduce using rule 38 (exp -> IDENTIFIER .)
    TRY             reduce using rule 38 (exp -> IDENTIFIER .)
    FOR             reduce using rule 38 (exp -> IDENTIFIER .)
    WHILE           reduce using rule 38 (exp -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 38 (exp -> IDENTIFIER .)
    RETURN          reduce using rule 38 (exp -> IDENTIFIER .)
    LBRACKET        reduce using rule 38 (exp -> IDENTIFIER .)
    CLC             reduce using rule 38 (exp -> IDENTIFIER .)
    CLOSE           reduce using rule 38 (exp -> IDENTIFIER .)
    CLEAR           reduce using rule 38 (exp -> IDENTIFIER .)
    BREAK           reduce using rule 38 (exp -> IDENTIFIER .)
    CONTINUE        reduce using rule 38 (exp -> IDENTIFIER .)
    STRING          reduce using rule 38 (exp -> IDENTIFIER .)
    DIRECTORY       reduce using rule 38 (exp -> IDENTIFIER .)
    INTEGER         reduce using rule 38 (exp -> IDENTIFIER .)
    FLOAT           reduce using rule 38 (exp -> IDENTIFIER .)
    ALL             reduce using rule 38 (exp -> IDENTIFIER .)
    NOT             reduce using rule 38 (exp -> IDENTIFIER .)
    TRUE            reduce using rule 38 (exp -> IDENTIFIER .)
    FALSE           reduce using rule 38 (exp -> IDENTIFIER .)
    CASE            reduce using rule 38 (exp -> IDENTIFIER .)
    OTHERWISE       reduce using rule 38 (exp -> IDENTIFIER .)
    CATCH           reduce using rule 38 (exp -> IDENTIFIER .)
    END             reduce using rule 38 (exp -> IDENTIFIER .)
    ELSE            reduce using rule 38 (exp -> IDENTIFIER .)
    FUNCTION        reduce using rule 38 (exp -> IDENTIFIER .)
    $end            reduce using rule 38 (exp -> IDENTIFIER .)
    LPAREN          shift and go to state 49
    LBRACE          shift and go to state 46

  ! LPAREN          [ reduce using rule 38 (exp -> IDENTIFIER .) ]


state 13

    (4) element -> FUNCTION . IDENTIFIER EQUAL IDENTIFIER LPAREN optargs RPAREN compoundstmt END

    IDENTIFIER      shift and go to state 50


state 14

    (0) S' -> mat .



state 15

    (13) stmt -> FOR . range compoundstmt END
    (27) range -> . IDENTIFIER EQUAL exp COLON exp
    (28) range -> . IDENTIFIER EQUAL exp COLON exp COLON exp

    IDENTIFIER      shift and go to state 52

    range                          shift and go to state 51

state 16

    (31) keycall -> CLEAR . optvars
    (34) optvars -> . exp optvars
    (35) optvars -> . exp
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    optvars                        shift and go to state 53
    number                         shift and go to state 22
    exp                            shift and go to state 45

state 17

    (5) compoundstmt -> stmt . SEMICOLON compoundstmt
    (6) compoundstmt -> stmt . compoundstmt
    (5) compoundstmt -> . stmt SEMICOLON compoundstmt
    (6) compoundstmt -> . stmt compoundstmt
    (7) compoundstmt -> . COMMENT compoundstmt
    (8) compoundstmt -> .
    (9) stmt -> . IF exp compoundstmt END
    (10) stmt -> . IF exp compoundstmt ELSE compoundstmt END
    (11) stmt -> . SWITCH exp multiclause END
    (12) stmt -> . TRY compoundstmt multiclause END
    (13) stmt -> . FOR range compoundstmt END
    (14) stmt -> . WHILE exp compoundstmt END
    (15) stmt -> . IDENTIFIER EQUAL exp
    (16) stmt -> . matrix EQUAL exp
    (17) stmt -> . RETURN exp
    (18) stmt -> . keycall
    (19) stmt -> . IDENTIFIER PERIOD IDENTIFIER
    (20) stmt -> . exp
    (77) matrix -> . LBRACKET explist RBRACKET
    (29) keycall -> . CLC
    (30) keycall -> . CLOSE optvars
    (31) keycall -> . CLEAR optvars
    (32) keycall -> . BREAK
    (33) keycall -> . CONTINUE
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON

  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for CLC resolved as shift
  ! shift/reduce conflict for CLOSE resolved as shift
  ! shift/reduce conflict for CLEAR resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for DIRECTORY resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for ALL resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    SEMICOLON       shift and go to state 54
    COMMENT         shift and go to state 5
    FUNCTION        reduce using rule 8 (compoundstmt -> .)
    $end            reduce using rule 8 (compoundstmt -> .)
    CASE            reduce using rule 8 (compoundstmt -> .)
    OTHERWISE       reduce using rule 8 (compoundstmt -> .)
    CATCH           reduce using rule 8 (compoundstmt -> .)
    END             reduce using rule 8 (compoundstmt -> .)
    ELSE            reduce using rule 8 (compoundstmt -> .)
    IF              shift and go to state 24
    SWITCH          shift and go to state 9
    TRY             shift and go to state 18
    FOR             shift and go to state 15
    WHILE           shift and go to state 3
    IDENTIFIER      shift and go to state 12
    RETURN          shift and go to state 1
    LBRACKET        shift and go to state 2
    CLC             shift and go to state 23
    CLOSE           shift and go to state 10
    CLEAR           shift and go to state 16
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7

  ! COMMENT         [ reduce using rule 8 (compoundstmt -> .) ]
  ! IF              [ reduce using rule 8 (compoundstmt -> .) ]
  ! SWITCH          [ reduce using rule 8 (compoundstmt -> .) ]
  ! TRY             [ reduce using rule 8 (compoundstmt -> .) ]
  ! FOR             [ reduce using rule 8 (compoundstmt -> .) ]
  ! WHILE           [ reduce using rule 8 (compoundstmt -> .) ]
  ! IDENTIFIER      [ reduce using rule 8 (compoundstmt -> .) ]
  ! RETURN          [ reduce using rule 8 (compoundstmt -> .) ]
  ! LBRACKET        [ reduce using rule 8 (compoundstmt -> .) ]
  ! CLC             [ reduce using rule 8 (compoundstmt -> .) ]
  ! CLOSE           [ reduce using rule 8 (compoundstmt -> .) ]
  ! CLEAR           [ reduce using rule 8 (compoundstmt -> .) ]
  ! BREAK           [ reduce using rule 8 (compoundstmt -> .) ]
  ! CONTINUE        [ reduce using rule 8 (compoundstmt -> .) ]
  ! STRING          [ reduce using rule 8 (compoundstmt -> .) ]
  ! DIRECTORY       [ reduce using rule 8 (compoundstmt -> .) ]
  ! LPAREN          [ reduce using rule 8 (compoundstmt -> .) ]
  ! INTEGER         [ reduce using rule 8 (compoundstmt -> .) ]
  ! FLOAT           [ reduce using rule 8 (compoundstmt -> .) ]
  ! ALL             [ reduce using rule 8 (compoundstmt -> .) ]
  ! NOT             [ reduce using rule 8 (compoundstmt -> .) ]
  ! TRUE            [ reduce using rule 8 (compoundstmt -> .) ]
  ! FALSE           [ reduce using rule 8 (compoundstmt -> .) ]
  ! COLON           [ reduce using rule 8 (compoundstmt -> .) ]

    matrix                         shift and go to state 6
    keycall                        shift and go to state 8
    stmt                           shift and go to state 17
    number                         shift and go to state 22
    keyword                        shift and go to state 27
    exp                            shift and go to state 32
    compoundstmt                   shift and go to state 55

state 18

    (12) stmt -> TRY . compoundstmt multiclause END
    (5) compoundstmt -> . stmt SEMICOLON compoundstmt
    (6) compoundstmt -> . stmt compoundstmt
    (7) compoundstmt -> . COMMENT compoundstmt
    (8) compoundstmt -> .
    (9) stmt -> . IF exp compoundstmt END
    (10) stmt -> . IF exp compoundstmt ELSE compoundstmt END
    (11) stmt -> . SWITCH exp multiclause END
    (12) stmt -> . TRY compoundstmt multiclause END
    (13) stmt -> . FOR range compoundstmt END
    (14) stmt -> . WHILE exp compoundstmt END
    (15) stmt -> . IDENTIFIER EQUAL exp
    (16) stmt -> . matrix EQUAL exp
    (17) stmt -> . RETURN exp
    (18) stmt -> . keycall
    (19) stmt -> . IDENTIFIER PERIOD IDENTIFIER
    (20) stmt -> . exp
    (77) matrix -> . LBRACKET explist RBRACKET
    (29) keycall -> . CLC
    (30) keycall -> . CLOSE optvars
    (31) keycall -> . CLEAR optvars
    (32) keycall -> . BREAK
    (33) keycall -> . CONTINUE
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON

    COMMENT         shift and go to state 5
    CASE            reduce using rule 8 (compoundstmt -> .)
    OTHERWISE       reduce using rule 8 (compoundstmt -> .)
    CATCH           reduce using rule 8 (compoundstmt -> .)
    END             reduce using rule 8 (compoundstmt -> .)
    IF              shift and go to state 24
    SWITCH          shift and go to state 9
    TRY             shift and go to state 18
    FOR             shift and go to state 15
    WHILE           shift and go to state 3
    IDENTIFIER      shift and go to state 12
    RETURN          shift and go to state 1
    LBRACKET        shift and go to state 2
    CLC             shift and go to state 23
    CLOSE           shift and go to state 10
    CLEAR           shift and go to state 16
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7

    matrix                         shift and go to state 6
    keycall                        shift and go to state 8
    stmt                           shift and go to state 17
    number                         shift and go to state 22
    keyword                        shift and go to state 27
    exp                            shift and go to state 32
    compoundstmt                   shift and go to state 56

state 19

    (42) exp -> LPAREN . exp RPAREN
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    number                         shift and go to state 22
    exp                            shift and go to state 57

state 20

    (36) number -> INTEGER .

    TRANSPOSE       reduce using rule 36 (number -> INTEGER .)
    ELOR            reduce using rule 36 (number -> INTEGER .)
    ELAND           reduce using rule 36 (number -> INTEGER .)
    OROR            reduce using rule 36 (number -> INTEGER .)
    ANDAND          reduce using rule 36 (number -> INTEGER .)
    EQUALEQUAL      reduce using rule 36 (number -> INTEGER .)
    NOTEQUAL        reduce using rule 36 (number -> INTEGER .)
    LT              reduce using rule 36 (number -> INTEGER .)
    GT              reduce using rule 36 (number -> INTEGER .)
    LE              reduce using rule 36 (number -> INTEGER .)
    GE              reduce using rule 36 (number -> INTEGER .)
    MPOWER          reduce using rule 36 (number -> INTEGER .)
    POWER           reduce using rule 36 (number -> INTEGER .)
    MTIMES          reduce using rule 36 (number -> INTEGER .)
    MDIVIDE         reduce using rule 36 (number -> INTEGER .)
    TIMES           reduce using rule 36 (number -> INTEGER .)
    DIVIDE          reduce using rule 36 (number -> INTEGER .)
    BACKSLASH       reduce using rule 36 (number -> INTEGER .)
    PLUS            reduce using rule 36 (number -> INTEGER .)
    MINUS           reduce using rule 36 (number -> INTEGER .)
    COLON           reduce using rule 36 (number -> INTEGER .)
    SEMICOLON       reduce using rule 36 (number -> INTEGER .)
    COMMENT         reduce using rule 36 (number -> INTEGER .)
    IF              reduce using rule 36 (number -> INTEGER .)
    SWITCH          reduce using rule 36 (number -> INTEGER .)
    TRY             reduce using rule 36 (number -> INTEGER .)
    FOR             reduce using rule 36 (number -> INTEGER .)
    WHILE           reduce using rule 36 (number -> INTEGER .)
    IDENTIFIER      reduce using rule 36 (number -> INTEGER .)
    RETURN          reduce using rule 36 (number -> INTEGER .)
    LBRACKET        reduce using rule 36 (number -> INTEGER .)
    CLC             reduce using rule 36 (number -> INTEGER .)
    CLOSE           reduce using rule 36 (number -> INTEGER .)
    CLEAR           reduce using rule 36 (number -> INTEGER .)
    BREAK           reduce using rule 36 (number -> INTEGER .)
    CONTINUE        reduce using rule 36 (number -> INTEGER .)
    STRING          reduce using rule 36 (number -> INTEGER .)
    DIRECTORY       reduce using rule 36 (number -> INTEGER .)
    LPAREN          reduce using rule 36 (number -> INTEGER .)
    INTEGER         reduce using rule 36 (number -> INTEGER .)
    FLOAT           reduce using rule 36 (number -> INTEGER .)
    ALL             reduce using rule 36 (number -> INTEGER .)
    NOT             reduce using rule 36 (number -> INTEGER .)
    TRUE            reduce using rule 36 (number -> INTEGER .)
    FALSE           reduce using rule 36 (number -> INTEGER .)
    FUNCTION        reduce using rule 36 (number -> INTEGER .)
    $end            reduce using rule 36 (number -> INTEGER .)
    CASE            reduce using rule 36 (number -> INTEGER .)
    OTHERWISE       reduce using rule 36 (number -> INTEGER .)
    CATCH           reduce using rule 36 (number -> INTEGER .)
    END             reduce using rule 36 (number -> INTEGER .)
    ELSE            reduce using rule 36 (number -> INTEGER .)
    RBRACKET        reduce using rule 36 (number -> INTEGER .)
    COMMA           reduce using rule 36 (number -> INTEGER .)
    RPAREN          reduce using rule 36 (number -> INTEGER .)
    RBRACE          reduce using rule 36 (number -> INTEGER .)


state 21

    (40) exp -> DIRECTORY .

    TRANSPOSE       reduce using rule 40 (exp -> DIRECTORY .)
    ELOR            reduce using rule 40 (exp -> DIRECTORY .)
    ELAND           reduce using rule 40 (exp -> DIRECTORY .)
    OROR            reduce using rule 40 (exp -> DIRECTORY .)
    ANDAND          reduce using rule 40 (exp -> DIRECTORY .)
    EQUALEQUAL      reduce using rule 40 (exp -> DIRECTORY .)
    NOTEQUAL        reduce using rule 40 (exp -> DIRECTORY .)
    LT              reduce using rule 40 (exp -> DIRECTORY .)
    GT              reduce using rule 40 (exp -> DIRECTORY .)
    LE              reduce using rule 40 (exp -> DIRECTORY .)
    GE              reduce using rule 40 (exp -> DIRECTORY .)
    MPOWER          reduce using rule 40 (exp -> DIRECTORY .)
    POWER           reduce using rule 40 (exp -> DIRECTORY .)
    MTIMES          reduce using rule 40 (exp -> DIRECTORY .)
    MDIVIDE         reduce using rule 40 (exp -> DIRECTORY .)
    TIMES           reduce using rule 40 (exp -> DIRECTORY .)
    DIVIDE          reduce using rule 40 (exp -> DIRECTORY .)
    BACKSLASH       reduce using rule 40 (exp -> DIRECTORY .)
    PLUS            reduce using rule 40 (exp -> DIRECTORY .)
    MINUS           reduce using rule 40 (exp -> DIRECTORY .)
    COLON           reduce using rule 40 (exp -> DIRECTORY .)
    SEMICOLON       reduce using rule 40 (exp -> DIRECTORY .)
    COMMENT         reduce using rule 40 (exp -> DIRECTORY .)
    IF              reduce using rule 40 (exp -> DIRECTORY .)
    SWITCH          reduce using rule 40 (exp -> DIRECTORY .)
    TRY             reduce using rule 40 (exp -> DIRECTORY .)
    FOR             reduce using rule 40 (exp -> DIRECTORY .)
    WHILE           reduce using rule 40 (exp -> DIRECTORY .)
    IDENTIFIER      reduce using rule 40 (exp -> DIRECTORY .)
    RETURN          reduce using rule 40 (exp -> DIRECTORY .)
    LBRACKET        reduce using rule 40 (exp -> DIRECTORY .)
    CLC             reduce using rule 40 (exp -> DIRECTORY .)
    CLOSE           reduce using rule 40 (exp -> DIRECTORY .)
    CLEAR           reduce using rule 40 (exp -> DIRECTORY .)
    BREAK           reduce using rule 40 (exp -> DIRECTORY .)
    CONTINUE        reduce using rule 40 (exp -> DIRECTORY .)
    STRING          reduce using rule 40 (exp -> DIRECTORY .)
    DIRECTORY       reduce using rule 40 (exp -> DIRECTORY .)
    LPAREN          reduce using rule 40 (exp -> DIRECTORY .)
    INTEGER         reduce using rule 40 (exp -> DIRECTORY .)
    FLOAT           reduce using rule 40 (exp -> DIRECTORY .)
    ALL             reduce using rule 40 (exp -> DIRECTORY .)
    NOT             reduce using rule 40 (exp -> DIRECTORY .)
    TRUE            reduce using rule 40 (exp -> DIRECTORY .)
    FALSE           reduce using rule 40 (exp -> DIRECTORY .)
    FUNCTION        reduce using rule 40 (exp -> DIRECTORY .)
    $end            reduce using rule 40 (exp -> DIRECTORY .)
    CASE            reduce using rule 40 (exp -> DIRECTORY .)
    OTHERWISE       reduce using rule 40 (exp -> DIRECTORY .)
    CATCH           reduce using rule 40 (exp -> DIRECTORY .)
    END             reduce using rule 40 (exp -> DIRECTORY .)
    ELSE            reduce using rule 40 (exp -> DIRECTORY .)
    RBRACKET        reduce using rule 40 (exp -> DIRECTORY .)
    COMMA           reduce using rule 40 (exp -> DIRECTORY .)
    RPAREN          reduce using rule 40 (exp -> DIRECTORY .)
    RBRACE          reduce using rule 40 (exp -> DIRECTORY .)


state 22

    (44) exp -> number .

    TRANSPOSE       reduce using rule 44 (exp -> number .)
    ELOR            reduce using rule 44 (exp -> number .)
    ELAND           reduce using rule 44 (exp -> number .)
    OROR            reduce using rule 44 (exp -> number .)
    ANDAND          reduce using rule 44 (exp -> number .)
    EQUALEQUAL      reduce using rule 44 (exp -> number .)
    NOTEQUAL        reduce using rule 44 (exp -> number .)
    LT              reduce using rule 44 (exp -> number .)
    GT              reduce using rule 44 (exp -> number .)
    LE              reduce using rule 44 (exp -> number .)
    GE              reduce using rule 44 (exp -> number .)
    MPOWER          reduce using rule 44 (exp -> number .)
    POWER           reduce using rule 44 (exp -> number .)
    MTIMES          reduce using rule 44 (exp -> number .)
    MDIVIDE         reduce using rule 44 (exp -> number .)
    TIMES           reduce using rule 44 (exp -> number .)
    DIVIDE          reduce using rule 44 (exp -> number .)
    BACKSLASH       reduce using rule 44 (exp -> number .)
    PLUS            reduce using rule 44 (exp -> number .)
    MINUS           reduce using rule 44 (exp -> number .)
    COLON           reduce using rule 44 (exp -> number .)
    SEMICOLON       reduce using rule 44 (exp -> number .)
    COMMENT         reduce using rule 44 (exp -> number .)
    IF              reduce using rule 44 (exp -> number .)
    SWITCH          reduce using rule 44 (exp -> number .)
    TRY             reduce using rule 44 (exp -> number .)
    FOR             reduce using rule 44 (exp -> number .)
    WHILE           reduce using rule 44 (exp -> number .)
    IDENTIFIER      reduce using rule 44 (exp -> number .)
    RETURN          reduce using rule 44 (exp -> number .)
    LBRACKET        reduce using rule 44 (exp -> number .)
    CLC             reduce using rule 44 (exp -> number .)
    CLOSE           reduce using rule 44 (exp -> number .)
    CLEAR           reduce using rule 44 (exp -> number .)
    BREAK           reduce using rule 44 (exp -> number .)
    CONTINUE        reduce using rule 44 (exp -> number .)
    STRING          reduce using rule 44 (exp -> number .)
    DIRECTORY       reduce using rule 44 (exp -> number .)
    LPAREN          reduce using rule 44 (exp -> number .)
    INTEGER         reduce using rule 44 (exp -> number .)
    FLOAT           reduce using rule 44 (exp -> number .)
    ALL             reduce using rule 44 (exp -> number .)
    NOT             reduce using rule 44 (exp -> number .)
    TRUE            reduce using rule 44 (exp -> number .)
    FALSE           reduce using rule 44 (exp -> number .)
    FUNCTION        reduce using rule 44 (exp -> number .)
    $end            reduce using rule 44 (exp -> number .)
    CASE            reduce using rule 44 (exp -> number .)
    OTHERWISE       reduce using rule 44 (exp -> number .)
    CATCH           reduce using rule 44 (exp -> number .)
    END             reduce using rule 44 (exp -> number .)
    ELSE            reduce using rule 44 (exp -> number .)
    RBRACKET        reduce using rule 44 (exp -> number .)
    COMMA           reduce using rule 44 (exp -> number .)
    RPAREN          reduce using rule 44 (exp -> number .)
    RBRACE          reduce using rule 44 (exp -> number .)


state 23

    (29) keycall -> CLC .

    SEMICOLON       reduce using rule 29 (keycall -> CLC .)
    COMMENT         reduce using rule 29 (keycall -> CLC .)
    IF              reduce using rule 29 (keycall -> CLC .)
    SWITCH          reduce using rule 29 (keycall -> CLC .)
    TRY             reduce using rule 29 (keycall -> CLC .)
    FOR             reduce using rule 29 (keycall -> CLC .)
    WHILE           reduce using rule 29 (keycall -> CLC .)
    IDENTIFIER      reduce using rule 29 (keycall -> CLC .)
    RETURN          reduce using rule 29 (keycall -> CLC .)
    LBRACKET        reduce using rule 29 (keycall -> CLC .)
    CLC             reduce using rule 29 (keycall -> CLC .)
    CLOSE           reduce using rule 29 (keycall -> CLC .)
    CLEAR           reduce using rule 29 (keycall -> CLC .)
    BREAK           reduce using rule 29 (keycall -> CLC .)
    CONTINUE        reduce using rule 29 (keycall -> CLC .)
    STRING          reduce using rule 29 (keycall -> CLC .)
    DIRECTORY       reduce using rule 29 (keycall -> CLC .)
    LPAREN          reduce using rule 29 (keycall -> CLC .)
    INTEGER         reduce using rule 29 (keycall -> CLC .)
    FLOAT           reduce using rule 29 (keycall -> CLC .)
    ALL             reduce using rule 29 (keycall -> CLC .)
    NOT             reduce using rule 29 (keycall -> CLC .)
    TRUE            reduce using rule 29 (keycall -> CLC .)
    FALSE           reduce using rule 29 (keycall -> CLC .)
    COLON           reduce using rule 29 (keycall -> CLC .)
    CASE            reduce using rule 29 (keycall -> CLC .)
    OTHERWISE       reduce using rule 29 (keycall -> CLC .)
    CATCH           reduce using rule 29 (keycall -> CLC .)
    END             reduce using rule 29 (keycall -> CLC .)
    FUNCTION        reduce using rule 29 (keycall -> CLC .)
    $end            reduce using rule 29 (keycall -> CLC .)
    ELSE            reduce using rule 29 (keycall -> CLC .)


state 24

    (9) stmt -> IF . exp compoundstmt END
    (10) stmt -> IF . exp compoundstmt ELSE compoundstmt END
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    number                         shift and go to state 22
    exp                            shift and go to state 58

state 25

    (46) keyword -> ALL .

    TRANSPOSE       reduce using rule 46 (keyword -> ALL .)
    ELOR            reduce using rule 46 (keyword -> ALL .)
    ELAND           reduce using rule 46 (keyword -> ALL .)
    OROR            reduce using rule 46 (keyword -> ALL .)
    ANDAND          reduce using rule 46 (keyword -> ALL .)
    EQUALEQUAL      reduce using rule 46 (keyword -> ALL .)
    NOTEQUAL        reduce using rule 46 (keyword -> ALL .)
    LT              reduce using rule 46 (keyword -> ALL .)
    GT              reduce using rule 46 (keyword -> ALL .)
    LE              reduce using rule 46 (keyword -> ALL .)
    GE              reduce using rule 46 (keyword -> ALL .)
    MPOWER          reduce using rule 46 (keyword -> ALL .)
    POWER           reduce using rule 46 (keyword -> ALL .)
    MTIMES          reduce using rule 46 (keyword -> ALL .)
    MDIVIDE         reduce using rule 46 (keyword -> ALL .)
    TIMES           reduce using rule 46 (keyword -> ALL .)
    DIVIDE          reduce using rule 46 (keyword -> ALL .)
    BACKSLASH       reduce using rule 46 (keyword -> ALL .)
    PLUS            reduce using rule 46 (keyword -> ALL .)
    MINUS           reduce using rule 46 (keyword -> ALL .)
    COLON           reduce using rule 46 (keyword -> ALL .)
    SEMICOLON       reduce using rule 46 (keyword -> ALL .)
    COMMENT         reduce using rule 46 (keyword -> ALL .)
    IF              reduce using rule 46 (keyword -> ALL .)
    SWITCH          reduce using rule 46 (keyword -> ALL .)
    TRY             reduce using rule 46 (keyword -> ALL .)
    FOR             reduce using rule 46 (keyword -> ALL .)
    WHILE           reduce using rule 46 (keyword -> ALL .)
    IDENTIFIER      reduce using rule 46 (keyword -> ALL .)
    RETURN          reduce using rule 46 (keyword -> ALL .)
    LBRACKET        reduce using rule 46 (keyword -> ALL .)
    CLC             reduce using rule 46 (keyword -> ALL .)
    CLOSE           reduce using rule 46 (keyword -> ALL .)
    CLEAR           reduce using rule 46 (keyword -> ALL .)
    BREAK           reduce using rule 46 (keyword -> ALL .)
    CONTINUE        reduce using rule 46 (keyword -> ALL .)
    STRING          reduce using rule 46 (keyword -> ALL .)
    DIRECTORY       reduce using rule 46 (keyword -> ALL .)
    LPAREN          reduce using rule 46 (keyword -> ALL .)
    INTEGER         reduce using rule 46 (keyword -> ALL .)
    FLOAT           reduce using rule 46 (keyword -> ALL .)
    ALL             reduce using rule 46 (keyword -> ALL .)
    NOT             reduce using rule 46 (keyword -> ALL .)
    TRUE            reduce using rule 46 (keyword -> ALL .)
    FALSE           reduce using rule 46 (keyword -> ALL .)
    FUNCTION        reduce using rule 46 (keyword -> ALL .)
    $end            reduce using rule 46 (keyword -> ALL .)
    CASE            reduce using rule 46 (keyword -> ALL .)
    OTHERWISE       reduce using rule 46 (keyword -> ALL .)
    CATCH           reduce using rule 46 (keyword -> ALL .)
    END             reduce using rule 46 (keyword -> ALL .)
    ELSE            reduce using rule 46 (keyword -> ALL .)
    RBRACKET        reduce using rule 46 (keyword -> ALL .)
    COMMA           reduce using rule 46 (keyword -> ALL .)
    RPAREN          reduce using rule 46 (keyword -> ALL .)
    RBRACE          reduce using rule 46 (keyword -> ALL .)


state 26

    (49) keyword -> FALSE .

    TRANSPOSE       reduce using rule 49 (keyword -> FALSE .)
    ELOR            reduce using rule 49 (keyword -> FALSE .)
    ELAND           reduce using rule 49 (keyword -> FALSE .)
    OROR            reduce using rule 49 (keyword -> FALSE .)
    ANDAND          reduce using rule 49 (keyword -> FALSE .)
    EQUALEQUAL      reduce using rule 49 (keyword -> FALSE .)
    NOTEQUAL        reduce using rule 49 (keyword -> FALSE .)
    LT              reduce using rule 49 (keyword -> FALSE .)
    GT              reduce using rule 49 (keyword -> FALSE .)
    LE              reduce using rule 49 (keyword -> FALSE .)
    GE              reduce using rule 49 (keyword -> FALSE .)
    MPOWER          reduce using rule 49 (keyword -> FALSE .)
    POWER           reduce using rule 49 (keyword -> FALSE .)
    MTIMES          reduce using rule 49 (keyword -> FALSE .)
    MDIVIDE         reduce using rule 49 (keyword -> FALSE .)
    TIMES           reduce using rule 49 (keyword -> FALSE .)
    DIVIDE          reduce using rule 49 (keyword -> FALSE .)
    BACKSLASH       reduce using rule 49 (keyword -> FALSE .)
    PLUS            reduce using rule 49 (keyword -> FALSE .)
    MINUS           reduce using rule 49 (keyword -> FALSE .)
    COLON           reduce using rule 49 (keyword -> FALSE .)
    SEMICOLON       reduce using rule 49 (keyword -> FALSE .)
    COMMENT         reduce using rule 49 (keyword -> FALSE .)
    IF              reduce using rule 49 (keyword -> FALSE .)
    SWITCH          reduce using rule 49 (keyword -> FALSE .)
    TRY             reduce using rule 49 (keyword -> FALSE .)
    FOR             reduce using rule 49 (keyword -> FALSE .)
    WHILE           reduce using rule 49 (keyword -> FALSE .)
    IDENTIFIER      reduce using rule 49 (keyword -> FALSE .)
    RETURN          reduce using rule 49 (keyword -> FALSE .)
    LBRACKET        reduce using rule 49 (keyword -> FALSE .)
    CLC             reduce using rule 49 (keyword -> FALSE .)
    CLOSE           reduce using rule 49 (keyword -> FALSE .)
    CLEAR           reduce using rule 49 (keyword -> FALSE .)
    BREAK           reduce using rule 49 (keyword -> FALSE .)
    CONTINUE        reduce using rule 49 (keyword -> FALSE .)
    STRING          reduce using rule 49 (keyword -> FALSE .)
    DIRECTORY       reduce using rule 49 (keyword -> FALSE .)
    LPAREN          reduce using rule 49 (keyword -> FALSE .)
    INTEGER         reduce using rule 49 (keyword -> FALSE .)
    FLOAT           reduce using rule 49 (keyword -> FALSE .)
    ALL             reduce using rule 49 (keyword -> FALSE .)
    NOT             reduce using rule 49 (keyword -> FALSE .)
    TRUE            reduce using rule 49 (keyword -> FALSE .)
    FALSE           reduce using rule 49 (keyword -> FALSE .)
    FUNCTION        reduce using rule 49 (keyword -> FALSE .)
    $end            reduce using rule 49 (keyword -> FALSE .)
    CASE            reduce using rule 49 (keyword -> FALSE .)
    OTHERWISE       reduce using rule 49 (keyword -> FALSE .)
    CATCH           reduce using rule 49 (keyword -> FALSE .)
    END             reduce using rule 49 (keyword -> FALSE .)
    ELSE            reduce using rule 49 (keyword -> FALSE .)
    RBRACKET        reduce using rule 49 (keyword -> FALSE .)
    COMMA           reduce using rule 49 (keyword -> FALSE .)
    RPAREN          reduce using rule 49 (keyword -> FALSE .)
    RBRACE          reduce using rule 49 (keyword -> FALSE .)


state 27

    (45) exp -> keyword .

    TRANSPOSE       reduce using rule 45 (exp -> keyword .)
    ELOR            reduce using rule 45 (exp -> keyword .)
    ELAND           reduce using rule 45 (exp -> keyword .)
    OROR            reduce using rule 45 (exp -> keyword .)
    ANDAND          reduce using rule 45 (exp -> keyword .)
    EQUALEQUAL      reduce using rule 45 (exp -> keyword .)
    NOTEQUAL        reduce using rule 45 (exp -> keyword .)
    LT              reduce using rule 45 (exp -> keyword .)
    GT              reduce using rule 45 (exp -> keyword .)
    LE              reduce using rule 45 (exp -> keyword .)
    GE              reduce using rule 45 (exp -> keyword .)
    MPOWER          reduce using rule 45 (exp -> keyword .)
    POWER           reduce using rule 45 (exp -> keyword .)
    MTIMES          reduce using rule 45 (exp -> keyword .)
    MDIVIDE         reduce using rule 45 (exp -> keyword .)
    TIMES           reduce using rule 45 (exp -> keyword .)
    DIVIDE          reduce using rule 45 (exp -> keyword .)
    BACKSLASH       reduce using rule 45 (exp -> keyword .)
    PLUS            reduce using rule 45 (exp -> keyword .)
    MINUS           reduce using rule 45 (exp -> keyword .)
    COLON           reduce using rule 45 (exp -> keyword .)
    SEMICOLON       reduce using rule 45 (exp -> keyword .)
    COMMENT         reduce using rule 45 (exp -> keyword .)
    IF              reduce using rule 45 (exp -> keyword .)
    SWITCH          reduce using rule 45 (exp -> keyword .)
    TRY             reduce using rule 45 (exp -> keyword .)
    FOR             reduce using rule 45 (exp -> keyword .)
    WHILE           reduce using rule 45 (exp -> keyword .)
    IDENTIFIER      reduce using rule 45 (exp -> keyword .)
    RETURN          reduce using rule 45 (exp -> keyword .)
    LBRACKET        reduce using rule 45 (exp -> keyword .)
    CLC             reduce using rule 45 (exp -> keyword .)
    CLOSE           reduce using rule 45 (exp -> keyword .)
    CLEAR           reduce using rule 45 (exp -> keyword .)
    BREAK           reduce using rule 45 (exp -> keyword .)
    CONTINUE        reduce using rule 45 (exp -> keyword .)
    STRING          reduce using rule 45 (exp -> keyword .)
    DIRECTORY       reduce using rule 45 (exp -> keyword .)
    LPAREN          reduce using rule 45 (exp -> keyword .)
    INTEGER         reduce using rule 45 (exp -> keyword .)
    FLOAT           reduce using rule 45 (exp -> keyword .)
    ALL             reduce using rule 45 (exp -> keyword .)
    NOT             reduce using rule 45 (exp -> keyword .)
    TRUE            reduce using rule 45 (exp -> keyword .)
    FALSE           reduce using rule 45 (exp -> keyword .)
    FUNCTION        reduce using rule 45 (exp -> keyword .)
    $end            reduce using rule 45 (exp -> keyword .)
    CASE            reduce using rule 45 (exp -> keyword .)
    OTHERWISE       reduce using rule 45 (exp -> keyword .)
    CATCH           reduce using rule 45 (exp -> keyword .)
    END             reduce using rule 45 (exp -> keyword .)
    ELSE            reduce using rule 45 (exp -> keyword .)
    RBRACKET        reduce using rule 45 (exp -> keyword .)
    COMMA           reduce using rule 45 (exp -> keyword .)
    RPAREN          reduce using rule 45 (exp -> keyword .)
    RBRACE          reduce using rule 45 (exp -> keyword .)


state 28

    (37) number -> FLOAT .

    TRANSPOSE       reduce using rule 37 (number -> FLOAT .)
    ELOR            reduce using rule 37 (number -> FLOAT .)
    ELAND           reduce using rule 37 (number -> FLOAT .)
    OROR            reduce using rule 37 (number -> FLOAT .)
    ANDAND          reduce using rule 37 (number -> FLOAT .)
    EQUALEQUAL      reduce using rule 37 (number -> FLOAT .)
    NOTEQUAL        reduce using rule 37 (number -> FLOAT .)
    LT              reduce using rule 37 (number -> FLOAT .)
    GT              reduce using rule 37 (number -> FLOAT .)
    LE              reduce using rule 37 (number -> FLOAT .)
    GE              reduce using rule 37 (number -> FLOAT .)
    MPOWER          reduce using rule 37 (number -> FLOAT .)
    POWER           reduce using rule 37 (number -> FLOAT .)
    MTIMES          reduce using rule 37 (number -> FLOAT .)
    MDIVIDE         reduce using rule 37 (number -> FLOAT .)
    TIMES           reduce using rule 37 (number -> FLOAT .)
    DIVIDE          reduce using rule 37 (number -> FLOAT .)
    BACKSLASH       reduce using rule 37 (number -> FLOAT .)
    PLUS            reduce using rule 37 (number -> FLOAT .)
    MINUS           reduce using rule 37 (number -> FLOAT .)
    COLON           reduce using rule 37 (number -> FLOAT .)
    SEMICOLON       reduce using rule 37 (number -> FLOAT .)
    COMMENT         reduce using rule 37 (number -> FLOAT .)
    IF              reduce using rule 37 (number -> FLOAT .)
    SWITCH          reduce using rule 37 (number -> FLOAT .)
    TRY             reduce using rule 37 (number -> FLOAT .)
    FOR             reduce using rule 37 (number -> FLOAT .)
    WHILE           reduce using rule 37 (number -> FLOAT .)
    IDENTIFIER      reduce using rule 37 (number -> FLOAT .)
    RETURN          reduce using rule 37 (number -> FLOAT .)
    LBRACKET        reduce using rule 37 (number -> FLOAT .)
    CLC             reduce using rule 37 (number -> FLOAT .)
    CLOSE           reduce using rule 37 (number -> FLOAT .)
    CLEAR           reduce using rule 37 (number -> FLOAT .)
    BREAK           reduce using rule 37 (number -> FLOAT .)
    CONTINUE        reduce using rule 37 (number -> FLOAT .)
    STRING          reduce using rule 37 (number -> FLOAT .)
    DIRECTORY       reduce using rule 37 (number -> FLOAT .)
    LPAREN          reduce using rule 37 (number -> FLOAT .)
    INTEGER         reduce using rule 37 (number -> FLOAT .)
    FLOAT           reduce using rule 37 (number -> FLOAT .)
    ALL             reduce using rule 37 (number -> FLOAT .)
    NOT             reduce using rule 37 (number -> FLOAT .)
    TRUE            reduce using rule 37 (number -> FLOAT .)
    FALSE           reduce using rule 37 (number -> FLOAT .)
    FUNCTION        reduce using rule 37 (number -> FLOAT .)
    $end            reduce using rule 37 (number -> FLOAT .)
    CASE            reduce using rule 37 (number -> FLOAT .)
    OTHERWISE       reduce using rule 37 (number -> FLOAT .)
    CATCH           reduce using rule 37 (number -> FLOAT .)
    END             reduce using rule 37 (number -> FLOAT .)
    ELSE            reduce using rule 37 (number -> FLOAT .)
    RBRACKET        reduce using rule 37 (number -> FLOAT .)
    COMMA           reduce using rule 37 (number -> FLOAT .)
    RPAREN          reduce using rule 37 (number -> FLOAT .)
    RBRACE          reduce using rule 37 (number -> FLOAT .)


state 29

    (1) mat -> element . mat
    (1) mat -> . element mat
    (2) mat -> .
    (3) element -> . compoundstmt
    (4) element -> . FUNCTION IDENTIFIER EQUAL IDENTIFIER LPAREN optargs RPAREN compoundstmt END
    (5) compoundstmt -> . stmt SEMICOLON compoundstmt
    (6) compoundstmt -> . stmt compoundstmt
    (7) compoundstmt -> . COMMENT compoundstmt
    (8) compoundstmt -> .
    (9) stmt -> . IF exp compoundstmt END
    (10) stmt -> . IF exp compoundstmt ELSE compoundstmt END
    (11) stmt -> . SWITCH exp multiclause END
    (12) stmt -> . TRY compoundstmt multiclause END
    (13) stmt -> . FOR range compoundstmt END
    (14) stmt -> . WHILE exp compoundstmt END
    (15) stmt -> . IDENTIFIER EQUAL exp
    (16) stmt -> . matrix EQUAL exp
    (17) stmt -> . RETURN exp
    (18) stmt -> . keycall
    (19) stmt -> . IDENTIFIER PERIOD IDENTIFIER
    (20) stmt -> . exp
    (77) matrix -> . LBRACKET explist RBRACKET
    (29) keycall -> . CLC
    (30) keycall -> . CLOSE optvars
    (31) keycall -> . CLEAR optvars
    (32) keycall -> . BREAK
    (33) keycall -> . CONTINUE
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON

  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 2 (mat -> .)
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for CLC resolved as shift
  ! shift/reduce conflict for CLOSE resolved as shift
  ! shift/reduce conflict for CLEAR resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for DIRECTORY resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for ALL resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    $end            reduce using rule 2 (mat -> .)
    FUNCTION        shift and go to state 13
    COMMENT         shift and go to state 5
    IF              shift and go to state 24
    SWITCH          shift and go to state 9
    TRY             shift and go to state 18
    FOR             shift and go to state 15
    WHILE           shift and go to state 3
    IDENTIFIER      shift and go to state 12
    RETURN          shift and go to state 1
    LBRACKET        shift and go to state 2
    CLC             shift and go to state 23
    CLOSE           shift and go to state 10
    CLEAR           shift and go to state 16
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7

  ! FUNCTION        [ reduce using rule 8 (compoundstmt -> .) ]
  ! COMMENT         [ reduce using rule 8 (compoundstmt -> .) ]
  ! IF              [ reduce using rule 8 (compoundstmt -> .) ]
  ! SWITCH          [ reduce using rule 8 (compoundstmt -> .) ]
  ! TRY             [ reduce using rule 8 (compoundstmt -> .) ]
  ! FOR             [ reduce using rule 8 (compoundstmt -> .) ]
  ! WHILE           [ reduce using rule 8 (compoundstmt -> .) ]
  ! IDENTIFIER      [ reduce using rule 8 (compoundstmt -> .) ]
  ! RETURN          [ reduce using rule 8 (compoundstmt -> .) ]
  ! LBRACKET        [ reduce using rule 8 (compoundstmt -> .) ]
  ! CLC             [ reduce using rule 8 (compoundstmt -> .) ]
  ! CLOSE           [ reduce using rule 8 (compoundstmt -> .) ]
  ! CLEAR           [ reduce using rule 8 (compoundstmt -> .) ]
  ! BREAK           [ reduce using rule 8 (compoundstmt -> .) ]
  ! CONTINUE        [ reduce using rule 8 (compoundstmt -> .) ]
  ! STRING          [ reduce using rule 8 (compoundstmt -> .) ]
  ! DIRECTORY       [ reduce using rule 8 (compoundstmt -> .) ]
  ! LPAREN          [ reduce using rule 8 (compoundstmt -> .) ]
  ! INTEGER         [ reduce using rule 8 (compoundstmt -> .) ]
  ! FLOAT           [ reduce using rule 8 (compoundstmt -> .) ]
  ! ALL             [ reduce using rule 8 (compoundstmt -> .) ]
  ! NOT             [ reduce using rule 8 (compoundstmt -> .) ]
  ! TRUE            [ reduce using rule 8 (compoundstmt -> .) ]
  ! FALSE           [ reduce using rule 8 (compoundstmt -> .) ]
  ! COLON           [ reduce using rule 8 (compoundstmt -> .) ]
  ! $end            [ reduce using rule 8 (compoundstmt -> .) ]

    number                         shift and go to state 22
    mat                            shift and go to state 59
    keycall                        shift and go to state 8
    stmt                           shift and go to state 17
    element                        shift and go to state 29
    matrix                         shift and go to state 6
    keyword                        shift and go to state 27
    exp                            shift and go to state 32
    compoundstmt                   shift and go to state 34

state 30

    (32) keycall -> BREAK .

    SEMICOLON       reduce using rule 32 (keycall -> BREAK .)
    COMMENT         reduce using rule 32 (keycall -> BREAK .)
    IF              reduce using rule 32 (keycall -> BREAK .)
    SWITCH          reduce using rule 32 (keycall -> BREAK .)
    TRY             reduce using rule 32 (keycall -> BREAK .)
    FOR             reduce using rule 32 (keycall -> BREAK .)
    WHILE           reduce using rule 32 (keycall -> BREAK .)
    IDENTIFIER      reduce using rule 32 (keycall -> BREAK .)
    RETURN          reduce using rule 32 (keycall -> BREAK .)
    LBRACKET        reduce using rule 32 (keycall -> BREAK .)
    CLC             reduce using rule 32 (keycall -> BREAK .)
    CLOSE           reduce using rule 32 (keycall -> BREAK .)
    CLEAR           reduce using rule 32 (keycall -> BREAK .)
    BREAK           reduce using rule 32 (keycall -> BREAK .)
    CONTINUE        reduce using rule 32 (keycall -> BREAK .)
    STRING          reduce using rule 32 (keycall -> BREAK .)
    DIRECTORY       reduce using rule 32 (keycall -> BREAK .)
    LPAREN          reduce using rule 32 (keycall -> BREAK .)
    INTEGER         reduce using rule 32 (keycall -> BREAK .)
    FLOAT           reduce using rule 32 (keycall -> BREAK .)
    ALL             reduce using rule 32 (keycall -> BREAK .)
    NOT             reduce using rule 32 (keycall -> BREAK .)
    TRUE            reduce using rule 32 (keycall -> BREAK .)
    FALSE           reduce using rule 32 (keycall -> BREAK .)
    COLON           reduce using rule 32 (keycall -> BREAK .)
    CASE            reduce using rule 32 (keycall -> BREAK .)
    OTHERWISE       reduce using rule 32 (keycall -> BREAK .)
    CATCH           reduce using rule 32 (keycall -> BREAK .)
    END             reduce using rule 32 (keycall -> BREAK .)
    FUNCTION        reduce using rule 32 (keycall -> BREAK .)
    $end            reduce using rule 32 (keycall -> BREAK .)
    ELSE            reduce using rule 32 (keycall -> BREAK .)


state 31

    (33) keycall -> CONTINUE .

    SEMICOLON       reduce using rule 33 (keycall -> CONTINUE .)
    COMMENT         reduce using rule 33 (keycall -> CONTINUE .)
    IF              reduce using rule 33 (keycall -> CONTINUE .)
    SWITCH          reduce using rule 33 (keycall -> CONTINUE .)
    TRY             reduce using rule 33 (keycall -> CONTINUE .)
    FOR             reduce using rule 33 (keycall -> CONTINUE .)
    WHILE           reduce using rule 33 (keycall -> CONTINUE .)
    IDENTIFIER      reduce using rule 33 (keycall -> CONTINUE .)
    RETURN          reduce using rule 33 (keycall -> CONTINUE .)
    LBRACKET        reduce using rule 33 (keycall -> CONTINUE .)
    CLC             reduce using rule 33 (keycall -> CONTINUE .)
    CLOSE           reduce using rule 33 (keycall -> CONTINUE .)
    CLEAR           reduce using rule 33 (keycall -> CONTINUE .)
    BREAK           reduce using rule 33 (keycall -> CONTINUE .)
    CONTINUE        reduce using rule 33 (keycall -> CONTINUE .)
    STRING          reduce using rule 33 (keycall -> CONTINUE .)
    DIRECTORY       reduce using rule 33 (keycall -> CONTINUE .)
    LPAREN          reduce using rule 33 (keycall -> CONTINUE .)
    INTEGER         reduce using rule 33 (keycall -> CONTINUE .)
    FLOAT           reduce using rule 33 (keycall -> CONTINUE .)
    ALL             reduce using rule 33 (keycall -> CONTINUE .)
    NOT             reduce using rule 33 (keycall -> CONTINUE .)
    TRUE            reduce using rule 33 (keycall -> CONTINUE .)
    FALSE           reduce using rule 33 (keycall -> CONTINUE .)
    COLON           reduce using rule 33 (keycall -> CONTINUE .)
    CASE            reduce using rule 33 (keycall -> CONTINUE .)
    OTHERWISE       reduce using rule 33 (keycall -> CONTINUE .)
    CATCH           reduce using rule 33 (keycall -> CONTINUE .)
    END             reduce using rule 33 (keycall -> CONTINUE .)
    FUNCTION        reduce using rule 33 (keycall -> CONTINUE .)
    $end            reduce using rule 33 (keycall -> CONTINUE .)
    ELSE            reduce using rule 33 (keycall -> CONTINUE .)


state 32

    (20) stmt -> exp .
    (41) exp -> exp . TRANSPOSE
    (55) exp -> exp . ELOR exp
    (56) exp -> exp . ELAND exp
    (57) exp -> exp . OROR exp
    (58) exp -> exp . ANDAND exp
    (59) exp -> exp . EQUALEQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . LE exp
    (64) exp -> exp . GE exp
    (65) exp -> exp . MPOWER exp
    (66) exp -> exp . POWER exp
    (67) exp -> exp . MTIMES exp
    (68) exp -> exp . MDIVIDE exp
    (69) exp -> exp . TIMES exp
    (70) exp -> exp . DIVIDE exp
    (71) exp -> exp . BACKSLASH exp
    (72) exp -> exp . PLUS exp
    (73) exp -> exp . MINUS exp
    (74) exp -> exp . COLON exp COLON exp
    (75) exp -> exp . COLON exp

  ! shift/reduce conflict for COLON resolved as shift
    SEMICOLON       reduce using rule 20 (stmt -> exp .)
    COMMENT         reduce using rule 20 (stmt -> exp .)
    IF              reduce using rule 20 (stmt -> exp .)
    SWITCH          reduce using rule 20 (stmt -> exp .)
    TRY             reduce using rule 20 (stmt -> exp .)
    FOR             reduce using rule 20 (stmt -> exp .)
    WHILE           reduce using rule 20 (stmt -> exp .)
    IDENTIFIER      reduce using rule 20 (stmt -> exp .)
    RETURN          reduce using rule 20 (stmt -> exp .)
    LBRACKET        reduce using rule 20 (stmt -> exp .)
    CLC             reduce using rule 20 (stmt -> exp .)
    CLOSE           reduce using rule 20 (stmt -> exp .)
    CLEAR           reduce using rule 20 (stmt -> exp .)
    BREAK           reduce using rule 20 (stmt -> exp .)
    CONTINUE        reduce using rule 20 (stmt -> exp .)
    STRING          reduce using rule 20 (stmt -> exp .)
    DIRECTORY       reduce using rule 20 (stmt -> exp .)
    LPAREN          reduce using rule 20 (stmt -> exp .)
    INTEGER         reduce using rule 20 (stmt -> exp .)
    FLOAT           reduce using rule 20 (stmt -> exp .)
    ALL             reduce using rule 20 (stmt -> exp .)
    NOT             reduce using rule 20 (stmt -> exp .)
    TRUE            reduce using rule 20 (stmt -> exp .)
    FALSE           reduce using rule 20 (stmt -> exp .)
    END             reduce using rule 20 (stmt -> exp .)
    CASE            reduce using rule 20 (stmt -> exp .)
    OTHERWISE       reduce using rule 20 (stmt -> exp .)
    CATCH           reduce using rule 20 (stmt -> exp .)
    FUNCTION        reduce using rule 20 (stmt -> exp .)
    $end            reduce using rule 20 (stmt -> exp .)
    ELSE            reduce using rule 20 (stmt -> exp .)
    TRANSPOSE       shift and go to state 68
    ELOR            shift and go to state 63
    ELAND           shift and go to state 62
    OROR            shift and go to state 60
    ANDAND          shift and go to state 79
    EQUALEQUAL      shift and go to state 73
    NOTEQUAL        shift and go to state 61
    LT              shift and go to state 70
    GT              shift and go to state 74
    LE              shift and go to state 66
    GE              shift and go to state 78
    MPOWER          shift and go to state 80
    POWER           shift and go to state 67
    MTIMES          shift and go to state 64
    MDIVIDE         shift and go to state 76
    TIMES           shift and go to state 77
    DIVIDE          shift and go to state 75
    BACKSLASH       shift and go to state 69
    PLUS            shift and go to state 72
    MINUS           shift and go to state 65
    COLON           shift and go to state 71

  ! COLON           [ reduce using rule 20 (stmt -> exp .) ]


state 33

    (47) keyword -> NOT .

    TRANSPOSE       reduce using rule 47 (keyword -> NOT .)
    ELOR            reduce using rule 47 (keyword -> NOT .)
    ELAND           reduce using rule 47 (keyword -> NOT .)
    OROR            reduce using rule 47 (keyword -> NOT .)
    ANDAND          reduce using rule 47 (keyword -> NOT .)
    EQUALEQUAL      reduce using rule 47 (keyword -> NOT .)
    NOTEQUAL        reduce using rule 47 (keyword -> NOT .)
    LT              reduce using rule 47 (keyword -> NOT .)
    GT              reduce using rule 47 (keyword -> NOT .)
    LE              reduce using rule 47 (keyword -> NOT .)
    GE              reduce using rule 47 (keyword -> NOT .)
    MPOWER          reduce using rule 47 (keyword -> NOT .)
    POWER           reduce using rule 47 (keyword -> NOT .)
    MTIMES          reduce using rule 47 (keyword -> NOT .)
    MDIVIDE         reduce using rule 47 (keyword -> NOT .)
    TIMES           reduce using rule 47 (keyword -> NOT .)
    DIVIDE          reduce using rule 47 (keyword -> NOT .)
    BACKSLASH       reduce using rule 47 (keyword -> NOT .)
    PLUS            reduce using rule 47 (keyword -> NOT .)
    MINUS           reduce using rule 47 (keyword -> NOT .)
    COLON           reduce using rule 47 (keyword -> NOT .)
    SEMICOLON       reduce using rule 47 (keyword -> NOT .)
    COMMENT         reduce using rule 47 (keyword -> NOT .)
    IF              reduce using rule 47 (keyword -> NOT .)
    SWITCH          reduce using rule 47 (keyword -> NOT .)
    TRY             reduce using rule 47 (keyword -> NOT .)
    FOR             reduce using rule 47 (keyword -> NOT .)
    WHILE           reduce using rule 47 (keyword -> NOT .)
    IDENTIFIER      reduce using rule 47 (keyword -> NOT .)
    RETURN          reduce using rule 47 (keyword -> NOT .)
    LBRACKET        reduce using rule 47 (keyword -> NOT .)
    CLC             reduce using rule 47 (keyword -> NOT .)
    CLOSE           reduce using rule 47 (keyword -> NOT .)
    CLEAR           reduce using rule 47 (keyword -> NOT .)
    BREAK           reduce using rule 47 (keyword -> NOT .)
    CONTINUE        reduce using rule 47 (keyword -> NOT .)
    STRING          reduce using rule 47 (keyword -> NOT .)
    DIRECTORY       reduce using rule 47 (keyword -> NOT .)
    LPAREN          reduce using rule 47 (keyword -> NOT .)
    INTEGER         reduce using rule 47 (keyword -> NOT .)
    FLOAT           reduce using rule 47 (keyword -> NOT .)
    ALL             reduce using rule 47 (keyword -> NOT .)
    NOT             reduce using rule 47 (keyword -> NOT .)
    TRUE            reduce using rule 47 (keyword -> NOT .)
    FALSE           reduce using rule 47 (keyword -> NOT .)
    FUNCTION        reduce using rule 47 (keyword -> NOT .)
    $end            reduce using rule 47 (keyword -> NOT .)
    CASE            reduce using rule 47 (keyword -> NOT .)
    OTHERWISE       reduce using rule 47 (keyword -> NOT .)
    CATCH           reduce using rule 47 (keyword -> NOT .)
    END             reduce using rule 47 (keyword -> NOT .)
    ELSE            reduce using rule 47 (keyword -> NOT .)
    RBRACKET        reduce using rule 47 (keyword -> NOT .)
    COMMA           reduce using rule 47 (keyword -> NOT .)
    RPAREN          reduce using rule 47 (keyword -> NOT .)
    RBRACE          reduce using rule 47 (keyword -> NOT .)


state 34

    (3) element -> compoundstmt .

    FUNCTION        reduce using rule 3 (element -> compoundstmt .)
    COMMENT         reduce using rule 3 (element -> compoundstmt .)
    IF              reduce using rule 3 (element -> compoundstmt .)
    SWITCH          reduce using rule 3 (element -> compoundstmt .)
    TRY             reduce using rule 3 (element -> compoundstmt .)
    FOR             reduce using rule 3 (element -> compoundstmt .)
    WHILE           reduce using rule 3 (element -> compoundstmt .)
    IDENTIFIER      reduce using rule 3 (element -> compoundstmt .)
    RETURN          reduce using rule 3 (element -> compoundstmt .)
    LBRACKET        reduce using rule 3 (element -> compoundstmt .)
    CLC             reduce using rule 3 (element -> compoundstmt .)
    CLOSE           reduce using rule 3 (element -> compoundstmt .)
    CLEAR           reduce using rule 3 (element -> compoundstmt .)
    BREAK           reduce using rule 3 (element -> compoundstmt .)
    CONTINUE        reduce using rule 3 (element -> compoundstmt .)
    STRING          reduce using rule 3 (element -> compoundstmt .)
    DIRECTORY       reduce using rule 3 (element -> compoundstmt .)
    LPAREN          reduce using rule 3 (element -> compoundstmt .)
    INTEGER         reduce using rule 3 (element -> compoundstmt .)
    FLOAT           reduce using rule 3 (element -> compoundstmt .)
    ALL             reduce using rule 3 (element -> compoundstmt .)
    NOT             reduce using rule 3 (element -> compoundstmt .)
    TRUE            reduce using rule 3 (element -> compoundstmt .)
    FALSE           reduce using rule 3 (element -> compoundstmt .)
    COLON           reduce using rule 3 (element -> compoundstmt .)
    $end            reduce using rule 3 (element -> compoundstmt .)


state 35

    (76) exp -> matrix .

    TRANSPOSE       reduce using rule 76 (exp -> matrix .)
    ELOR            reduce using rule 76 (exp -> matrix .)
    ELAND           reduce using rule 76 (exp -> matrix .)
    OROR            reduce using rule 76 (exp -> matrix .)
    ANDAND          reduce using rule 76 (exp -> matrix .)
    EQUALEQUAL      reduce using rule 76 (exp -> matrix .)
    NOTEQUAL        reduce using rule 76 (exp -> matrix .)
    LT              reduce using rule 76 (exp -> matrix .)
    GT              reduce using rule 76 (exp -> matrix .)
    LE              reduce using rule 76 (exp -> matrix .)
    GE              reduce using rule 76 (exp -> matrix .)
    MPOWER          reduce using rule 76 (exp -> matrix .)
    POWER           reduce using rule 76 (exp -> matrix .)
    MTIMES          reduce using rule 76 (exp -> matrix .)
    MDIVIDE         reduce using rule 76 (exp -> matrix .)
    TIMES           reduce using rule 76 (exp -> matrix .)
    DIVIDE          reduce using rule 76 (exp -> matrix .)
    BACKSLASH       reduce using rule 76 (exp -> matrix .)
    PLUS            reduce using rule 76 (exp -> matrix .)
    MINUS           reduce using rule 76 (exp -> matrix .)
    COLON           reduce using rule 76 (exp -> matrix .)
    SEMICOLON       reduce using rule 76 (exp -> matrix .)
    COMMENT         reduce using rule 76 (exp -> matrix .)
    IF              reduce using rule 76 (exp -> matrix .)
    SWITCH          reduce using rule 76 (exp -> matrix .)
    TRY             reduce using rule 76 (exp -> matrix .)
    FOR             reduce using rule 76 (exp -> matrix .)
    WHILE           reduce using rule 76 (exp -> matrix .)
    IDENTIFIER      reduce using rule 76 (exp -> matrix .)
    RETURN          reduce using rule 76 (exp -> matrix .)
    LBRACKET        reduce using rule 76 (exp -> matrix .)
    CLC             reduce using rule 76 (exp -> matrix .)
    CLOSE           reduce using rule 76 (exp -> matrix .)
    CLEAR           reduce using rule 76 (exp -> matrix .)
    BREAK           reduce using rule 76 (exp -> matrix .)
    CONTINUE        reduce using rule 76 (exp -> matrix .)
    STRING          reduce using rule 76 (exp -> matrix .)
    DIRECTORY       reduce using rule 76 (exp -> matrix .)
    LPAREN          reduce using rule 76 (exp -> matrix .)
    INTEGER         reduce using rule 76 (exp -> matrix .)
    FLOAT           reduce using rule 76 (exp -> matrix .)
    ALL             reduce using rule 76 (exp -> matrix .)
    NOT             reduce using rule 76 (exp -> matrix .)
    TRUE            reduce using rule 76 (exp -> matrix .)
    FALSE           reduce using rule 76 (exp -> matrix .)
    FUNCTION        reduce using rule 76 (exp -> matrix .)
    $end            reduce using rule 76 (exp -> matrix .)
    CASE            reduce using rule 76 (exp -> matrix .)
    OTHERWISE       reduce using rule 76 (exp -> matrix .)
    CATCH           reduce using rule 76 (exp -> matrix .)
    END             reduce using rule 76 (exp -> matrix .)
    ELSE            reduce using rule 76 (exp -> matrix .)
    RBRACKET        reduce using rule 76 (exp -> matrix .)
    COMMA           reduce using rule 76 (exp -> matrix .)
    RPAREN          reduce using rule 76 (exp -> matrix .)
    RBRACE          reduce using rule 76 (exp -> matrix .)


state 36

    (38) exp -> IDENTIFIER .
    (43) exp -> IDENTIFIER . LPAREN optargs RPAREN
    (82) exp -> IDENTIFIER . LBRACE args RBRACE

  ! shift/reduce conflict for LPAREN resolved as shift
    TRANSPOSE       reduce using rule 38 (exp -> IDENTIFIER .)
    ELOR            reduce using rule 38 (exp -> IDENTIFIER .)
    ELAND           reduce using rule 38 (exp -> IDENTIFIER .)
    OROR            reduce using rule 38 (exp -> IDENTIFIER .)
    ANDAND          reduce using rule 38 (exp -> IDENTIFIER .)
    EQUALEQUAL      reduce using rule 38 (exp -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 38 (exp -> IDENTIFIER .)
    LT              reduce using rule 38 (exp -> IDENTIFIER .)
    GT              reduce using rule 38 (exp -> IDENTIFIER .)
    LE              reduce using rule 38 (exp -> IDENTIFIER .)
    GE              reduce using rule 38 (exp -> IDENTIFIER .)
    MPOWER          reduce using rule 38 (exp -> IDENTIFIER .)
    POWER           reduce using rule 38 (exp -> IDENTIFIER .)
    MTIMES          reduce using rule 38 (exp -> IDENTIFIER .)
    MDIVIDE         reduce using rule 38 (exp -> IDENTIFIER .)
    TIMES           reduce using rule 38 (exp -> IDENTIFIER .)
    DIVIDE          reduce using rule 38 (exp -> IDENTIFIER .)
    BACKSLASH       reduce using rule 38 (exp -> IDENTIFIER .)
    PLUS            reduce using rule 38 (exp -> IDENTIFIER .)
    MINUS           reduce using rule 38 (exp -> IDENTIFIER .)
    COLON           reduce using rule 38 (exp -> IDENTIFIER .)
    SEMICOLON       reduce using rule 38 (exp -> IDENTIFIER .)
    COMMENT         reduce using rule 38 (exp -> IDENTIFIER .)
    IF              reduce using rule 38 (exp -> IDENTIFIER .)
    SWITCH          reduce using rule 38 (exp -> IDENTIFIER .)
    TRY             reduce using rule 38 (exp -> IDENTIFIER .)
    FOR             reduce using rule 38 (exp -> IDENTIFIER .)
    WHILE           reduce using rule 38 (exp -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 38 (exp -> IDENTIFIER .)
    RETURN          reduce using rule 38 (exp -> IDENTIFIER .)
    LBRACKET        reduce using rule 38 (exp -> IDENTIFIER .)
    CLC             reduce using rule 38 (exp -> IDENTIFIER .)
    CLOSE           reduce using rule 38 (exp -> IDENTIFIER .)
    CLEAR           reduce using rule 38 (exp -> IDENTIFIER .)
    BREAK           reduce using rule 38 (exp -> IDENTIFIER .)
    CONTINUE        reduce using rule 38 (exp -> IDENTIFIER .)
    STRING          reduce using rule 38 (exp -> IDENTIFIER .)
    DIRECTORY       reduce using rule 38 (exp -> IDENTIFIER .)
    INTEGER         reduce using rule 38 (exp -> IDENTIFIER .)
    FLOAT           reduce using rule 38 (exp -> IDENTIFIER .)
    ALL             reduce using rule 38 (exp -> IDENTIFIER .)
    NOT             reduce using rule 38 (exp -> IDENTIFIER .)
    TRUE            reduce using rule 38 (exp -> IDENTIFIER .)
    FALSE           reduce using rule 38 (exp -> IDENTIFIER .)
    FUNCTION        reduce using rule 38 (exp -> IDENTIFIER .)
    $end            reduce using rule 38 (exp -> IDENTIFIER .)
    CASE            reduce using rule 38 (exp -> IDENTIFIER .)
    OTHERWISE       reduce using rule 38 (exp -> IDENTIFIER .)
    CATCH           reduce using rule 38 (exp -> IDENTIFIER .)
    END             reduce using rule 38 (exp -> IDENTIFIER .)
    ELSE            reduce using rule 38 (exp -> IDENTIFIER .)
    RBRACKET        reduce using rule 38 (exp -> IDENTIFIER .)
    COMMA           reduce using rule 38 (exp -> IDENTIFIER .)
    RPAREN          reduce using rule 38 (exp -> IDENTIFIER .)
    RBRACE          reduce using rule 38 (exp -> IDENTIFIER .)
    LPAREN          shift and go to state 49
    LBRACE          shift and go to state 46

  ! LPAREN          [ reduce using rule 38 (exp -> IDENTIFIER .) ]


state 37

    (17) stmt -> RETURN exp .
    (41) exp -> exp . TRANSPOSE
    (55) exp -> exp . ELOR exp
    (56) exp -> exp . ELAND exp
    (57) exp -> exp . OROR exp
    (58) exp -> exp . ANDAND exp
    (59) exp -> exp . EQUALEQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . LE exp
    (64) exp -> exp . GE exp
    (65) exp -> exp . MPOWER exp
    (66) exp -> exp . POWER exp
    (67) exp -> exp . MTIMES exp
    (68) exp -> exp . MDIVIDE exp
    (69) exp -> exp . TIMES exp
    (70) exp -> exp . DIVIDE exp
    (71) exp -> exp . BACKSLASH exp
    (72) exp -> exp . PLUS exp
    (73) exp -> exp . MINUS exp
    (74) exp -> exp . COLON exp COLON exp
    (75) exp -> exp . COLON exp

  ! shift/reduce conflict for COLON resolved as shift
    SEMICOLON       reduce using rule 17 (stmt -> RETURN exp .)
    COMMENT         reduce using rule 17 (stmt -> RETURN exp .)
    IF              reduce using rule 17 (stmt -> RETURN exp .)
    SWITCH          reduce using rule 17 (stmt -> RETURN exp .)
    TRY             reduce using rule 17 (stmt -> RETURN exp .)
    FOR             reduce using rule 17 (stmt -> RETURN exp .)
    WHILE           reduce using rule 17 (stmt -> RETURN exp .)
    IDENTIFIER      reduce using rule 17 (stmt -> RETURN exp .)
    RETURN          reduce using rule 17 (stmt -> RETURN exp .)
    LBRACKET        reduce using rule 17 (stmt -> RETURN exp .)
    CLC             reduce using rule 17 (stmt -> RETURN exp .)
    CLOSE           reduce using rule 17 (stmt -> RETURN exp .)
    CLEAR           reduce using rule 17 (stmt -> RETURN exp .)
    BREAK           reduce using rule 17 (stmt -> RETURN exp .)
    CONTINUE        reduce using rule 17 (stmt -> RETURN exp .)
    STRING          reduce using rule 17 (stmt -> RETURN exp .)
    DIRECTORY       reduce using rule 17 (stmt -> RETURN exp .)
    LPAREN          reduce using rule 17 (stmt -> RETURN exp .)
    INTEGER         reduce using rule 17 (stmt -> RETURN exp .)
    FLOAT           reduce using rule 17 (stmt -> RETURN exp .)
    ALL             reduce using rule 17 (stmt -> RETURN exp .)
    NOT             reduce using rule 17 (stmt -> RETURN exp .)
    TRUE            reduce using rule 17 (stmt -> RETURN exp .)
    FALSE           reduce using rule 17 (stmt -> RETURN exp .)
    END             reduce using rule 17 (stmt -> RETURN exp .)
    CASE            reduce using rule 17 (stmt -> RETURN exp .)
    OTHERWISE       reduce using rule 17 (stmt -> RETURN exp .)
    CATCH           reduce using rule 17 (stmt -> RETURN exp .)
    FUNCTION        reduce using rule 17 (stmt -> RETURN exp .)
    $end            reduce using rule 17 (stmt -> RETURN exp .)
    ELSE            reduce using rule 17 (stmt -> RETURN exp .)
    TRANSPOSE       shift and go to state 68
    ELOR            shift and go to state 63
    ELAND           shift and go to state 62
    OROR            shift and go to state 60
    ANDAND          shift and go to state 79
    EQUALEQUAL      shift and go to state 73
    NOTEQUAL        shift and go to state 61
    LT              shift and go to state 70
    GT              shift and go to state 74
    LE              shift and go to state 66
    GE              shift and go to state 78
    MPOWER          shift and go to state 80
    POWER           shift and go to state 67
    MTIMES          shift and go to state 64
    MDIVIDE         shift and go to state 76
    TIMES           shift and go to state 77
    DIVIDE          shift and go to state 75
    BACKSLASH       shift and go to state 69
    PLUS            shift and go to state 72
    MINUS           shift and go to state 65
    COLON           shift and go to state 71

  ! COLON           [ reduce using rule 17 (stmt -> RETURN exp .) ]


state 38

    (77) matrix -> LBRACKET explist . RBRACKET
    (79) explist -> explist . exp
    (80) explist -> explist . COMMA exp
    (81) explist -> explist . SEMICOLON explist
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    RBRACKET        shift and go to state 84
    COMMA           shift and go to state 82
    SEMICOLON       shift and go to state 81
    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    number                         shift and go to state 22
    exp                            shift and go to state 83

state 39

    (78) explist -> exp .
    (41) exp -> exp . TRANSPOSE
    (55) exp -> exp . ELOR exp
    (56) exp -> exp . ELAND exp
    (57) exp -> exp . OROR exp
    (58) exp -> exp . ANDAND exp
    (59) exp -> exp . EQUALEQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . LE exp
    (64) exp -> exp . GE exp
    (65) exp -> exp . MPOWER exp
    (66) exp -> exp . POWER exp
    (67) exp -> exp . MTIMES exp
    (68) exp -> exp . MDIVIDE exp
    (69) exp -> exp . TIMES exp
    (70) exp -> exp . DIVIDE exp
    (71) exp -> exp . BACKSLASH exp
    (72) exp -> exp . PLUS exp
    (73) exp -> exp . MINUS exp
    (74) exp -> exp . COLON exp COLON exp
    (75) exp -> exp . COLON exp

  ! shift/reduce conflict for COLON resolved as shift
    RBRACKET        reduce using rule 78 (explist -> exp .)
    COMMA           reduce using rule 78 (explist -> exp .)
    SEMICOLON       reduce using rule 78 (explist -> exp .)
    IDENTIFIER      reduce using rule 78 (explist -> exp .)
    STRING          reduce using rule 78 (explist -> exp .)
    DIRECTORY       reduce using rule 78 (explist -> exp .)
    LPAREN          reduce using rule 78 (explist -> exp .)
    INTEGER         reduce using rule 78 (explist -> exp .)
    FLOAT           reduce using rule 78 (explist -> exp .)
    ALL             reduce using rule 78 (explist -> exp .)
    NOT             reduce using rule 78 (explist -> exp .)
    TRUE            reduce using rule 78 (explist -> exp .)
    FALSE           reduce using rule 78 (explist -> exp .)
    LBRACKET        reduce using rule 78 (explist -> exp .)
    TRANSPOSE       shift and go to state 68
    ELOR            shift and go to state 63
    ELAND           shift and go to state 62
    OROR            shift and go to state 60
    ANDAND          shift and go to state 79
    EQUALEQUAL      shift and go to state 73
    NOTEQUAL        shift and go to state 61
    LT              shift and go to state 70
    GT              shift and go to state 74
    LE              shift and go to state 66
    GE              shift and go to state 78
    MPOWER          shift and go to state 80
    POWER           shift and go to state 67
    MTIMES          shift and go to state 64
    MDIVIDE         shift and go to state 76
    TIMES           shift and go to state 77
    DIVIDE          shift and go to state 75
    BACKSLASH       shift and go to state 69
    PLUS            shift and go to state 72
    MINUS           shift and go to state 65
    COLON           shift and go to state 71

  ! COLON           [ reduce using rule 78 (explist -> exp .) ]


state 40

    (14) stmt -> WHILE exp . compoundstmt END
    (41) exp -> exp . TRANSPOSE
    (55) exp -> exp . ELOR exp
    (56) exp -> exp . ELAND exp
    (57) exp -> exp . OROR exp
    (58) exp -> exp . ANDAND exp
    (59) exp -> exp . EQUALEQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . LE exp
    (64) exp -> exp . GE exp
    (65) exp -> exp . MPOWER exp
    (66) exp -> exp . POWER exp
    (67) exp -> exp . MTIMES exp
    (68) exp -> exp . MDIVIDE exp
    (69) exp -> exp . TIMES exp
    (70) exp -> exp . DIVIDE exp
    (71) exp -> exp . BACKSLASH exp
    (72) exp -> exp . PLUS exp
    (73) exp -> exp . MINUS exp
    (74) exp -> exp . COLON exp COLON exp
    (75) exp -> exp . COLON exp
    (5) compoundstmt -> . stmt SEMICOLON compoundstmt
    (6) compoundstmt -> . stmt compoundstmt
    (7) compoundstmt -> . COMMENT compoundstmt
    (8) compoundstmt -> .
    (9) stmt -> . IF exp compoundstmt END
    (10) stmt -> . IF exp compoundstmt ELSE compoundstmt END
    (11) stmt -> . SWITCH exp multiclause END
    (12) stmt -> . TRY compoundstmt multiclause END
    (13) stmt -> . FOR range compoundstmt END
    (14) stmt -> . WHILE exp compoundstmt END
    (15) stmt -> . IDENTIFIER EQUAL exp
    (16) stmt -> . matrix EQUAL exp
    (17) stmt -> . RETURN exp
    (18) stmt -> . keycall
    (19) stmt -> . IDENTIFIER PERIOD IDENTIFIER
    (20) stmt -> . exp
    (77) matrix -> . LBRACKET explist RBRACKET
    (29) keycall -> . CLC
    (30) keycall -> . CLOSE optvars
    (31) keycall -> . CLEAR optvars
    (32) keycall -> . BREAK
    (33) keycall -> . CONTINUE
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON

    TRANSPOSE       shift and go to state 68
    ELOR            shift and go to state 63
    ELAND           shift and go to state 62
    OROR            shift and go to state 60
    ANDAND          shift and go to state 79
    EQUALEQUAL      shift and go to state 73
    NOTEQUAL        shift and go to state 61
    LT              shift and go to state 70
    GT              shift and go to state 74
    LE              shift and go to state 66
    GE              shift and go to state 78
    MPOWER          shift and go to state 80
    POWER           shift and go to state 67
    MTIMES          shift and go to state 64
    MDIVIDE         shift and go to state 76
    TIMES           shift and go to state 77
    DIVIDE          shift and go to state 75
    BACKSLASH       shift and go to state 69
    PLUS            shift and go to state 72
    MINUS           shift and go to state 65
    COLON           shift and go to state 85
    COMMENT         shift and go to state 5
    END             reduce using rule 8 (compoundstmt -> .)
    IF              shift and go to state 24
    SWITCH          shift and go to state 9
    TRY             shift and go to state 18
    FOR             shift and go to state 15
    WHILE           shift and go to state 3
    IDENTIFIER      shift and go to state 12
    RETURN          shift and go to state 1
    LBRACKET        shift and go to state 2
    CLC             shift and go to state 23
    CLOSE           shift and go to state 10
    CLEAR           shift and go to state 16
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26

    matrix                         shift and go to state 6
    keycall                        shift and go to state 8
    stmt                           shift and go to state 17
    number                         shift and go to state 22
    keyword                        shift and go to state 27
    exp                            shift and go to state 32
    compoundstmt                   shift and go to state 86

state 41

    (7) compoundstmt -> COMMENT compoundstmt .

    FUNCTION        reduce using rule 7 (compoundstmt -> COMMENT compoundstmt .)
    COMMENT         reduce using rule 7 (compoundstmt -> COMMENT compoundstmt .)
    IF              reduce using rule 7 (compoundstmt -> COMMENT compoundstmt .)
    SWITCH          reduce using rule 7 (compoundstmt -> COMMENT compoundstmt .)
    TRY             reduce using rule 7 (compoundstmt -> COMMENT compoundstmt .)
    FOR             reduce using rule 7 (compoundstmt -> COMMENT compoundstmt .)
    WHILE           reduce using rule 7 (compoundstmt -> COMMENT compoundstmt .)
    IDENTIFIER      reduce using rule 7 (compoundstmt -> COMMENT compoundstmt .)
    RETURN          reduce using rule 7 (compoundstmt -> COMMENT compoundstmt .)
    LBRACKET        reduce using rule 7 (compoundstmt -> COMMENT compoundstmt .)
    CLC             reduce using rule 7 (compoundstmt -> COMMENT compoundstmt .)
    CLOSE           reduce using rule 7 (compoundstmt -> COMMENT compoundstmt .)
    CLEAR           reduce using rule 7 (compoundstmt -> COMMENT compoundstmt .)
    BREAK           reduce using rule 7 (compoundstmt -> COMMENT compoundstmt .)
    CONTINUE        reduce using rule 7 (compoundstmt -> COMMENT compoundstmt .)
    STRING          reduce using rule 7 (compoundstmt -> COMMENT compoundstmt .)
    DIRECTORY       reduce using rule 7 (compoundstmt -> COMMENT compoundstmt .)
    LPAREN          reduce using rule 7 (compoundstmt -> COMMENT compoundstmt .)
    INTEGER         reduce using rule 7 (compoundstmt -> COMMENT compoundstmt .)
    FLOAT           reduce using rule 7 (compoundstmt -> COMMENT compoundstmt .)
    ALL             reduce using rule 7 (compoundstmt -> COMMENT compoundstmt .)
    NOT             reduce using rule 7 (compoundstmt -> COMMENT compoundstmt .)
    TRUE            reduce using rule 7 (compoundstmt -> COMMENT compoundstmt .)
    FALSE           reduce using rule 7 (compoundstmt -> COMMENT compoundstmt .)
    COLON           reduce using rule 7 (compoundstmt -> COMMENT compoundstmt .)
    $end            reduce using rule 7 (compoundstmt -> COMMENT compoundstmt .)
    CASE            reduce using rule 7 (compoundstmt -> COMMENT compoundstmt .)
    OTHERWISE       reduce using rule 7 (compoundstmt -> COMMENT compoundstmt .)
    CATCH           reduce using rule 7 (compoundstmt -> COMMENT compoundstmt .)
    END             reduce using rule 7 (compoundstmt -> COMMENT compoundstmt .)
    ELSE            reduce using rule 7 (compoundstmt -> COMMENT compoundstmt .)


state 42

    (16) stmt -> matrix EQUAL . exp
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    number                         shift and go to state 22
    exp                            shift and go to state 87

state 43

    (11) stmt -> SWITCH exp . multiclause END
    (41) exp -> exp . TRANSPOSE
    (55) exp -> exp . ELOR exp
    (56) exp -> exp . ELAND exp
    (57) exp -> exp . OROR exp
    (58) exp -> exp . ANDAND exp
    (59) exp -> exp . EQUALEQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . LE exp
    (64) exp -> exp . GE exp
    (65) exp -> exp . MPOWER exp
    (66) exp -> exp . POWER exp
    (67) exp -> exp . MTIMES exp
    (68) exp -> exp . MDIVIDE exp
    (69) exp -> exp . TIMES exp
    (70) exp -> exp . DIVIDE exp
    (71) exp -> exp . BACKSLASH exp
    (72) exp -> exp . PLUS exp
    (73) exp -> exp . MINUS exp
    (74) exp -> exp . COLON exp COLON exp
    (75) exp -> exp . COLON exp
    (21) multiclause -> . clause multiclause
    (22) multiclause -> .
    (23) clause -> . CASE exp compoundstmt
    (24) clause -> . OTHERWISE compoundstmt
    (25) clause -> . CATCH IDENTIFIER compoundstmt
    (26) clause -> . CATCH compoundstmt

    TRANSPOSE       shift and go to state 68
    ELOR            shift and go to state 63
    ELAND           shift and go to state 62
    OROR            shift and go to state 60
    ANDAND          shift and go to state 79
    EQUALEQUAL      shift and go to state 73
    NOTEQUAL        shift and go to state 61
    LT              shift and go to state 70
    GT              shift and go to state 74
    LE              shift and go to state 66
    GE              shift and go to state 78
    MPOWER          shift and go to state 80
    POWER           shift and go to state 67
    MTIMES          shift and go to state 64
    MDIVIDE         shift and go to state 76
    TIMES           shift and go to state 77
    DIVIDE          shift and go to state 75
    BACKSLASH       shift and go to state 69
    PLUS            shift and go to state 72
    MINUS           shift and go to state 65
    COLON           shift and go to state 71
    END             reduce using rule 22 (multiclause -> .)
    CASE            shift and go to state 90
    OTHERWISE       shift and go to state 89
    CATCH           shift and go to state 92

    clause                         shift and go to state 88
    multiclause                    shift and go to state 91

state 44

    (30) keycall -> CLOSE optvars .

    SEMICOLON       reduce using rule 30 (keycall -> CLOSE optvars .)
    COMMENT         reduce using rule 30 (keycall -> CLOSE optvars .)
    IF              reduce using rule 30 (keycall -> CLOSE optvars .)
    SWITCH          reduce using rule 30 (keycall -> CLOSE optvars .)
    TRY             reduce using rule 30 (keycall -> CLOSE optvars .)
    FOR             reduce using rule 30 (keycall -> CLOSE optvars .)
    WHILE           reduce using rule 30 (keycall -> CLOSE optvars .)
    IDENTIFIER      reduce using rule 30 (keycall -> CLOSE optvars .)
    RETURN          reduce using rule 30 (keycall -> CLOSE optvars .)
    LBRACKET        reduce using rule 30 (keycall -> CLOSE optvars .)
    CLC             reduce using rule 30 (keycall -> CLOSE optvars .)
    CLOSE           reduce using rule 30 (keycall -> CLOSE optvars .)
    CLEAR           reduce using rule 30 (keycall -> CLOSE optvars .)
    BREAK           reduce using rule 30 (keycall -> CLOSE optvars .)
    CONTINUE        reduce using rule 30 (keycall -> CLOSE optvars .)
    STRING          reduce using rule 30 (keycall -> CLOSE optvars .)
    DIRECTORY       reduce using rule 30 (keycall -> CLOSE optvars .)
    LPAREN          reduce using rule 30 (keycall -> CLOSE optvars .)
    INTEGER         reduce using rule 30 (keycall -> CLOSE optvars .)
    FLOAT           reduce using rule 30 (keycall -> CLOSE optvars .)
    ALL             reduce using rule 30 (keycall -> CLOSE optvars .)
    NOT             reduce using rule 30 (keycall -> CLOSE optvars .)
    TRUE            reduce using rule 30 (keycall -> CLOSE optvars .)
    FALSE           reduce using rule 30 (keycall -> CLOSE optvars .)
    COLON           reduce using rule 30 (keycall -> CLOSE optvars .)
    CASE            reduce using rule 30 (keycall -> CLOSE optvars .)
    OTHERWISE       reduce using rule 30 (keycall -> CLOSE optvars .)
    CATCH           reduce using rule 30 (keycall -> CLOSE optvars .)
    END             reduce using rule 30 (keycall -> CLOSE optvars .)
    FUNCTION        reduce using rule 30 (keycall -> CLOSE optvars .)
    $end            reduce using rule 30 (keycall -> CLOSE optvars .)
    ELSE            reduce using rule 30 (keycall -> CLOSE optvars .)


state 45

    (34) optvars -> exp . optvars
    (35) optvars -> exp .
    (41) exp -> exp . TRANSPOSE
    (55) exp -> exp . ELOR exp
    (56) exp -> exp . ELAND exp
    (57) exp -> exp . OROR exp
    (58) exp -> exp . ANDAND exp
    (59) exp -> exp . EQUALEQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . LE exp
    (64) exp -> exp . GE exp
    (65) exp -> exp . MPOWER exp
    (66) exp -> exp . POWER exp
    (67) exp -> exp . MTIMES exp
    (68) exp -> exp . MDIVIDE exp
    (69) exp -> exp . TIMES exp
    (70) exp -> exp . DIVIDE exp
    (71) exp -> exp . BACKSLASH exp
    (72) exp -> exp . PLUS exp
    (73) exp -> exp . MINUS exp
    (74) exp -> exp . COLON exp COLON exp
    (75) exp -> exp . COLON exp
    (34) optvars -> . exp optvars
    (35) optvars -> . exp
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for DIRECTORY resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for ALL resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    SEMICOLON       reduce using rule 35 (optvars -> exp .)
    COMMENT         reduce using rule 35 (optvars -> exp .)
    IF              reduce using rule 35 (optvars -> exp .)
    SWITCH          reduce using rule 35 (optvars -> exp .)
    TRY             reduce using rule 35 (optvars -> exp .)
    FOR             reduce using rule 35 (optvars -> exp .)
    WHILE           reduce using rule 35 (optvars -> exp .)
    RETURN          reduce using rule 35 (optvars -> exp .)
    CLC             reduce using rule 35 (optvars -> exp .)
    CLOSE           reduce using rule 35 (optvars -> exp .)
    CLEAR           reduce using rule 35 (optvars -> exp .)
    BREAK           reduce using rule 35 (optvars -> exp .)
    CONTINUE        reduce using rule 35 (optvars -> exp .)
    FUNCTION        reduce using rule 35 (optvars -> exp .)
    $end            reduce using rule 35 (optvars -> exp .)
    CASE            reduce using rule 35 (optvars -> exp .)
    OTHERWISE       reduce using rule 35 (optvars -> exp .)
    CATCH           reduce using rule 35 (optvars -> exp .)
    END             reduce using rule 35 (optvars -> exp .)
    ELSE            reduce using rule 35 (optvars -> exp .)
    TRANSPOSE       shift and go to state 68
    ELOR            shift and go to state 63
    ELAND           shift and go to state 62
    OROR            shift and go to state 60
    ANDAND          shift and go to state 79
    EQUALEQUAL      shift and go to state 73
    NOTEQUAL        shift and go to state 61
    LT              shift and go to state 70
    GT              shift and go to state 74
    LE              shift and go to state 66
    GE              shift and go to state 78
    MPOWER          shift and go to state 80
    POWER           shift and go to state 67
    MTIMES          shift and go to state 64
    MDIVIDE         shift and go to state 76
    TIMES           shift and go to state 77
    DIVIDE          shift and go to state 75
    BACKSLASH       shift and go to state 69
    PLUS            shift and go to state 72
    MINUS           shift and go to state 65
    COLON           shift and go to state 85
    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    LBRACKET        shift and go to state 2

  ! IDENTIFIER      [ reduce using rule 35 (optvars -> exp .) ]
  ! LBRACKET        [ reduce using rule 35 (optvars -> exp .) ]
  ! STRING          [ reduce using rule 35 (optvars -> exp .) ]
  ! DIRECTORY       [ reduce using rule 35 (optvars -> exp .) ]
  ! LPAREN          [ reduce using rule 35 (optvars -> exp .) ]
  ! INTEGER         [ reduce using rule 35 (optvars -> exp .) ]
  ! FLOAT           [ reduce using rule 35 (optvars -> exp .) ]
  ! ALL             [ reduce using rule 35 (optvars -> exp .) ]
  ! NOT             [ reduce using rule 35 (optvars -> exp .) ]
  ! TRUE            [ reduce using rule 35 (optvars -> exp .) ]
  ! FALSE           [ reduce using rule 35 (optvars -> exp .) ]
  ! COLON           [ reduce using rule 35 (optvars -> exp .) ]

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    optvars                        shift and go to state 93
    number                         shift and go to state 22
    exp                            shift and go to state 45

state 46

    (82) exp -> IDENTIFIER LBRACE . args RBRACE
    (53) args -> . exp COMMA args
    (54) args -> . exp
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    args                           shift and go to state 94
    number                         shift and go to state 22
    exp                            shift and go to state 95

state 47

    (15) stmt -> IDENTIFIER EQUAL . exp
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    number                         shift and go to state 22
    exp                            shift and go to state 96

state 48

    (19) stmt -> IDENTIFIER PERIOD . IDENTIFIER

    IDENTIFIER      shift and go to state 97


state 49

    (43) exp -> IDENTIFIER LPAREN . optargs RPAREN
    (51) optargs -> . args
    (52) optargs -> .
    (53) args -> . exp COMMA args
    (54) args -> . exp
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    RPAREN          reduce using rule 52 (optargs -> .)
    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    args                           shift and go to state 99
    number                         shift and go to state 22
    exp                            shift and go to state 95
    optargs                        shift and go to state 98

state 50

    (4) element -> FUNCTION IDENTIFIER . EQUAL IDENTIFIER LPAREN optargs RPAREN compoundstmt END

    EQUAL           shift and go to state 100


state 51

    (13) stmt -> FOR range . compoundstmt END
    (5) compoundstmt -> . stmt SEMICOLON compoundstmt
    (6) compoundstmt -> . stmt compoundstmt
    (7) compoundstmt -> . COMMENT compoundstmt
    (8) compoundstmt -> .
    (9) stmt -> . IF exp compoundstmt END
    (10) stmt -> . IF exp compoundstmt ELSE compoundstmt END
    (11) stmt -> . SWITCH exp multiclause END
    (12) stmt -> . TRY compoundstmt multiclause END
    (13) stmt -> . FOR range compoundstmt END
    (14) stmt -> . WHILE exp compoundstmt END
    (15) stmt -> . IDENTIFIER EQUAL exp
    (16) stmt -> . matrix EQUAL exp
    (17) stmt -> . RETURN exp
    (18) stmt -> . keycall
    (19) stmt -> . IDENTIFIER PERIOD IDENTIFIER
    (20) stmt -> . exp
    (77) matrix -> . LBRACKET explist RBRACKET
    (29) keycall -> . CLC
    (30) keycall -> . CLOSE optvars
    (31) keycall -> . CLEAR optvars
    (32) keycall -> . BREAK
    (33) keycall -> . CONTINUE
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON

    COMMENT         shift and go to state 5
    END             reduce using rule 8 (compoundstmt -> .)
    IF              shift and go to state 24
    SWITCH          shift and go to state 9
    TRY             shift and go to state 18
    FOR             shift and go to state 15
    WHILE           shift and go to state 3
    IDENTIFIER      shift and go to state 12
    RETURN          shift and go to state 1
    LBRACKET        shift and go to state 2
    CLC             shift and go to state 23
    CLOSE           shift and go to state 10
    CLEAR           shift and go to state 16
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7

    matrix                         shift and go to state 6
    keycall                        shift and go to state 8
    stmt                           shift and go to state 17
    number                         shift and go to state 22
    keyword                        shift and go to state 27
    exp                            shift and go to state 32
    compoundstmt                   shift and go to state 101

state 52

    (27) range -> IDENTIFIER . EQUAL exp COLON exp
    (28) range -> IDENTIFIER . EQUAL exp COLON exp COLON exp

    EQUAL           shift and go to state 102


state 53

    (31) keycall -> CLEAR optvars .

    SEMICOLON       reduce using rule 31 (keycall -> CLEAR optvars .)
    COMMENT         reduce using rule 31 (keycall -> CLEAR optvars .)
    IF              reduce using rule 31 (keycall -> CLEAR optvars .)
    SWITCH          reduce using rule 31 (keycall -> CLEAR optvars .)
    TRY             reduce using rule 31 (keycall -> CLEAR optvars .)
    FOR             reduce using rule 31 (keycall -> CLEAR optvars .)
    WHILE           reduce using rule 31 (keycall -> CLEAR optvars .)
    IDENTIFIER      reduce using rule 31 (keycall -> CLEAR optvars .)
    RETURN          reduce using rule 31 (keycall -> CLEAR optvars .)
    LBRACKET        reduce using rule 31 (keycall -> CLEAR optvars .)
    CLC             reduce using rule 31 (keycall -> CLEAR optvars .)
    CLOSE           reduce using rule 31 (keycall -> CLEAR optvars .)
    CLEAR           reduce using rule 31 (keycall -> CLEAR optvars .)
    BREAK           reduce using rule 31 (keycall -> CLEAR optvars .)
    CONTINUE        reduce using rule 31 (keycall -> CLEAR optvars .)
    STRING          reduce using rule 31 (keycall -> CLEAR optvars .)
    DIRECTORY       reduce using rule 31 (keycall -> CLEAR optvars .)
    LPAREN          reduce using rule 31 (keycall -> CLEAR optvars .)
    INTEGER         reduce using rule 31 (keycall -> CLEAR optvars .)
    FLOAT           reduce using rule 31 (keycall -> CLEAR optvars .)
    ALL             reduce using rule 31 (keycall -> CLEAR optvars .)
    NOT             reduce using rule 31 (keycall -> CLEAR optvars .)
    TRUE            reduce using rule 31 (keycall -> CLEAR optvars .)
    FALSE           reduce using rule 31 (keycall -> CLEAR optvars .)
    COLON           reduce using rule 31 (keycall -> CLEAR optvars .)
    CASE            reduce using rule 31 (keycall -> CLEAR optvars .)
    OTHERWISE       reduce using rule 31 (keycall -> CLEAR optvars .)
    CATCH           reduce using rule 31 (keycall -> CLEAR optvars .)
    END             reduce using rule 31 (keycall -> CLEAR optvars .)
    FUNCTION        reduce using rule 31 (keycall -> CLEAR optvars .)
    $end            reduce using rule 31 (keycall -> CLEAR optvars .)
    ELSE            reduce using rule 31 (keycall -> CLEAR optvars .)


state 54

    (5) compoundstmt -> stmt SEMICOLON . compoundstmt
    (5) compoundstmt -> . stmt SEMICOLON compoundstmt
    (6) compoundstmt -> . stmt compoundstmt
    (7) compoundstmt -> . COMMENT compoundstmt
    (8) compoundstmt -> .
    (9) stmt -> . IF exp compoundstmt END
    (10) stmt -> . IF exp compoundstmt ELSE compoundstmt END
    (11) stmt -> . SWITCH exp multiclause END
    (12) stmt -> . TRY compoundstmt multiclause END
    (13) stmt -> . FOR range compoundstmt END
    (14) stmt -> . WHILE exp compoundstmt END
    (15) stmt -> . IDENTIFIER EQUAL exp
    (16) stmt -> . matrix EQUAL exp
    (17) stmt -> . RETURN exp
    (18) stmt -> . keycall
    (19) stmt -> . IDENTIFIER PERIOD IDENTIFIER
    (20) stmt -> . exp
    (77) matrix -> . LBRACKET explist RBRACKET
    (29) keycall -> . CLC
    (30) keycall -> . CLOSE optvars
    (31) keycall -> . CLEAR optvars
    (32) keycall -> . BREAK
    (33) keycall -> . CONTINUE
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON

  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for CLC resolved as shift
  ! shift/reduce conflict for CLOSE resolved as shift
  ! shift/reduce conflict for CLEAR resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for DIRECTORY resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for ALL resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    COMMENT         shift and go to state 5
    FUNCTION        reduce using rule 8 (compoundstmt -> .)
    $end            reduce using rule 8 (compoundstmt -> .)
    CASE            reduce using rule 8 (compoundstmt -> .)
    OTHERWISE       reduce using rule 8 (compoundstmt -> .)
    CATCH           reduce using rule 8 (compoundstmt -> .)
    END             reduce using rule 8 (compoundstmt -> .)
    ELSE            reduce using rule 8 (compoundstmt -> .)
    IF              shift and go to state 24
    SWITCH          shift and go to state 9
    TRY             shift and go to state 18
    FOR             shift and go to state 15
    WHILE           shift and go to state 3
    IDENTIFIER      shift and go to state 12
    RETURN          shift and go to state 1
    LBRACKET        shift and go to state 2
    CLC             shift and go to state 23
    CLOSE           shift and go to state 10
    CLEAR           shift and go to state 16
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7

  ! COMMENT         [ reduce using rule 8 (compoundstmt -> .) ]
  ! IF              [ reduce using rule 8 (compoundstmt -> .) ]
  ! SWITCH          [ reduce using rule 8 (compoundstmt -> .) ]
  ! TRY             [ reduce using rule 8 (compoundstmt -> .) ]
  ! FOR             [ reduce using rule 8 (compoundstmt -> .) ]
  ! WHILE           [ reduce using rule 8 (compoundstmt -> .) ]
  ! IDENTIFIER      [ reduce using rule 8 (compoundstmt -> .) ]
  ! RETURN          [ reduce using rule 8 (compoundstmt -> .) ]
  ! LBRACKET        [ reduce using rule 8 (compoundstmt -> .) ]
  ! CLC             [ reduce using rule 8 (compoundstmt -> .) ]
  ! CLOSE           [ reduce using rule 8 (compoundstmt -> .) ]
  ! CLEAR           [ reduce using rule 8 (compoundstmt -> .) ]
  ! BREAK           [ reduce using rule 8 (compoundstmt -> .) ]
  ! CONTINUE        [ reduce using rule 8 (compoundstmt -> .) ]
  ! STRING          [ reduce using rule 8 (compoundstmt -> .) ]
  ! DIRECTORY       [ reduce using rule 8 (compoundstmt -> .) ]
  ! LPAREN          [ reduce using rule 8 (compoundstmt -> .) ]
  ! INTEGER         [ reduce using rule 8 (compoundstmt -> .) ]
  ! FLOAT           [ reduce using rule 8 (compoundstmt -> .) ]
  ! ALL             [ reduce using rule 8 (compoundstmt -> .) ]
  ! NOT             [ reduce using rule 8 (compoundstmt -> .) ]
  ! TRUE            [ reduce using rule 8 (compoundstmt -> .) ]
  ! FALSE           [ reduce using rule 8 (compoundstmt -> .) ]
  ! COLON           [ reduce using rule 8 (compoundstmt -> .) ]

    matrix                         shift and go to state 6
    keycall                        shift and go to state 8
    stmt                           shift and go to state 17
    number                         shift and go to state 22
    keyword                        shift and go to state 27
    exp                            shift and go to state 32
    compoundstmt                   shift and go to state 103

state 55

    (6) compoundstmt -> stmt compoundstmt .

    FUNCTION        reduce using rule 6 (compoundstmt -> stmt compoundstmt .)
    COMMENT         reduce using rule 6 (compoundstmt -> stmt compoundstmt .)
    IF              reduce using rule 6 (compoundstmt -> stmt compoundstmt .)
    SWITCH          reduce using rule 6 (compoundstmt -> stmt compoundstmt .)
    TRY             reduce using rule 6 (compoundstmt -> stmt compoundstmt .)
    FOR             reduce using rule 6 (compoundstmt -> stmt compoundstmt .)
    WHILE           reduce using rule 6 (compoundstmt -> stmt compoundstmt .)
    IDENTIFIER      reduce using rule 6 (compoundstmt -> stmt compoundstmt .)
    RETURN          reduce using rule 6 (compoundstmt -> stmt compoundstmt .)
    LBRACKET        reduce using rule 6 (compoundstmt -> stmt compoundstmt .)
    CLC             reduce using rule 6 (compoundstmt -> stmt compoundstmt .)
    CLOSE           reduce using rule 6 (compoundstmt -> stmt compoundstmt .)
    CLEAR           reduce using rule 6 (compoundstmt -> stmt compoundstmt .)
    BREAK           reduce using rule 6 (compoundstmt -> stmt compoundstmt .)
    CONTINUE        reduce using rule 6 (compoundstmt -> stmt compoundstmt .)
    STRING          reduce using rule 6 (compoundstmt -> stmt compoundstmt .)
    DIRECTORY       reduce using rule 6 (compoundstmt -> stmt compoundstmt .)
    LPAREN          reduce using rule 6 (compoundstmt -> stmt compoundstmt .)
    INTEGER         reduce using rule 6 (compoundstmt -> stmt compoundstmt .)
    FLOAT           reduce using rule 6 (compoundstmt -> stmt compoundstmt .)
    ALL             reduce using rule 6 (compoundstmt -> stmt compoundstmt .)
    NOT             reduce using rule 6 (compoundstmt -> stmt compoundstmt .)
    TRUE            reduce using rule 6 (compoundstmt -> stmt compoundstmt .)
    FALSE           reduce using rule 6 (compoundstmt -> stmt compoundstmt .)
    COLON           reduce using rule 6 (compoundstmt -> stmt compoundstmt .)
    $end            reduce using rule 6 (compoundstmt -> stmt compoundstmt .)
    CASE            reduce using rule 6 (compoundstmt -> stmt compoundstmt .)
    OTHERWISE       reduce using rule 6 (compoundstmt -> stmt compoundstmt .)
    CATCH           reduce using rule 6 (compoundstmt -> stmt compoundstmt .)
    END             reduce using rule 6 (compoundstmt -> stmt compoundstmt .)
    ELSE            reduce using rule 6 (compoundstmt -> stmt compoundstmt .)


state 56

    (12) stmt -> TRY compoundstmt . multiclause END
    (21) multiclause -> . clause multiclause
    (22) multiclause -> .
    (23) clause -> . CASE exp compoundstmt
    (24) clause -> . OTHERWISE compoundstmt
    (25) clause -> . CATCH IDENTIFIER compoundstmt
    (26) clause -> . CATCH compoundstmt

    END             reduce using rule 22 (multiclause -> .)
    CASE            shift and go to state 90
    OTHERWISE       shift and go to state 89
    CATCH           shift and go to state 92

    clause                         shift and go to state 88
    multiclause                    shift and go to state 104

state 57

    (42) exp -> LPAREN exp . RPAREN
    (41) exp -> exp . TRANSPOSE
    (55) exp -> exp . ELOR exp
    (56) exp -> exp . ELAND exp
    (57) exp -> exp . OROR exp
    (58) exp -> exp . ANDAND exp
    (59) exp -> exp . EQUALEQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . LE exp
    (64) exp -> exp . GE exp
    (65) exp -> exp . MPOWER exp
    (66) exp -> exp . POWER exp
    (67) exp -> exp . MTIMES exp
    (68) exp -> exp . MDIVIDE exp
    (69) exp -> exp . TIMES exp
    (70) exp -> exp . DIVIDE exp
    (71) exp -> exp . BACKSLASH exp
    (72) exp -> exp . PLUS exp
    (73) exp -> exp . MINUS exp
    (74) exp -> exp . COLON exp COLON exp
    (75) exp -> exp . COLON exp

    RPAREN          shift and go to state 105
    TRANSPOSE       shift and go to state 68
    ELOR            shift and go to state 63
    ELAND           shift and go to state 62
    OROR            shift and go to state 60
    ANDAND          shift and go to state 79
    EQUALEQUAL      shift and go to state 73
    NOTEQUAL        shift and go to state 61
    LT              shift and go to state 70
    GT              shift and go to state 74
    LE              shift and go to state 66
    GE              shift and go to state 78
    MPOWER          shift and go to state 80
    POWER           shift and go to state 67
    MTIMES          shift and go to state 64
    MDIVIDE         shift and go to state 76
    TIMES           shift and go to state 77
    DIVIDE          shift and go to state 75
    BACKSLASH       shift and go to state 69
    PLUS            shift and go to state 72
    MINUS           shift and go to state 65
    COLON           shift and go to state 71


state 58

    (9) stmt -> IF exp . compoundstmt END
    (10) stmt -> IF exp . compoundstmt ELSE compoundstmt END
    (41) exp -> exp . TRANSPOSE
    (55) exp -> exp . ELOR exp
    (56) exp -> exp . ELAND exp
    (57) exp -> exp . OROR exp
    (58) exp -> exp . ANDAND exp
    (59) exp -> exp . EQUALEQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . LE exp
    (64) exp -> exp . GE exp
    (65) exp -> exp . MPOWER exp
    (66) exp -> exp . POWER exp
    (67) exp -> exp . MTIMES exp
    (68) exp -> exp . MDIVIDE exp
    (69) exp -> exp . TIMES exp
    (70) exp -> exp . DIVIDE exp
    (71) exp -> exp . BACKSLASH exp
    (72) exp -> exp . PLUS exp
    (73) exp -> exp . MINUS exp
    (74) exp -> exp . COLON exp COLON exp
    (75) exp -> exp . COLON exp
    (5) compoundstmt -> . stmt SEMICOLON compoundstmt
    (6) compoundstmt -> . stmt compoundstmt
    (7) compoundstmt -> . COMMENT compoundstmt
    (8) compoundstmt -> .
    (9) stmt -> . IF exp compoundstmt END
    (10) stmt -> . IF exp compoundstmt ELSE compoundstmt END
    (11) stmt -> . SWITCH exp multiclause END
    (12) stmt -> . TRY compoundstmt multiclause END
    (13) stmt -> . FOR range compoundstmt END
    (14) stmt -> . WHILE exp compoundstmt END
    (15) stmt -> . IDENTIFIER EQUAL exp
    (16) stmt -> . matrix EQUAL exp
    (17) stmt -> . RETURN exp
    (18) stmt -> . keycall
    (19) stmt -> . IDENTIFIER PERIOD IDENTIFIER
    (20) stmt -> . exp
    (77) matrix -> . LBRACKET explist RBRACKET
    (29) keycall -> . CLC
    (30) keycall -> . CLOSE optvars
    (31) keycall -> . CLEAR optvars
    (32) keycall -> . BREAK
    (33) keycall -> . CONTINUE
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON

    TRANSPOSE       shift and go to state 68
    ELOR            shift and go to state 63
    ELAND           shift and go to state 62
    OROR            shift and go to state 60
    ANDAND          shift and go to state 79
    EQUALEQUAL      shift and go to state 73
    NOTEQUAL        shift and go to state 61
    LT              shift and go to state 70
    GT              shift and go to state 74
    LE              shift and go to state 66
    GE              shift and go to state 78
    MPOWER          shift and go to state 80
    POWER           shift and go to state 67
    MTIMES          shift and go to state 64
    MDIVIDE         shift and go to state 76
    TIMES           shift and go to state 77
    DIVIDE          shift and go to state 75
    BACKSLASH       shift and go to state 69
    PLUS            shift and go to state 72
    MINUS           shift and go to state 65
    COLON           shift and go to state 85
    COMMENT         shift and go to state 5
    END             reduce using rule 8 (compoundstmt -> .)
    ELSE            reduce using rule 8 (compoundstmt -> .)
    IF              shift and go to state 24
    SWITCH          shift and go to state 9
    TRY             shift and go to state 18
    FOR             shift and go to state 15
    WHILE           shift and go to state 3
    IDENTIFIER      shift and go to state 12
    RETURN          shift and go to state 1
    LBRACKET        shift and go to state 2
    CLC             shift and go to state 23
    CLOSE           shift and go to state 10
    CLEAR           shift and go to state 16
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26

    matrix                         shift and go to state 6
    keycall                        shift and go to state 8
    stmt                           shift and go to state 17
    number                         shift and go to state 22
    keyword                        shift and go to state 27
    exp                            shift and go to state 32
    compoundstmt                   shift and go to state 106

state 59

    (1) mat -> element mat .

    $end            reduce using rule 1 (mat -> element mat .)


state 60

    (57) exp -> exp OROR . exp
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    number                         shift and go to state 22
    exp                            shift and go to state 107

state 61

    (60) exp -> exp NOTEQUAL . exp
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    number                         shift and go to state 22
    exp                            shift and go to state 108

state 62

    (56) exp -> exp ELAND . exp
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    number                         shift and go to state 22
    exp                            shift and go to state 109

state 63

    (55) exp -> exp ELOR . exp
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    number                         shift and go to state 22
    exp                            shift and go to state 110

state 64

    (67) exp -> exp MTIMES . exp
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    number                         shift and go to state 22
    exp                            shift and go to state 111

state 65

    (73) exp -> exp MINUS . exp
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    number                         shift and go to state 22
    exp                            shift and go to state 112

state 66

    (63) exp -> exp LE . exp
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    number                         shift and go to state 22
    exp                            shift and go to state 113

state 67

    (66) exp -> exp POWER . exp
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    number                         shift and go to state 22
    exp                            shift and go to state 114

state 68

    (41) exp -> exp TRANSPOSE .

    TRANSPOSE       reduce using rule 41 (exp -> exp TRANSPOSE .)
    ELOR            reduce using rule 41 (exp -> exp TRANSPOSE .)
    ELAND           reduce using rule 41 (exp -> exp TRANSPOSE .)
    OROR            reduce using rule 41 (exp -> exp TRANSPOSE .)
    ANDAND          reduce using rule 41 (exp -> exp TRANSPOSE .)
    EQUALEQUAL      reduce using rule 41 (exp -> exp TRANSPOSE .)
    NOTEQUAL        reduce using rule 41 (exp -> exp TRANSPOSE .)
    LT              reduce using rule 41 (exp -> exp TRANSPOSE .)
    GT              reduce using rule 41 (exp -> exp TRANSPOSE .)
    LE              reduce using rule 41 (exp -> exp TRANSPOSE .)
    GE              reduce using rule 41 (exp -> exp TRANSPOSE .)
    MPOWER          reduce using rule 41 (exp -> exp TRANSPOSE .)
    POWER           reduce using rule 41 (exp -> exp TRANSPOSE .)
    MTIMES          reduce using rule 41 (exp -> exp TRANSPOSE .)
    MDIVIDE         reduce using rule 41 (exp -> exp TRANSPOSE .)
    TIMES           reduce using rule 41 (exp -> exp TRANSPOSE .)
    DIVIDE          reduce using rule 41 (exp -> exp TRANSPOSE .)
    BACKSLASH       reduce using rule 41 (exp -> exp TRANSPOSE .)
    PLUS            reduce using rule 41 (exp -> exp TRANSPOSE .)
    MINUS           reduce using rule 41 (exp -> exp TRANSPOSE .)
    COLON           reduce using rule 41 (exp -> exp TRANSPOSE .)
    SEMICOLON       reduce using rule 41 (exp -> exp TRANSPOSE .)
    COMMENT         reduce using rule 41 (exp -> exp TRANSPOSE .)
    IF              reduce using rule 41 (exp -> exp TRANSPOSE .)
    SWITCH          reduce using rule 41 (exp -> exp TRANSPOSE .)
    TRY             reduce using rule 41 (exp -> exp TRANSPOSE .)
    FOR             reduce using rule 41 (exp -> exp TRANSPOSE .)
    WHILE           reduce using rule 41 (exp -> exp TRANSPOSE .)
    IDENTIFIER      reduce using rule 41 (exp -> exp TRANSPOSE .)
    RETURN          reduce using rule 41 (exp -> exp TRANSPOSE .)
    LBRACKET        reduce using rule 41 (exp -> exp TRANSPOSE .)
    CLC             reduce using rule 41 (exp -> exp TRANSPOSE .)
    CLOSE           reduce using rule 41 (exp -> exp TRANSPOSE .)
    CLEAR           reduce using rule 41 (exp -> exp TRANSPOSE .)
    BREAK           reduce using rule 41 (exp -> exp TRANSPOSE .)
    CONTINUE        reduce using rule 41 (exp -> exp TRANSPOSE .)
    STRING          reduce using rule 41 (exp -> exp TRANSPOSE .)
    DIRECTORY       reduce using rule 41 (exp -> exp TRANSPOSE .)
    LPAREN          reduce using rule 41 (exp -> exp TRANSPOSE .)
    INTEGER         reduce using rule 41 (exp -> exp TRANSPOSE .)
    FLOAT           reduce using rule 41 (exp -> exp TRANSPOSE .)
    ALL             reduce using rule 41 (exp -> exp TRANSPOSE .)
    NOT             reduce using rule 41 (exp -> exp TRANSPOSE .)
    TRUE            reduce using rule 41 (exp -> exp TRANSPOSE .)
    FALSE           reduce using rule 41 (exp -> exp TRANSPOSE .)
    FUNCTION        reduce using rule 41 (exp -> exp TRANSPOSE .)
    $end            reduce using rule 41 (exp -> exp TRANSPOSE .)
    CASE            reduce using rule 41 (exp -> exp TRANSPOSE .)
    OTHERWISE       reduce using rule 41 (exp -> exp TRANSPOSE .)
    CATCH           reduce using rule 41 (exp -> exp TRANSPOSE .)
    END             reduce using rule 41 (exp -> exp TRANSPOSE .)
    ELSE            reduce using rule 41 (exp -> exp TRANSPOSE .)
    RBRACKET        reduce using rule 41 (exp -> exp TRANSPOSE .)
    COMMA           reduce using rule 41 (exp -> exp TRANSPOSE .)
    RPAREN          reduce using rule 41 (exp -> exp TRANSPOSE .)
    RBRACE          reduce using rule 41 (exp -> exp TRANSPOSE .)


state 69

    (71) exp -> exp BACKSLASH . exp
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    number                         shift and go to state 22
    exp                            shift and go to state 115

state 70

    (61) exp -> exp LT . exp
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    number                         shift and go to state 22
    exp                            shift and go to state 116

state 71

    (74) exp -> exp COLON . exp COLON exp
    (75) exp -> exp COLON . exp
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    number                         shift and go to state 22
    exp                            shift and go to state 117

state 72

    (72) exp -> exp PLUS . exp
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    number                         shift and go to state 22
    exp                            shift and go to state 118

state 73

    (59) exp -> exp EQUALEQUAL . exp
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    number                         shift and go to state 22
    exp                            shift and go to state 119

state 74

    (62) exp -> exp GT . exp
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    number                         shift and go to state 22
    exp                            shift and go to state 120

state 75

    (70) exp -> exp DIVIDE . exp
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    number                         shift and go to state 22
    exp                            shift and go to state 121

state 76

    (68) exp -> exp MDIVIDE . exp
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    number                         shift and go to state 22
    exp                            shift and go to state 122

state 77

    (69) exp -> exp TIMES . exp
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    number                         shift and go to state 22
    exp                            shift and go to state 123

state 78

    (64) exp -> exp GE . exp
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    number                         shift and go to state 22
    exp                            shift and go to state 124

state 79

    (58) exp -> exp ANDAND . exp
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    number                         shift and go to state 22
    exp                            shift and go to state 125

state 80

    (65) exp -> exp MPOWER . exp
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    number                         shift and go to state 22
    exp                            shift and go to state 126

state 81

    (81) explist -> explist SEMICOLON . explist
    (78) explist -> . exp
    (79) explist -> . explist exp
    (80) explist -> . explist COMMA exp
    (81) explist -> . explist SEMICOLON explist
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    number                         shift and go to state 22
    exp                            shift and go to state 39
    explist                        shift and go to state 127

state 82

    (80) explist -> explist COMMA . exp
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    number                         shift and go to state 22
    exp                            shift and go to state 128

state 83

    (79) explist -> explist exp .
    (41) exp -> exp . TRANSPOSE
    (55) exp -> exp . ELOR exp
    (56) exp -> exp . ELAND exp
    (57) exp -> exp . OROR exp
    (58) exp -> exp . ANDAND exp
    (59) exp -> exp . EQUALEQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . LE exp
    (64) exp -> exp . GE exp
    (65) exp -> exp . MPOWER exp
    (66) exp -> exp . POWER exp
    (67) exp -> exp . MTIMES exp
    (68) exp -> exp . MDIVIDE exp
    (69) exp -> exp . TIMES exp
    (70) exp -> exp . DIVIDE exp
    (71) exp -> exp . BACKSLASH exp
    (72) exp -> exp . PLUS exp
    (73) exp -> exp . MINUS exp
    (74) exp -> exp . COLON exp COLON exp
    (75) exp -> exp . COLON exp

  ! shift/reduce conflict for COLON resolved as shift
    RBRACKET        reduce using rule 79 (explist -> explist exp .)
    COMMA           reduce using rule 79 (explist -> explist exp .)
    SEMICOLON       reduce using rule 79 (explist -> explist exp .)
    IDENTIFIER      reduce using rule 79 (explist -> explist exp .)
    STRING          reduce using rule 79 (explist -> explist exp .)
    DIRECTORY       reduce using rule 79 (explist -> explist exp .)
    LPAREN          reduce using rule 79 (explist -> explist exp .)
    INTEGER         reduce using rule 79 (explist -> explist exp .)
    FLOAT           reduce using rule 79 (explist -> explist exp .)
    ALL             reduce using rule 79 (explist -> explist exp .)
    NOT             reduce using rule 79 (explist -> explist exp .)
    TRUE            reduce using rule 79 (explist -> explist exp .)
    FALSE           reduce using rule 79 (explist -> explist exp .)
    LBRACKET        reduce using rule 79 (explist -> explist exp .)
    TRANSPOSE       shift and go to state 68
    ELOR            shift and go to state 63
    ELAND           shift and go to state 62
    OROR            shift and go to state 60
    ANDAND          shift and go to state 79
    EQUALEQUAL      shift and go to state 73
    NOTEQUAL        shift and go to state 61
    LT              shift and go to state 70
    GT              shift and go to state 74
    LE              shift and go to state 66
    GE              shift and go to state 78
    MPOWER          shift and go to state 80
    POWER           shift and go to state 67
    MTIMES          shift and go to state 64
    MDIVIDE         shift and go to state 76
    TIMES           shift and go to state 77
    DIVIDE          shift and go to state 75
    BACKSLASH       shift and go to state 69
    PLUS            shift and go to state 72
    MINUS           shift and go to state 65
    COLON           shift and go to state 71

  ! COLON           [ reduce using rule 79 (explist -> explist exp .) ]


state 84

    (77) matrix -> LBRACKET explist RBRACKET .

    EQUAL           reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    TRANSPOSE       reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    ELOR            reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    ELAND           reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    OROR            reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    ANDAND          reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    EQUALEQUAL      reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    NOTEQUAL        reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    LT              reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    GT              reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    LE              reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    GE              reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    MPOWER          reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    POWER           reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    MTIMES          reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    MDIVIDE         reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    TIMES           reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    DIVIDE          reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    BACKSLASH       reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    PLUS            reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    MINUS           reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    COLON           reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    SEMICOLON       reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    COMMENT         reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    IF              reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    SWITCH          reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    TRY             reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    FOR             reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    WHILE           reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    IDENTIFIER      reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    RETURN          reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    LBRACKET        reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    CLC             reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    CLOSE           reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    CLEAR           reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    BREAK           reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    CONTINUE        reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    STRING          reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    DIRECTORY       reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    LPAREN          reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    INTEGER         reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    FLOAT           reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    ALL             reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    NOT             reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    TRUE            reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    FALSE           reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    FUNCTION        reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    $end            reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    CASE            reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    OTHERWISE       reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    CATCH           reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    END             reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    ELSE            reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    RPAREN          reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    COMMA           reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    RBRACKET        reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)
    RBRACE          reduce using rule 77 (matrix -> LBRACKET explist RBRACKET .)


state 85

    (74) exp -> exp COLON . exp COLON exp
    (75) exp -> exp COLON . exp
    (50) keyword -> COLON .
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    TRANSPOSE       reduce using rule 50 (keyword -> COLON .)
    ELOR            reduce using rule 50 (keyword -> COLON .)
    ELAND           reduce using rule 50 (keyword -> COLON .)
    OROR            reduce using rule 50 (keyword -> COLON .)
    ANDAND          reduce using rule 50 (keyword -> COLON .)
    EQUALEQUAL      reduce using rule 50 (keyword -> COLON .)
    NOTEQUAL        reduce using rule 50 (keyword -> COLON .)
    LT              reduce using rule 50 (keyword -> COLON .)
    GT              reduce using rule 50 (keyword -> COLON .)
    LE              reduce using rule 50 (keyword -> COLON .)
    GE              reduce using rule 50 (keyword -> COLON .)
    MPOWER          reduce using rule 50 (keyword -> COLON .)
    POWER           reduce using rule 50 (keyword -> COLON .)
    MTIMES          reduce using rule 50 (keyword -> COLON .)
    MDIVIDE         reduce using rule 50 (keyword -> COLON .)
    TIMES           reduce using rule 50 (keyword -> COLON .)
    DIVIDE          reduce using rule 50 (keyword -> COLON .)
    BACKSLASH       reduce using rule 50 (keyword -> COLON .)
    PLUS            reduce using rule 50 (keyword -> COLON .)
    MINUS           reduce using rule 50 (keyword -> COLON .)
    COLON           reduce using rule 50 (keyword -> COLON .)
    SEMICOLON       reduce using rule 50 (keyword -> COLON .)
    COMMENT         reduce using rule 50 (keyword -> COLON .)
    IF              reduce using rule 50 (keyword -> COLON .)
    SWITCH          reduce using rule 50 (keyword -> COLON .)
    TRY             reduce using rule 50 (keyword -> COLON .)
    FOR             reduce using rule 50 (keyword -> COLON .)
    WHILE           reduce using rule 50 (keyword -> COLON .)
    IDENTIFIER      reduce using rule 50 (keyword -> COLON .)
    RETURN          reduce using rule 50 (keyword -> COLON .)
    LBRACKET        reduce using rule 50 (keyword -> COLON .)
    CLC             reduce using rule 50 (keyword -> COLON .)
    CLOSE           reduce using rule 50 (keyword -> COLON .)
    CLEAR           reduce using rule 50 (keyword -> COLON .)
    BREAK           reduce using rule 50 (keyword -> COLON .)
    CONTINUE        reduce using rule 50 (keyword -> COLON .)
    STRING          reduce using rule 50 (keyword -> COLON .)
    DIRECTORY       reduce using rule 50 (keyword -> COLON .)
    LPAREN          reduce using rule 50 (keyword -> COLON .)
    INTEGER         reduce using rule 50 (keyword -> COLON .)
    FLOAT           reduce using rule 50 (keyword -> COLON .)
    ALL             reduce using rule 50 (keyword -> COLON .)
    NOT             reduce using rule 50 (keyword -> COLON .)
    TRUE            reduce using rule 50 (keyword -> COLON .)
    FALSE           reduce using rule 50 (keyword -> COLON .)
    CASE            reduce using rule 50 (keyword -> COLON .)
    OTHERWISE       reduce using rule 50 (keyword -> COLON .)
    CATCH           reduce using rule 50 (keyword -> COLON .)
    END             reduce using rule 50 (keyword -> COLON .)
    FUNCTION        reduce using rule 50 (keyword -> COLON .)
    $end            reduce using rule 50 (keyword -> COLON .)
    ELSE            reduce using rule 50 (keyword -> COLON .)

  ! IDENTIFIER      [ shift and go to state 36 ]
  ! STRING          [ shift and go to state 11 ]
  ! DIRECTORY       [ shift and go to state 21 ]
  ! LPAREN          [ shift and go to state 19 ]
  ! INTEGER         [ shift and go to state 20 ]
  ! FLOAT           [ shift and go to state 28 ]
  ! ALL             [ shift and go to state 25 ]
  ! NOT             [ shift and go to state 33 ]
  ! TRUE            [ shift and go to state 4 ]
  ! FALSE           [ shift and go to state 26 ]
  ! COLON           [ shift and go to state 7 ]
  ! LBRACKET        [ shift and go to state 2 ]

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    number                         shift and go to state 22
    exp                            shift and go to state 117

state 86

    (14) stmt -> WHILE exp compoundstmt . END

    END             shift and go to state 129


state 87

    (16) stmt -> matrix EQUAL exp .
    (41) exp -> exp . TRANSPOSE
    (55) exp -> exp . ELOR exp
    (56) exp -> exp . ELAND exp
    (57) exp -> exp . OROR exp
    (58) exp -> exp . ANDAND exp
    (59) exp -> exp . EQUALEQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . LE exp
    (64) exp -> exp . GE exp
    (65) exp -> exp . MPOWER exp
    (66) exp -> exp . POWER exp
    (67) exp -> exp . MTIMES exp
    (68) exp -> exp . MDIVIDE exp
    (69) exp -> exp . TIMES exp
    (70) exp -> exp . DIVIDE exp
    (71) exp -> exp . BACKSLASH exp
    (72) exp -> exp . PLUS exp
    (73) exp -> exp . MINUS exp
    (74) exp -> exp . COLON exp COLON exp
    (75) exp -> exp . COLON exp

  ! shift/reduce conflict for COLON resolved as shift
    SEMICOLON       reduce using rule 16 (stmt -> matrix EQUAL exp .)
    COMMENT         reduce using rule 16 (stmt -> matrix EQUAL exp .)
    IF              reduce using rule 16 (stmt -> matrix EQUAL exp .)
    SWITCH          reduce using rule 16 (stmt -> matrix EQUAL exp .)
    TRY             reduce using rule 16 (stmt -> matrix EQUAL exp .)
    FOR             reduce using rule 16 (stmt -> matrix EQUAL exp .)
    WHILE           reduce using rule 16 (stmt -> matrix EQUAL exp .)
    IDENTIFIER      reduce using rule 16 (stmt -> matrix EQUAL exp .)
    RETURN          reduce using rule 16 (stmt -> matrix EQUAL exp .)
    LBRACKET        reduce using rule 16 (stmt -> matrix EQUAL exp .)
    CLC             reduce using rule 16 (stmt -> matrix EQUAL exp .)
    CLOSE           reduce using rule 16 (stmt -> matrix EQUAL exp .)
    CLEAR           reduce using rule 16 (stmt -> matrix EQUAL exp .)
    BREAK           reduce using rule 16 (stmt -> matrix EQUAL exp .)
    CONTINUE        reduce using rule 16 (stmt -> matrix EQUAL exp .)
    STRING          reduce using rule 16 (stmt -> matrix EQUAL exp .)
    DIRECTORY       reduce using rule 16 (stmt -> matrix EQUAL exp .)
    LPAREN          reduce using rule 16 (stmt -> matrix EQUAL exp .)
    INTEGER         reduce using rule 16 (stmt -> matrix EQUAL exp .)
    FLOAT           reduce using rule 16 (stmt -> matrix EQUAL exp .)
    ALL             reduce using rule 16 (stmt -> matrix EQUAL exp .)
    NOT             reduce using rule 16 (stmt -> matrix EQUAL exp .)
    TRUE            reduce using rule 16 (stmt -> matrix EQUAL exp .)
    FALSE           reduce using rule 16 (stmt -> matrix EQUAL exp .)
    END             reduce using rule 16 (stmt -> matrix EQUAL exp .)
    CASE            reduce using rule 16 (stmt -> matrix EQUAL exp .)
    OTHERWISE       reduce using rule 16 (stmt -> matrix EQUAL exp .)
    CATCH           reduce using rule 16 (stmt -> matrix EQUAL exp .)
    FUNCTION        reduce using rule 16 (stmt -> matrix EQUAL exp .)
    $end            reduce using rule 16 (stmt -> matrix EQUAL exp .)
    ELSE            reduce using rule 16 (stmt -> matrix EQUAL exp .)
    TRANSPOSE       shift and go to state 68
    ELOR            shift and go to state 63
    ELAND           shift and go to state 62
    OROR            shift and go to state 60
    ANDAND          shift and go to state 79
    EQUALEQUAL      shift and go to state 73
    NOTEQUAL        shift and go to state 61
    LT              shift and go to state 70
    GT              shift and go to state 74
    LE              shift and go to state 66
    GE              shift and go to state 78
    MPOWER          shift and go to state 80
    POWER           shift and go to state 67
    MTIMES          shift and go to state 64
    MDIVIDE         shift and go to state 76
    TIMES           shift and go to state 77
    DIVIDE          shift and go to state 75
    BACKSLASH       shift and go to state 69
    PLUS            shift and go to state 72
    MINUS           shift and go to state 65
    COLON           shift and go to state 71

  ! COLON           [ reduce using rule 16 (stmt -> matrix EQUAL exp .) ]


state 88

    (21) multiclause -> clause . multiclause
    (21) multiclause -> . clause multiclause
    (22) multiclause -> .
    (23) clause -> . CASE exp compoundstmt
    (24) clause -> . OTHERWISE compoundstmt
    (25) clause -> . CATCH IDENTIFIER compoundstmt
    (26) clause -> . CATCH compoundstmt

    END             reduce using rule 22 (multiclause -> .)
    CASE            shift and go to state 90
    OTHERWISE       shift and go to state 89
    CATCH           shift and go to state 92

    clause                         shift and go to state 88
    multiclause                    shift and go to state 130

state 89

    (24) clause -> OTHERWISE . compoundstmt
    (5) compoundstmt -> . stmt SEMICOLON compoundstmt
    (6) compoundstmt -> . stmt compoundstmt
    (7) compoundstmt -> . COMMENT compoundstmt
    (8) compoundstmt -> .
    (9) stmt -> . IF exp compoundstmt END
    (10) stmt -> . IF exp compoundstmt ELSE compoundstmt END
    (11) stmt -> . SWITCH exp multiclause END
    (12) stmt -> . TRY compoundstmt multiclause END
    (13) stmt -> . FOR range compoundstmt END
    (14) stmt -> . WHILE exp compoundstmt END
    (15) stmt -> . IDENTIFIER EQUAL exp
    (16) stmt -> . matrix EQUAL exp
    (17) stmt -> . RETURN exp
    (18) stmt -> . keycall
    (19) stmt -> . IDENTIFIER PERIOD IDENTIFIER
    (20) stmt -> . exp
    (77) matrix -> . LBRACKET explist RBRACKET
    (29) keycall -> . CLC
    (30) keycall -> . CLOSE optvars
    (31) keycall -> . CLEAR optvars
    (32) keycall -> . BREAK
    (33) keycall -> . CONTINUE
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON

    COMMENT         shift and go to state 5
    CASE            reduce using rule 8 (compoundstmt -> .)
    OTHERWISE       reduce using rule 8 (compoundstmt -> .)
    CATCH           reduce using rule 8 (compoundstmt -> .)
    END             reduce using rule 8 (compoundstmt -> .)
    IF              shift and go to state 24
    SWITCH          shift and go to state 9
    TRY             shift and go to state 18
    FOR             shift and go to state 15
    WHILE           shift and go to state 3
    IDENTIFIER      shift and go to state 12
    RETURN          shift and go to state 1
    LBRACKET        shift and go to state 2
    CLC             shift and go to state 23
    CLOSE           shift and go to state 10
    CLEAR           shift and go to state 16
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7

    matrix                         shift and go to state 6
    keycall                        shift and go to state 8
    stmt                           shift and go to state 17
    number                         shift and go to state 22
    keyword                        shift and go to state 27
    exp                            shift and go to state 32
    compoundstmt                   shift and go to state 131

state 90

    (23) clause -> CASE . exp compoundstmt
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    number                         shift and go to state 22
    exp                            shift and go to state 132

state 91

    (11) stmt -> SWITCH exp multiclause . END

    END             shift and go to state 133


state 92

    (25) clause -> CATCH . IDENTIFIER compoundstmt
    (26) clause -> CATCH . compoundstmt
    (5) compoundstmt -> . stmt SEMICOLON compoundstmt
    (6) compoundstmt -> . stmt compoundstmt
    (7) compoundstmt -> . COMMENT compoundstmt
    (8) compoundstmt -> .
    (9) stmt -> . IF exp compoundstmt END
    (10) stmt -> . IF exp compoundstmt ELSE compoundstmt END
    (11) stmt -> . SWITCH exp multiclause END
    (12) stmt -> . TRY compoundstmt multiclause END
    (13) stmt -> . FOR range compoundstmt END
    (14) stmt -> . WHILE exp compoundstmt END
    (15) stmt -> . IDENTIFIER EQUAL exp
    (16) stmt -> . matrix EQUAL exp
    (17) stmt -> . RETURN exp
    (18) stmt -> . keycall
    (19) stmt -> . IDENTIFIER PERIOD IDENTIFIER
    (20) stmt -> . exp
    (77) matrix -> . LBRACKET explist RBRACKET
    (29) keycall -> . CLC
    (30) keycall -> . CLOSE optvars
    (31) keycall -> . CLEAR optvars
    (32) keycall -> . BREAK
    (33) keycall -> . CONTINUE
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON

    IDENTIFIER      shift and go to state 134
    COMMENT         shift and go to state 5
    CASE            reduce using rule 8 (compoundstmt -> .)
    OTHERWISE       reduce using rule 8 (compoundstmt -> .)
    CATCH           reduce using rule 8 (compoundstmt -> .)
    END             reduce using rule 8 (compoundstmt -> .)
    IF              shift and go to state 24
    SWITCH          shift and go to state 9
    TRY             shift and go to state 18
    FOR             shift and go to state 15
    WHILE           shift and go to state 3
    RETURN          shift and go to state 1
    LBRACKET        shift and go to state 2
    CLC             shift and go to state 23
    CLOSE           shift and go to state 10
    CLEAR           shift and go to state 16
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7

    matrix                         shift and go to state 6
    keycall                        shift and go to state 8
    stmt                           shift and go to state 17
    number                         shift and go to state 22
    keyword                        shift and go to state 27
    exp                            shift and go to state 32
    compoundstmt                   shift and go to state 135

state 93

    (34) optvars -> exp optvars .

    SEMICOLON       reduce using rule 34 (optvars -> exp optvars .)
    COMMENT         reduce using rule 34 (optvars -> exp optvars .)
    IF              reduce using rule 34 (optvars -> exp optvars .)
    SWITCH          reduce using rule 34 (optvars -> exp optvars .)
    TRY             reduce using rule 34 (optvars -> exp optvars .)
    FOR             reduce using rule 34 (optvars -> exp optvars .)
    WHILE           reduce using rule 34 (optvars -> exp optvars .)
    IDENTIFIER      reduce using rule 34 (optvars -> exp optvars .)
    RETURN          reduce using rule 34 (optvars -> exp optvars .)
    LBRACKET        reduce using rule 34 (optvars -> exp optvars .)
    CLC             reduce using rule 34 (optvars -> exp optvars .)
    CLOSE           reduce using rule 34 (optvars -> exp optvars .)
    CLEAR           reduce using rule 34 (optvars -> exp optvars .)
    BREAK           reduce using rule 34 (optvars -> exp optvars .)
    CONTINUE        reduce using rule 34 (optvars -> exp optvars .)
    STRING          reduce using rule 34 (optvars -> exp optvars .)
    DIRECTORY       reduce using rule 34 (optvars -> exp optvars .)
    LPAREN          reduce using rule 34 (optvars -> exp optvars .)
    INTEGER         reduce using rule 34 (optvars -> exp optvars .)
    FLOAT           reduce using rule 34 (optvars -> exp optvars .)
    ALL             reduce using rule 34 (optvars -> exp optvars .)
    NOT             reduce using rule 34 (optvars -> exp optvars .)
    TRUE            reduce using rule 34 (optvars -> exp optvars .)
    FALSE           reduce using rule 34 (optvars -> exp optvars .)
    COLON           reduce using rule 34 (optvars -> exp optvars .)
    FUNCTION        reduce using rule 34 (optvars -> exp optvars .)
    $end            reduce using rule 34 (optvars -> exp optvars .)
    CASE            reduce using rule 34 (optvars -> exp optvars .)
    OTHERWISE       reduce using rule 34 (optvars -> exp optvars .)
    CATCH           reduce using rule 34 (optvars -> exp optvars .)
    END             reduce using rule 34 (optvars -> exp optvars .)
    ELSE            reduce using rule 34 (optvars -> exp optvars .)


state 94

    (82) exp -> IDENTIFIER LBRACE args . RBRACE

    RBRACE          shift and go to state 136


state 95

    (53) args -> exp . COMMA args
    (54) args -> exp .
    (41) exp -> exp . TRANSPOSE
    (55) exp -> exp . ELOR exp
    (56) exp -> exp . ELAND exp
    (57) exp -> exp . OROR exp
    (58) exp -> exp . ANDAND exp
    (59) exp -> exp . EQUALEQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . LE exp
    (64) exp -> exp . GE exp
    (65) exp -> exp . MPOWER exp
    (66) exp -> exp . POWER exp
    (67) exp -> exp . MTIMES exp
    (68) exp -> exp . MDIVIDE exp
    (69) exp -> exp . TIMES exp
    (70) exp -> exp . DIVIDE exp
    (71) exp -> exp . BACKSLASH exp
    (72) exp -> exp . PLUS exp
    (73) exp -> exp . MINUS exp
    (74) exp -> exp . COLON exp COLON exp
    (75) exp -> exp . COLON exp

    COMMA           shift and go to state 137
    RPAREN          reduce using rule 54 (args -> exp .)
    RBRACE          reduce using rule 54 (args -> exp .)
    TRANSPOSE       shift and go to state 68
    ELOR            shift and go to state 63
    ELAND           shift and go to state 62
    OROR            shift and go to state 60
    ANDAND          shift and go to state 79
    EQUALEQUAL      shift and go to state 73
    NOTEQUAL        shift and go to state 61
    LT              shift and go to state 70
    GT              shift and go to state 74
    LE              shift and go to state 66
    GE              shift and go to state 78
    MPOWER          shift and go to state 80
    POWER           shift and go to state 67
    MTIMES          shift and go to state 64
    MDIVIDE         shift and go to state 76
    TIMES           shift and go to state 77
    DIVIDE          shift and go to state 75
    BACKSLASH       shift and go to state 69
    PLUS            shift and go to state 72
    MINUS           shift and go to state 65
    COLON           shift and go to state 71


state 96

    (15) stmt -> IDENTIFIER EQUAL exp .
    (41) exp -> exp . TRANSPOSE
    (55) exp -> exp . ELOR exp
    (56) exp -> exp . ELAND exp
    (57) exp -> exp . OROR exp
    (58) exp -> exp . ANDAND exp
    (59) exp -> exp . EQUALEQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . LE exp
    (64) exp -> exp . GE exp
    (65) exp -> exp . MPOWER exp
    (66) exp -> exp . POWER exp
    (67) exp -> exp . MTIMES exp
    (68) exp -> exp . MDIVIDE exp
    (69) exp -> exp . TIMES exp
    (70) exp -> exp . DIVIDE exp
    (71) exp -> exp . BACKSLASH exp
    (72) exp -> exp . PLUS exp
    (73) exp -> exp . MINUS exp
    (74) exp -> exp . COLON exp COLON exp
    (75) exp -> exp . COLON exp

  ! shift/reduce conflict for COLON resolved as shift
    SEMICOLON       reduce using rule 15 (stmt -> IDENTIFIER EQUAL exp .)
    COMMENT         reduce using rule 15 (stmt -> IDENTIFIER EQUAL exp .)
    IF              reduce using rule 15 (stmt -> IDENTIFIER EQUAL exp .)
    SWITCH          reduce using rule 15 (stmt -> IDENTIFIER EQUAL exp .)
    TRY             reduce using rule 15 (stmt -> IDENTIFIER EQUAL exp .)
    FOR             reduce using rule 15 (stmt -> IDENTIFIER EQUAL exp .)
    WHILE           reduce using rule 15 (stmt -> IDENTIFIER EQUAL exp .)
    IDENTIFIER      reduce using rule 15 (stmt -> IDENTIFIER EQUAL exp .)
    RETURN          reduce using rule 15 (stmt -> IDENTIFIER EQUAL exp .)
    LBRACKET        reduce using rule 15 (stmt -> IDENTIFIER EQUAL exp .)
    CLC             reduce using rule 15 (stmt -> IDENTIFIER EQUAL exp .)
    CLOSE           reduce using rule 15 (stmt -> IDENTIFIER EQUAL exp .)
    CLEAR           reduce using rule 15 (stmt -> IDENTIFIER EQUAL exp .)
    BREAK           reduce using rule 15 (stmt -> IDENTIFIER EQUAL exp .)
    CONTINUE        reduce using rule 15 (stmt -> IDENTIFIER EQUAL exp .)
    STRING          reduce using rule 15 (stmt -> IDENTIFIER EQUAL exp .)
    DIRECTORY       reduce using rule 15 (stmt -> IDENTIFIER EQUAL exp .)
    LPAREN          reduce using rule 15 (stmt -> IDENTIFIER EQUAL exp .)
    INTEGER         reduce using rule 15 (stmt -> IDENTIFIER EQUAL exp .)
    FLOAT           reduce using rule 15 (stmt -> IDENTIFIER EQUAL exp .)
    ALL             reduce using rule 15 (stmt -> IDENTIFIER EQUAL exp .)
    NOT             reduce using rule 15 (stmt -> IDENTIFIER EQUAL exp .)
    TRUE            reduce using rule 15 (stmt -> IDENTIFIER EQUAL exp .)
    FALSE           reduce using rule 15 (stmt -> IDENTIFIER EQUAL exp .)
    END             reduce using rule 15 (stmt -> IDENTIFIER EQUAL exp .)
    CASE            reduce using rule 15 (stmt -> IDENTIFIER EQUAL exp .)
    OTHERWISE       reduce using rule 15 (stmt -> IDENTIFIER EQUAL exp .)
    CATCH           reduce using rule 15 (stmt -> IDENTIFIER EQUAL exp .)
    FUNCTION        reduce using rule 15 (stmt -> IDENTIFIER EQUAL exp .)
    $end            reduce using rule 15 (stmt -> IDENTIFIER EQUAL exp .)
    ELSE            reduce using rule 15 (stmt -> IDENTIFIER EQUAL exp .)
    TRANSPOSE       shift and go to state 68
    ELOR            shift and go to state 63
    ELAND           shift and go to state 62
    OROR            shift and go to state 60
    ANDAND          shift and go to state 79
    EQUALEQUAL      shift and go to state 73
    NOTEQUAL        shift and go to state 61
    LT              shift and go to state 70
    GT              shift and go to state 74
    LE              shift and go to state 66
    GE              shift and go to state 78
    MPOWER          shift and go to state 80
    POWER           shift and go to state 67
    MTIMES          shift and go to state 64
    MDIVIDE         shift and go to state 76
    TIMES           shift and go to state 77
    DIVIDE          shift and go to state 75
    BACKSLASH       shift and go to state 69
    PLUS            shift and go to state 72
    MINUS           shift and go to state 65
    COLON           shift and go to state 71

  ! COLON           [ reduce using rule 15 (stmt -> IDENTIFIER EQUAL exp .) ]


state 97

    (19) stmt -> IDENTIFIER PERIOD IDENTIFIER .

    SEMICOLON       reduce using rule 19 (stmt -> IDENTIFIER PERIOD IDENTIFIER .)
    COMMENT         reduce using rule 19 (stmt -> IDENTIFIER PERIOD IDENTIFIER .)
    IF              reduce using rule 19 (stmt -> IDENTIFIER PERIOD IDENTIFIER .)
    SWITCH          reduce using rule 19 (stmt -> IDENTIFIER PERIOD IDENTIFIER .)
    TRY             reduce using rule 19 (stmt -> IDENTIFIER PERIOD IDENTIFIER .)
    FOR             reduce using rule 19 (stmt -> IDENTIFIER PERIOD IDENTIFIER .)
    WHILE           reduce using rule 19 (stmt -> IDENTIFIER PERIOD IDENTIFIER .)
    IDENTIFIER      reduce using rule 19 (stmt -> IDENTIFIER PERIOD IDENTIFIER .)
    RETURN          reduce using rule 19 (stmt -> IDENTIFIER PERIOD IDENTIFIER .)
    LBRACKET        reduce using rule 19 (stmt -> IDENTIFIER PERIOD IDENTIFIER .)
    CLC             reduce using rule 19 (stmt -> IDENTIFIER PERIOD IDENTIFIER .)
    CLOSE           reduce using rule 19 (stmt -> IDENTIFIER PERIOD IDENTIFIER .)
    CLEAR           reduce using rule 19 (stmt -> IDENTIFIER PERIOD IDENTIFIER .)
    BREAK           reduce using rule 19 (stmt -> IDENTIFIER PERIOD IDENTIFIER .)
    CONTINUE        reduce using rule 19 (stmt -> IDENTIFIER PERIOD IDENTIFIER .)
    STRING          reduce using rule 19 (stmt -> IDENTIFIER PERIOD IDENTIFIER .)
    DIRECTORY       reduce using rule 19 (stmt -> IDENTIFIER PERIOD IDENTIFIER .)
    LPAREN          reduce using rule 19 (stmt -> IDENTIFIER PERIOD IDENTIFIER .)
    INTEGER         reduce using rule 19 (stmt -> IDENTIFIER PERIOD IDENTIFIER .)
    FLOAT           reduce using rule 19 (stmt -> IDENTIFIER PERIOD IDENTIFIER .)
    ALL             reduce using rule 19 (stmt -> IDENTIFIER PERIOD IDENTIFIER .)
    NOT             reduce using rule 19 (stmt -> IDENTIFIER PERIOD IDENTIFIER .)
    TRUE            reduce using rule 19 (stmt -> IDENTIFIER PERIOD IDENTIFIER .)
    FALSE           reduce using rule 19 (stmt -> IDENTIFIER PERIOD IDENTIFIER .)
    COLON           reduce using rule 19 (stmt -> IDENTIFIER PERIOD IDENTIFIER .)
    END             reduce using rule 19 (stmt -> IDENTIFIER PERIOD IDENTIFIER .)
    CASE            reduce using rule 19 (stmt -> IDENTIFIER PERIOD IDENTIFIER .)
    OTHERWISE       reduce using rule 19 (stmt -> IDENTIFIER PERIOD IDENTIFIER .)
    CATCH           reduce using rule 19 (stmt -> IDENTIFIER PERIOD IDENTIFIER .)
    FUNCTION        reduce using rule 19 (stmt -> IDENTIFIER PERIOD IDENTIFIER .)
    $end            reduce using rule 19 (stmt -> IDENTIFIER PERIOD IDENTIFIER .)
    ELSE            reduce using rule 19 (stmt -> IDENTIFIER PERIOD IDENTIFIER .)


state 98

    (43) exp -> IDENTIFIER LPAREN optargs . RPAREN

    RPAREN          shift and go to state 138


state 99

    (51) optargs -> args .

    RPAREN          reduce using rule 51 (optargs -> args .)


state 100

    (4) element -> FUNCTION IDENTIFIER EQUAL . IDENTIFIER LPAREN optargs RPAREN compoundstmt END

    IDENTIFIER      shift and go to state 139


state 101

    (13) stmt -> FOR range compoundstmt . END

    END             shift and go to state 140


state 102

    (27) range -> IDENTIFIER EQUAL . exp COLON exp
    (28) range -> IDENTIFIER EQUAL . exp COLON exp COLON exp
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    number                         shift and go to state 22
    exp                            shift and go to state 141

state 103

    (5) compoundstmt -> stmt SEMICOLON compoundstmt .

    FUNCTION        reduce using rule 5 (compoundstmt -> stmt SEMICOLON compoundstmt .)
    COMMENT         reduce using rule 5 (compoundstmt -> stmt SEMICOLON compoundstmt .)
    IF              reduce using rule 5 (compoundstmt -> stmt SEMICOLON compoundstmt .)
    SWITCH          reduce using rule 5 (compoundstmt -> stmt SEMICOLON compoundstmt .)
    TRY             reduce using rule 5 (compoundstmt -> stmt SEMICOLON compoundstmt .)
    FOR             reduce using rule 5 (compoundstmt -> stmt SEMICOLON compoundstmt .)
    WHILE           reduce using rule 5 (compoundstmt -> stmt SEMICOLON compoundstmt .)
    IDENTIFIER      reduce using rule 5 (compoundstmt -> stmt SEMICOLON compoundstmt .)
    RETURN          reduce using rule 5 (compoundstmt -> stmt SEMICOLON compoundstmt .)
    LBRACKET        reduce using rule 5 (compoundstmt -> stmt SEMICOLON compoundstmt .)
    CLC             reduce using rule 5 (compoundstmt -> stmt SEMICOLON compoundstmt .)
    CLOSE           reduce using rule 5 (compoundstmt -> stmt SEMICOLON compoundstmt .)
    CLEAR           reduce using rule 5 (compoundstmt -> stmt SEMICOLON compoundstmt .)
    BREAK           reduce using rule 5 (compoundstmt -> stmt SEMICOLON compoundstmt .)
    CONTINUE        reduce using rule 5 (compoundstmt -> stmt SEMICOLON compoundstmt .)
    STRING          reduce using rule 5 (compoundstmt -> stmt SEMICOLON compoundstmt .)
    DIRECTORY       reduce using rule 5 (compoundstmt -> stmt SEMICOLON compoundstmt .)
    LPAREN          reduce using rule 5 (compoundstmt -> stmt SEMICOLON compoundstmt .)
    INTEGER         reduce using rule 5 (compoundstmt -> stmt SEMICOLON compoundstmt .)
    FLOAT           reduce using rule 5 (compoundstmt -> stmt SEMICOLON compoundstmt .)
    ALL             reduce using rule 5 (compoundstmt -> stmt SEMICOLON compoundstmt .)
    NOT             reduce using rule 5 (compoundstmt -> stmt SEMICOLON compoundstmt .)
    TRUE            reduce using rule 5 (compoundstmt -> stmt SEMICOLON compoundstmt .)
    FALSE           reduce using rule 5 (compoundstmt -> stmt SEMICOLON compoundstmt .)
    COLON           reduce using rule 5 (compoundstmt -> stmt SEMICOLON compoundstmt .)
    $end            reduce using rule 5 (compoundstmt -> stmt SEMICOLON compoundstmt .)
    CASE            reduce using rule 5 (compoundstmt -> stmt SEMICOLON compoundstmt .)
    OTHERWISE       reduce using rule 5 (compoundstmt -> stmt SEMICOLON compoundstmt .)
    CATCH           reduce using rule 5 (compoundstmt -> stmt SEMICOLON compoundstmt .)
    END             reduce using rule 5 (compoundstmt -> stmt SEMICOLON compoundstmt .)
    ELSE            reduce using rule 5 (compoundstmt -> stmt SEMICOLON compoundstmt .)


state 104

    (12) stmt -> TRY compoundstmt multiclause . END

    END             shift and go to state 142


state 105

    (42) exp -> LPAREN exp RPAREN .

    TRANSPOSE       reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    ELOR            reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    ELAND           reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    OROR            reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    ANDAND          reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    EQUALEQUAL      reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    NOTEQUAL        reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    LT              reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    GT              reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    LE              reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    GE              reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    MPOWER          reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    POWER           reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    MTIMES          reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    MDIVIDE         reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    TIMES           reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    BACKSLASH       reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    COLON           reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    COMMENT         reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    IF              reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    SWITCH          reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    TRY             reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    FOR             reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    WHILE           reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    IDENTIFIER      reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    RETURN          reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    LBRACKET        reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    CLC             reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    CLOSE           reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    CLEAR           reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    BREAK           reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    CONTINUE        reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    STRING          reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    DIRECTORY       reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    LPAREN          reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    INTEGER         reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    FLOAT           reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    ALL             reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    NOT             reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    TRUE            reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    FALSE           reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    FUNCTION        reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    $end            reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    CASE            reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    OTHERWISE       reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    CATCH           reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    END             reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    ELSE            reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    RBRACKET        reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 42 (exp -> LPAREN exp RPAREN .)
    RBRACE          reduce using rule 42 (exp -> LPAREN exp RPAREN .)


state 106

    (9) stmt -> IF exp compoundstmt . END
    (10) stmt -> IF exp compoundstmt . ELSE compoundstmt END

    END             shift and go to state 144
    ELSE            shift and go to state 143


state 107

    (57) exp -> exp OROR exp .
    (41) exp -> exp . TRANSPOSE
    (55) exp -> exp . ELOR exp
    (56) exp -> exp . ELAND exp
    (57) exp -> exp . OROR exp
    (58) exp -> exp . ANDAND exp
    (59) exp -> exp . EQUALEQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . LE exp
    (64) exp -> exp . GE exp
    (65) exp -> exp . MPOWER exp
    (66) exp -> exp . POWER exp
    (67) exp -> exp . MTIMES exp
    (68) exp -> exp . MDIVIDE exp
    (69) exp -> exp . TIMES exp
    (70) exp -> exp . DIVIDE exp
    (71) exp -> exp . BACKSLASH exp
    (72) exp -> exp . PLUS exp
    (73) exp -> exp . MINUS exp
    (74) exp -> exp . COLON exp COLON exp
    (75) exp -> exp . COLON exp

    TRANSPOSE       reduce using rule 57 (exp -> exp OROR exp .)
    ELOR            reduce using rule 57 (exp -> exp OROR exp .)
    ELAND           reduce using rule 57 (exp -> exp OROR exp .)
    OROR            reduce using rule 57 (exp -> exp OROR exp .)
    ANDAND          reduce using rule 57 (exp -> exp OROR exp .)
    EQUALEQUAL      reduce using rule 57 (exp -> exp OROR exp .)
    NOTEQUAL        reduce using rule 57 (exp -> exp OROR exp .)
    LT              reduce using rule 57 (exp -> exp OROR exp .)
    GT              reduce using rule 57 (exp -> exp OROR exp .)
    LE              reduce using rule 57 (exp -> exp OROR exp .)
    GE              reduce using rule 57 (exp -> exp OROR exp .)
    MPOWER          reduce using rule 57 (exp -> exp OROR exp .)
    POWER           reduce using rule 57 (exp -> exp OROR exp .)
    MTIMES          reduce using rule 57 (exp -> exp OROR exp .)
    MDIVIDE         reduce using rule 57 (exp -> exp OROR exp .)
    TIMES           reduce using rule 57 (exp -> exp OROR exp .)
    DIVIDE          reduce using rule 57 (exp -> exp OROR exp .)
    BACKSLASH       reduce using rule 57 (exp -> exp OROR exp .)
    PLUS            reduce using rule 57 (exp -> exp OROR exp .)
    MINUS           reduce using rule 57 (exp -> exp OROR exp .)
    COLON           reduce using rule 57 (exp -> exp OROR exp .)
    SEMICOLON       reduce using rule 57 (exp -> exp OROR exp .)
    COMMENT         reduce using rule 57 (exp -> exp OROR exp .)
    IF              reduce using rule 57 (exp -> exp OROR exp .)
    SWITCH          reduce using rule 57 (exp -> exp OROR exp .)
    TRY             reduce using rule 57 (exp -> exp OROR exp .)
    FOR             reduce using rule 57 (exp -> exp OROR exp .)
    WHILE           reduce using rule 57 (exp -> exp OROR exp .)
    IDENTIFIER      reduce using rule 57 (exp -> exp OROR exp .)
    RETURN          reduce using rule 57 (exp -> exp OROR exp .)
    LBRACKET        reduce using rule 57 (exp -> exp OROR exp .)
    CLC             reduce using rule 57 (exp -> exp OROR exp .)
    CLOSE           reduce using rule 57 (exp -> exp OROR exp .)
    CLEAR           reduce using rule 57 (exp -> exp OROR exp .)
    BREAK           reduce using rule 57 (exp -> exp OROR exp .)
    CONTINUE        reduce using rule 57 (exp -> exp OROR exp .)
    STRING          reduce using rule 57 (exp -> exp OROR exp .)
    DIRECTORY       reduce using rule 57 (exp -> exp OROR exp .)
    LPAREN          reduce using rule 57 (exp -> exp OROR exp .)
    INTEGER         reduce using rule 57 (exp -> exp OROR exp .)
    FLOAT           reduce using rule 57 (exp -> exp OROR exp .)
    ALL             reduce using rule 57 (exp -> exp OROR exp .)
    NOT             reduce using rule 57 (exp -> exp OROR exp .)
    TRUE            reduce using rule 57 (exp -> exp OROR exp .)
    FALSE           reduce using rule 57 (exp -> exp OROR exp .)
    FUNCTION        reduce using rule 57 (exp -> exp OROR exp .)
    $end            reduce using rule 57 (exp -> exp OROR exp .)
    CASE            reduce using rule 57 (exp -> exp OROR exp .)
    OTHERWISE       reduce using rule 57 (exp -> exp OROR exp .)
    CATCH           reduce using rule 57 (exp -> exp OROR exp .)
    END             reduce using rule 57 (exp -> exp OROR exp .)
    ELSE            reduce using rule 57 (exp -> exp OROR exp .)
    RBRACKET        reduce using rule 57 (exp -> exp OROR exp .)
    COMMA           reduce using rule 57 (exp -> exp OROR exp .)
    RPAREN          reduce using rule 57 (exp -> exp OROR exp .)
    RBRACE          reduce using rule 57 (exp -> exp OROR exp .)

  ! TRANSPOSE       [ shift and go to state 68 ]
  ! ELOR            [ shift and go to state 63 ]
  ! ELAND           [ shift and go to state 62 ]
  ! OROR            [ shift and go to state 60 ]
  ! ANDAND          [ shift and go to state 79 ]
  ! EQUALEQUAL      [ shift and go to state 73 ]
  ! NOTEQUAL        [ shift and go to state 61 ]
  ! LT              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 74 ]
  ! LE              [ shift and go to state 66 ]
  ! GE              [ shift and go to state 78 ]
  ! MPOWER          [ shift and go to state 80 ]
  ! POWER           [ shift and go to state 67 ]
  ! MTIMES          [ shift and go to state 64 ]
  ! MDIVIDE         [ shift and go to state 76 ]
  ! TIMES           [ shift and go to state 77 ]
  ! DIVIDE          [ shift and go to state 75 ]
  ! BACKSLASH       [ shift and go to state 69 ]
  ! PLUS            [ shift and go to state 72 ]
  ! MINUS           [ shift and go to state 65 ]
  ! COLON           [ shift and go to state 71 ]


state 108

    (60) exp -> exp NOTEQUAL exp .
    (41) exp -> exp . TRANSPOSE
    (55) exp -> exp . ELOR exp
    (56) exp -> exp . ELAND exp
    (57) exp -> exp . OROR exp
    (58) exp -> exp . ANDAND exp
    (59) exp -> exp . EQUALEQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . LE exp
    (64) exp -> exp . GE exp
    (65) exp -> exp . MPOWER exp
    (66) exp -> exp . POWER exp
    (67) exp -> exp . MTIMES exp
    (68) exp -> exp . MDIVIDE exp
    (69) exp -> exp . TIMES exp
    (70) exp -> exp . DIVIDE exp
    (71) exp -> exp . BACKSLASH exp
    (72) exp -> exp . PLUS exp
    (73) exp -> exp . MINUS exp
    (74) exp -> exp . COLON exp COLON exp
    (75) exp -> exp . COLON exp

    TRANSPOSE       reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    EQUALEQUAL      reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    NOTEQUAL        reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    LT              reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    GT              reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    LE              reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    GE              reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    MPOWER          reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    POWER           reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    MTIMES          reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    MDIVIDE         reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    TIMES           reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    DIVIDE          reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    BACKSLASH       reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    PLUS            reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    MINUS           reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    COLON           reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    SEMICOLON       reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    COMMENT         reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    IF              reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    SWITCH          reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    TRY             reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    FOR             reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    WHILE           reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    IDENTIFIER      reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    RETURN          reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    LBRACKET        reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    CLC             reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    CLOSE           reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    CLEAR           reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    BREAK           reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    CONTINUE        reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    STRING          reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    DIRECTORY       reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    LPAREN          reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    INTEGER         reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    FLOAT           reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    ALL             reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    NOT             reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    TRUE            reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    FALSE           reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    FUNCTION        reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    $end            reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    CASE            reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    OTHERWISE       reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    CATCH           reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    END             reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    ELSE            reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    RBRACKET        reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    COMMA           reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    RPAREN          reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    RBRACE          reduce using rule 60 (exp -> exp NOTEQUAL exp .)
    ELOR            shift and go to state 63
    ELAND           shift and go to state 62
    OROR            shift and go to state 60
    ANDAND          shift and go to state 79

  ! ELOR            [ reduce using rule 60 (exp -> exp NOTEQUAL exp .) ]
  ! ELAND           [ reduce using rule 60 (exp -> exp NOTEQUAL exp .) ]
  ! OROR            [ reduce using rule 60 (exp -> exp NOTEQUAL exp .) ]
  ! ANDAND          [ reduce using rule 60 (exp -> exp NOTEQUAL exp .) ]
  ! TRANSPOSE       [ shift and go to state 68 ]
  ! EQUALEQUAL      [ shift and go to state 73 ]
  ! NOTEQUAL        [ shift and go to state 61 ]
  ! LT              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 74 ]
  ! LE              [ shift and go to state 66 ]
  ! GE              [ shift and go to state 78 ]
  ! MPOWER          [ shift and go to state 80 ]
  ! POWER           [ shift and go to state 67 ]
  ! MTIMES          [ shift and go to state 64 ]
  ! MDIVIDE         [ shift and go to state 76 ]
  ! TIMES           [ shift and go to state 77 ]
  ! DIVIDE          [ shift and go to state 75 ]
  ! BACKSLASH       [ shift and go to state 69 ]
  ! PLUS            [ shift and go to state 72 ]
  ! MINUS           [ shift and go to state 65 ]
  ! COLON           [ shift and go to state 71 ]


state 109

    (56) exp -> exp ELAND exp .
    (41) exp -> exp . TRANSPOSE
    (55) exp -> exp . ELOR exp
    (56) exp -> exp . ELAND exp
    (57) exp -> exp . OROR exp
    (58) exp -> exp . ANDAND exp
    (59) exp -> exp . EQUALEQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . LE exp
    (64) exp -> exp . GE exp
    (65) exp -> exp . MPOWER exp
    (66) exp -> exp . POWER exp
    (67) exp -> exp . MTIMES exp
    (68) exp -> exp . MDIVIDE exp
    (69) exp -> exp . TIMES exp
    (70) exp -> exp . DIVIDE exp
    (71) exp -> exp . BACKSLASH exp
    (72) exp -> exp . PLUS exp
    (73) exp -> exp . MINUS exp
    (74) exp -> exp . COLON exp COLON exp
    (75) exp -> exp . COLON exp

    TRANSPOSE       reduce using rule 56 (exp -> exp ELAND exp .)
    ELAND           reduce using rule 56 (exp -> exp ELAND exp .)
    EQUALEQUAL      reduce using rule 56 (exp -> exp ELAND exp .)
    NOTEQUAL        reduce using rule 56 (exp -> exp ELAND exp .)
    LT              reduce using rule 56 (exp -> exp ELAND exp .)
    GT              reduce using rule 56 (exp -> exp ELAND exp .)
    LE              reduce using rule 56 (exp -> exp ELAND exp .)
    GE              reduce using rule 56 (exp -> exp ELAND exp .)
    MPOWER          reduce using rule 56 (exp -> exp ELAND exp .)
    POWER           reduce using rule 56 (exp -> exp ELAND exp .)
    MTIMES          reduce using rule 56 (exp -> exp ELAND exp .)
    MDIVIDE         reduce using rule 56 (exp -> exp ELAND exp .)
    TIMES           reduce using rule 56 (exp -> exp ELAND exp .)
    DIVIDE          reduce using rule 56 (exp -> exp ELAND exp .)
    BACKSLASH       reduce using rule 56 (exp -> exp ELAND exp .)
    PLUS            reduce using rule 56 (exp -> exp ELAND exp .)
    MINUS           reduce using rule 56 (exp -> exp ELAND exp .)
    COLON           reduce using rule 56 (exp -> exp ELAND exp .)
    SEMICOLON       reduce using rule 56 (exp -> exp ELAND exp .)
    COMMENT         reduce using rule 56 (exp -> exp ELAND exp .)
    IF              reduce using rule 56 (exp -> exp ELAND exp .)
    SWITCH          reduce using rule 56 (exp -> exp ELAND exp .)
    TRY             reduce using rule 56 (exp -> exp ELAND exp .)
    FOR             reduce using rule 56 (exp -> exp ELAND exp .)
    WHILE           reduce using rule 56 (exp -> exp ELAND exp .)
    IDENTIFIER      reduce using rule 56 (exp -> exp ELAND exp .)
    RETURN          reduce using rule 56 (exp -> exp ELAND exp .)
    LBRACKET        reduce using rule 56 (exp -> exp ELAND exp .)
    CLC             reduce using rule 56 (exp -> exp ELAND exp .)
    CLOSE           reduce using rule 56 (exp -> exp ELAND exp .)
    CLEAR           reduce using rule 56 (exp -> exp ELAND exp .)
    BREAK           reduce using rule 56 (exp -> exp ELAND exp .)
    CONTINUE        reduce using rule 56 (exp -> exp ELAND exp .)
    STRING          reduce using rule 56 (exp -> exp ELAND exp .)
    DIRECTORY       reduce using rule 56 (exp -> exp ELAND exp .)
    LPAREN          reduce using rule 56 (exp -> exp ELAND exp .)
    INTEGER         reduce using rule 56 (exp -> exp ELAND exp .)
    FLOAT           reduce using rule 56 (exp -> exp ELAND exp .)
    ALL             reduce using rule 56 (exp -> exp ELAND exp .)
    NOT             reduce using rule 56 (exp -> exp ELAND exp .)
    TRUE            reduce using rule 56 (exp -> exp ELAND exp .)
    FALSE           reduce using rule 56 (exp -> exp ELAND exp .)
    FUNCTION        reduce using rule 56 (exp -> exp ELAND exp .)
    $end            reduce using rule 56 (exp -> exp ELAND exp .)
    CASE            reduce using rule 56 (exp -> exp ELAND exp .)
    OTHERWISE       reduce using rule 56 (exp -> exp ELAND exp .)
    CATCH           reduce using rule 56 (exp -> exp ELAND exp .)
    END             reduce using rule 56 (exp -> exp ELAND exp .)
    ELSE            reduce using rule 56 (exp -> exp ELAND exp .)
    RBRACKET        reduce using rule 56 (exp -> exp ELAND exp .)
    COMMA           reduce using rule 56 (exp -> exp ELAND exp .)
    RPAREN          reduce using rule 56 (exp -> exp ELAND exp .)
    RBRACE          reduce using rule 56 (exp -> exp ELAND exp .)
    ELOR            shift and go to state 63
    OROR            shift and go to state 60
    ANDAND          shift and go to state 79

  ! ELOR            [ reduce using rule 56 (exp -> exp ELAND exp .) ]
  ! OROR            [ reduce using rule 56 (exp -> exp ELAND exp .) ]
  ! ANDAND          [ reduce using rule 56 (exp -> exp ELAND exp .) ]
  ! TRANSPOSE       [ shift and go to state 68 ]
  ! ELAND           [ shift and go to state 62 ]
  ! EQUALEQUAL      [ shift and go to state 73 ]
  ! NOTEQUAL        [ shift and go to state 61 ]
  ! LT              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 74 ]
  ! LE              [ shift and go to state 66 ]
  ! GE              [ shift and go to state 78 ]
  ! MPOWER          [ shift and go to state 80 ]
  ! POWER           [ shift and go to state 67 ]
  ! MTIMES          [ shift and go to state 64 ]
  ! MDIVIDE         [ shift and go to state 76 ]
  ! TIMES           [ shift and go to state 77 ]
  ! DIVIDE          [ shift and go to state 75 ]
  ! BACKSLASH       [ shift and go to state 69 ]
  ! PLUS            [ shift and go to state 72 ]
  ! MINUS           [ shift and go to state 65 ]
  ! COLON           [ shift and go to state 71 ]


state 110

    (55) exp -> exp ELOR exp .
    (41) exp -> exp . TRANSPOSE
    (55) exp -> exp . ELOR exp
    (56) exp -> exp . ELAND exp
    (57) exp -> exp . OROR exp
    (58) exp -> exp . ANDAND exp
    (59) exp -> exp . EQUALEQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . LE exp
    (64) exp -> exp . GE exp
    (65) exp -> exp . MPOWER exp
    (66) exp -> exp . POWER exp
    (67) exp -> exp . MTIMES exp
    (68) exp -> exp . MDIVIDE exp
    (69) exp -> exp . TIMES exp
    (70) exp -> exp . DIVIDE exp
    (71) exp -> exp . BACKSLASH exp
    (72) exp -> exp . PLUS exp
    (73) exp -> exp . MINUS exp
    (74) exp -> exp . COLON exp COLON exp
    (75) exp -> exp . COLON exp

    TRANSPOSE       reduce using rule 55 (exp -> exp ELOR exp .)
    ELOR            reduce using rule 55 (exp -> exp ELOR exp .)
    ELAND           reduce using rule 55 (exp -> exp ELOR exp .)
    EQUALEQUAL      reduce using rule 55 (exp -> exp ELOR exp .)
    NOTEQUAL        reduce using rule 55 (exp -> exp ELOR exp .)
    LT              reduce using rule 55 (exp -> exp ELOR exp .)
    GT              reduce using rule 55 (exp -> exp ELOR exp .)
    LE              reduce using rule 55 (exp -> exp ELOR exp .)
    GE              reduce using rule 55 (exp -> exp ELOR exp .)
    MPOWER          reduce using rule 55 (exp -> exp ELOR exp .)
    POWER           reduce using rule 55 (exp -> exp ELOR exp .)
    MTIMES          reduce using rule 55 (exp -> exp ELOR exp .)
    MDIVIDE         reduce using rule 55 (exp -> exp ELOR exp .)
    TIMES           reduce using rule 55 (exp -> exp ELOR exp .)
    DIVIDE          reduce using rule 55 (exp -> exp ELOR exp .)
    BACKSLASH       reduce using rule 55 (exp -> exp ELOR exp .)
    PLUS            reduce using rule 55 (exp -> exp ELOR exp .)
    MINUS           reduce using rule 55 (exp -> exp ELOR exp .)
    COLON           reduce using rule 55 (exp -> exp ELOR exp .)
    SEMICOLON       reduce using rule 55 (exp -> exp ELOR exp .)
    COMMENT         reduce using rule 55 (exp -> exp ELOR exp .)
    IF              reduce using rule 55 (exp -> exp ELOR exp .)
    SWITCH          reduce using rule 55 (exp -> exp ELOR exp .)
    TRY             reduce using rule 55 (exp -> exp ELOR exp .)
    FOR             reduce using rule 55 (exp -> exp ELOR exp .)
    WHILE           reduce using rule 55 (exp -> exp ELOR exp .)
    IDENTIFIER      reduce using rule 55 (exp -> exp ELOR exp .)
    RETURN          reduce using rule 55 (exp -> exp ELOR exp .)
    LBRACKET        reduce using rule 55 (exp -> exp ELOR exp .)
    CLC             reduce using rule 55 (exp -> exp ELOR exp .)
    CLOSE           reduce using rule 55 (exp -> exp ELOR exp .)
    CLEAR           reduce using rule 55 (exp -> exp ELOR exp .)
    BREAK           reduce using rule 55 (exp -> exp ELOR exp .)
    CONTINUE        reduce using rule 55 (exp -> exp ELOR exp .)
    STRING          reduce using rule 55 (exp -> exp ELOR exp .)
    DIRECTORY       reduce using rule 55 (exp -> exp ELOR exp .)
    LPAREN          reduce using rule 55 (exp -> exp ELOR exp .)
    INTEGER         reduce using rule 55 (exp -> exp ELOR exp .)
    FLOAT           reduce using rule 55 (exp -> exp ELOR exp .)
    ALL             reduce using rule 55 (exp -> exp ELOR exp .)
    NOT             reduce using rule 55 (exp -> exp ELOR exp .)
    TRUE            reduce using rule 55 (exp -> exp ELOR exp .)
    FALSE           reduce using rule 55 (exp -> exp ELOR exp .)
    FUNCTION        reduce using rule 55 (exp -> exp ELOR exp .)
    $end            reduce using rule 55 (exp -> exp ELOR exp .)
    CASE            reduce using rule 55 (exp -> exp ELOR exp .)
    OTHERWISE       reduce using rule 55 (exp -> exp ELOR exp .)
    CATCH           reduce using rule 55 (exp -> exp ELOR exp .)
    END             reduce using rule 55 (exp -> exp ELOR exp .)
    ELSE            reduce using rule 55 (exp -> exp ELOR exp .)
    RBRACKET        reduce using rule 55 (exp -> exp ELOR exp .)
    COMMA           reduce using rule 55 (exp -> exp ELOR exp .)
    RPAREN          reduce using rule 55 (exp -> exp ELOR exp .)
    RBRACE          reduce using rule 55 (exp -> exp ELOR exp .)
    OROR            shift and go to state 60
    ANDAND          shift and go to state 79

  ! OROR            [ reduce using rule 55 (exp -> exp ELOR exp .) ]
  ! ANDAND          [ reduce using rule 55 (exp -> exp ELOR exp .) ]
  ! TRANSPOSE       [ shift and go to state 68 ]
  ! ELOR            [ shift and go to state 63 ]
  ! ELAND           [ shift and go to state 62 ]
  ! EQUALEQUAL      [ shift and go to state 73 ]
  ! NOTEQUAL        [ shift and go to state 61 ]
  ! LT              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 74 ]
  ! LE              [ shift and go to state 66 ]
  ! GE              [ shift and go to state 78 ]
  ! MPOWER          [ shift and go to state 80 ]
  ! POWER           [ shift and go to state 67 ]
  ! MTIMES          [ shift and go to state 64 ]
  ! MDIVIDE         [ shift and go to state 76 ]
  ! TIMES           [ shift and go to state 77 ]
  ! DIVIDE          [ shift and go to state 75 ]
  ! BACKSLASH       [ shift and go to state 69 ]
  ! PLUS            [ shift and go to state 72 ]
  ! MINUS           [ shift and go to state 65 ]
  ! COLON           [ shift and go to state 71 ]


state 111

    (67) exp -> exp MTIMES exp .
    (41) exp -> exp . TRANSPOSE
    (55) exp -> exp . ELOR exp
    (56) exp -> exp . ELAND exp
    (57) exp -> exp . OROR exp
    (58) exp -> exp . ANDAND exp
    (59) exp -> exp . EQUALEQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . LE exp
    (64) exp -> exp . GE exp
    (65) exp -> exp . MPOWER exp
    (66) exp -> exp . POWER exp
    (67) exp -> exp . MTIMES exp
    (68) exp -> exp . MDIVIDE exp
    (69) exp -> exp . TIMES exp
    (70) exp -> exp . DIVIDE exp
    (71) exp -> exp . BACKSLASH exp
    (72) exp -> exp . PLUS exp
    (73) exp -> exp . MINUS exp
    (74) exp -> exp . COLON exp COLON exp
    (75) exp -> exp . COLON exp

    TRANSPOSE       reduce using rule 67 (exp -> exp MTIMES exp .)
    MPOWER          reduce using rule 67 (exp -> exp MTIMES exp .)
    POWER           reduce using rule 67 (exp -> exp MTIMES exp .)
    MTIMES          reduce using rule 67 (exp -> exp MTIMES exp .)
    MDIVIDE         reduce using rule 67 (exp -> exp MTIMES exp .)
    TIMES           reduce using rule 67 (exp -> exp MTIMES exp .)
    DIVIDE          reduce using rule 67 (exp -> exp MTIMES exp .)
    BACKSLASH       reduce using rule 67 (exp -> exp MTIMES exp .)
    SEMICOLON       reduce using rule 67 (exp -> exp MTIMES exp .)
    COMMENT         reduce using rule 67 (exp -> exp MTIMES exp .)
    IF              reduce using rule 67 (exp -> exp MTIMES exp .)
    SWITCH          reduce using rule 67 (exp -> exp MTIMES exp .)
    TRY             reduce using rule 67 (exp -> exp MTIMES exp .)
    FOR             reduce using rule 67 (exp -> exp MTIMES exp .)
    WHILE           reduce using rule 67 (exp -> exp MTIMES exp .)
    IDENTIFIER      reduce using rule 67 (exp -> exp MTIMES exp .)
    RETURN          reduce using rule 67 (exp -> exp MTIMES exp .)
    LBRACKET        reduce using rule 67 (exp -> exp MTIMES exp .)
    CLC             reduce using rule 67 (exp -> exp MTIMES exp .)
    CLOSE           reduce using rule 67 (exp -> exp MTIMES exp .)
    CLEAR           reduce using rule 67 (exp -> exp MTIMES exp .)
    BREAK           reduce using rule 67 (exp -> exp MTIMES exp .)
    CONTINUE        reduce using rule 67 (exp -> exp MTIMES exp .)
    STRING          reduce using rule 67 (exp -> exp MTIMES exp .)
    DIRECTORY       reduce using rule 67 (exp -> exp MTIMES exp .)
    LPAREN          reduce using rule 67 (exp -> exp MTIMES exp .)
    INTEGER         reduce using rule 67 (exp -> exp MTIMES exp .)
    FLOAT           reduce using rule 67 (exp -> exp MTIMES exp .)
    ALL             reduce using rule 67 (exp -> exp MTIMES exp .)
    NOT             reduce using rule 67 (exp -> exp MTIMES exp .)
    TRUE            reduce using rule 67 (exp -> exp MTIMES exp .)
    FALSE           reduce using rule 67 (exp -> exp MTIMES exp .)
    FUNCTION        reduce using rule 67 (exp -> exp MTIMES exp .)
    $end            reduce using rule 67 (exp -> exp MTIMES exp .)
    CASE            reduce using rule 67 (exp -> exp MTIMES exp .)
    OTHERWISE       reduce using rule 67 (exp -> exp MTIMES exp .)
    CATCH           reduce using rule 67 (exp -> exp MTIMES exp .)
    END             reduce using rule 67 (exp -> exp MTIMES exp .)
    ELSE            reduce using rule 67 (exp -> exp MTIMES exp .)
    RBRACKET        reduce using rule 67 (exp -> exp MTIMES exp .)
    COMMA           reduce using rule 67 (exp -> exp MTIMES exp .)
    RPAREN          reduce using rule 67 (exp -> exp MTIMES exp .)
    RBRACE          reduce using rule 67 (exp -> exp MTIMES exp .)
    ELOR            shift and go to state 63
    ELAND           shift and go to state 62
    OROR            shift and go to state 60
    ANDAND          shift and go to state 79
    EQUALEQUAL      shift and go to state 73
    NOTEQUAL        shift and go to state 61
    LT              shift and go to state 70
    GT              shift and go to state 74
    LE              shift and go to state 66
    GE              shift and go to state 78
    PLUS            shift and go to state 72
    MINUS           shift and go to state 65
    COLON           shift and go to state 71

  ! ELOR            [ reduce using rule 67 (exp -> exp MTIMES exp .) ]
  ! ELAND           [ reduce using rule 67 (exp -> exp MTIMES exp .) ]
  ! OROR            [ reduce using rule 67 (exp -> exp MTIMES exp .) ]
  ! ANDAND          [ reduce using rule 67 (exp -> exp MTIMES exp .) ]
  ! EQUALEQUAL      [ reduce using rule 67 (exp -> exp MTIMES exp .) ]
  ! NOTEQUAL        [ reduce using rule 67 (exp -> exp MTIMES exp .) ]
  ! LT              [ reduce using rule 67 (exp -> exp MTIMES exp .) ]
  ! GT              [ reduce using rule 67 (exp -> exp MTIMES exp .) ]
  ! LE              [ reduce using rule 67 (exp -> exp MTIMES exp .) ]
  ! GE              [ reduce using rule 67 (exp -> exp MTIMES exp .) ]
  ! PLUS            [ reduce using rule 67 (exp -> exp MTIMES exp .) ]
  ! MINUS           [ reduce using rule 67 (exp -> exp MTIMES exp .) ]
  ! COLON           [ reduce using rule 67 (exp -> exp MTIMES exp .) ]
  ! TRANSPOSE       [ shift and go to state 68 ]
  ! MPOWER          [ shift and go to state 80 ]
  ! POWER           [ shift and go to state 67 ]
  ! MTIMES          [ shift and go to state 64 ]
  ! MDIVIDE         [ shift and go to state 76 ]
  ! TIMES           [ shift and go to state 77 ]
  ! DIVIDE          [ shift and go to state 75 ]
  ! BACKSLASH       [ shift and go to state 69 ]


state 112

    (73) exp -> exp MINUS exp .
    (41) exp -> exp . TRANSPOSE
    (55) exp -> exp . ELOR exp
    (56) exp -> exp . ELAND exp
    (57) exp -> exp . OROR exp
    (58) exp -> exp . ANDAND exp
    (59) exp -> exp . EQUALEQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . LE exp
    (64) exp -> exp . GE exp
    (65) exp -> exp . MPOWER exp
    (66) exp -> exp . POWER exp
    (67) exp -> exp . MTIMES exp
    (68) exp -> exp . MDIVIDE exp
    (69) exp -> exp . TIMES exp
    (70) exp -> exp . DIVIDE exp
    (71) exp -> exp . BACKSLASH exp
    (72) exp -> exp . PLUS exp
    (73) exp -> exp . MINUS exp
    (74) exp -> exp . COLON exp COLON exp
    (75) exp -> exp . COLON exp

    TRANSPOSE       reduce using rule 73 (exp -> exp MINUS exp .)
    MPOWER          reduce using rule 73 (exp -> exp MINUS exp .)
    POWER           reduce using rule 73 (exp -> exp MINUS exp .)
    MTIMES          reduce using rule 73 (exp -> exp MINUS exp .)
    MDIVIDE         reduce using rule 73 (exp -> exp MINUS exp .)
    TIMES           reduce using rule 73 (exp -> exp MINUS exp .)
    DIVIDE          reduce using rule 73 (exp -> exp MINUS exp .)
    BACKSLASH       reduce using rule 73 (exp -> exp MINUS exp .)
    PLUS            reduce using rule 73 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 73 (exp -> exp MINUS exp .)
    SEMICOLON       reduce using rule 73 (exp -> exp MINUS exp .)
    COMMENT         reduce using rule 73 (exp -> exp MINUS exp .)
    IF              reduce using rule 73 (exp -> exp MINUS exp .)
    SWITCH          reduce using rule 73 (exp -> exp MINUS exp .)
    TRY             reduce using rule 73 (exp -> exp MINUS exp .)
    FOR             reduce using rule 73 (exp -> exp MINUS exp .)
    WHILE           reduce using rule 73 (exp -> exp MINUS exp .)
    IDENTIFIER      reduce using rule 73 (exp -> exp MINUS exp .)
    RETURN          reduce using rule 73 (exp -> exp MINUS exp .)
    LBRACKET        reduce using rule 73 (exp -> exp MINUS exp .)
    CLC             reduce using rule 73 (exp -> exp MINUS exp .)
    CLOSE           reduce using rule 73 (exp -> exp MINUS exp .)
    CLEAR           reduce using rule 73 (exp -> exp MINUS exp .)
    BREAK           reduce using rule 73 (exp -> exp MINUS exp .)
    CONTINUE        reduce using rule 73 (exp -> exp MINUS exp .)
    STRING          reduce using rule 73 (exp -> exp MINUS exp .)
    DIRECTORY       reduce using rule 73 (exp -> exp MINUS exp .)
    LPAREN          reduce using rule 73 (exp -> exp MINUS exp .)
    INTEGER         reduce using rule 73 (exp -> exp MINUS exp .)
    FLOAT           reduce using rule 73 (exp -> exp MINUS exp .)
    ALL             reduce using rule 73 (exp -> exp MINUS exp .)
    NOT             reduce using rule 73 (exp -> exp MINUS exp .)
    TRUE            reduce using rule 73 (exp -> exp MINUS exp .)
    FALSE           reduce using rule 73 (exp -> exp MINUS exp .)
    FUNCTION        reduce using rule 73 (exp -> exp MINUS exp .)
    $end            reduce using rule 73 (exp -> exp MINUS exp .)
    CASE            reduce using rule 73 (exp -> exp MINUS exp .)
    OTHERWISE       reduce using rule 73 (exp -> exp MINUS exp .)
    CATCH           reduce using rule 73 (exp -> exp MINUS exp .)
    END             reduce using rule 73 (exp -> exp MINUS exp .)
    ELSE            reduce using rule 73 (exp -> exp MINUS exp .)
    RBRACKET        reduce using rule 73 (exp -> exp MINUS exp .)
    COMMA           reduce using rule 73 (exp -> exp MINUS exp .)
    RPAREN          reduce using rule 73 (exp -> exp MINUS exp .)
    RBRACE          reduce using rule 73 (exp -> exp MINUS exp .)
    ELOR            shift and go to state 63
    ELAND           shift and go to state 62
    OROR            shift and go to state 60
    ANDAND          shift and go to state 79
    EQUALEQUAL      shift and go to state 73
    NOTEQUAL        shift and go to state 61
    LT              shift and go to state 70
    GT              shift and go to state 74
    LE              shift and go to state 66
    GE              shift and go to state 78
    COLON           shift and go to state 71

  ! ELOR            [ reduce using rule 73 (exp -> exp MINUS exp .) ]
  ! ELAND           [ reduce using rule 73 (exp -> exp MINUS exp .) ]
  ! OROR            [ reduce using rule 73 (exp -> exp MINUS exp .) ]
  ! ANDAND          [ reduce using rule 73 (exp -> exp MINUS exp .) ]
  ! EQUALEQUAL      [ reduce using rule 73 (exp -> exp MINUS exp .) ]
  ! NOTEQUAL        [ reduce using rule 73 (exp -> exp MINUS exp .) ]
  ! LT              [ reduce using rule 73 (exp -> exp MINUS exp .) ]
  ! GT              [ reduce using rule 73 (exp -> exp MINUS exp .) ]
  ! LE              [ reduce using rule 73 (exp -> exp MINUS exp .) ]
  ! GE              [ reduce using rule 73 (exp -> exp MINUS exp .) ]
  ! COLON           [ reduce using rule 73 (exp -> exp MINUS exp .) ]
  ! TRANSPOSE       [ shift and go to state 68 ]
  ! MPOWER          [ shift and go to state 80 ]
  ! POWER           [ shift and go to state 67 ]
  ! MTIMES          [ shift and go to state 64 ]
  ! MDIVIDE         [ shift and go to state 76 ]
  ! TIMES           [ shift and go to state 77 ]
  ! DIVIDE          [ shift and go to state 75 ]
  ! BACKSLASH       [ shift and go to state 69 ]
  ! PLUS            [ shift and go to state 72 ]
  ! MINUS           [ shift and go to state 65 ]


state 113

    (63) exp -> exp LE exp .
    (41) exp -> exp . TRANSPOSE
    (55) exp -> exp . ELOR exp
    (56) exp -> exp . ELAND exp
    (57) exp -> exp . OROR exp
    (58) exp -> exp . ANDAND exp
    (59) exp -> exp . EQUALEQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . LE exp
    (64) exp -> exp . GE exp
    (65) exp -> exp . MPOWER exp
    (66) exp -> exp . POWER exp
    (67) exp -> exp . MTIMES exp
    (68) exp -> exp . MDIVIDE exp
    (69) exp -> exp . TIMES exp
    (70) exp -> exp . DIVIDE exp
    (71) exp -> exp . BACKSLASH exp
    (72) exp -> exp . PLUS exp
    (73) exp -> exp . MINUS exp
    (74) exp -> exp . COLON exp COLON exp
    (75) exp -> exp . COLON exp

    TRANSPOSE       reduce using rule 63 (exp -> exp LE exp .)
    EQUALEQUAL      reduce using rule 63 (exp -> exp LE exp .)
    NOTEQUAL        reduce using rule 63 (exp -> exp LE exp .)
    LT              reduce using rule 63 (exp -> exp LE exp .)
    GT              reduce using rule 63 (exp -> exp LE exp .)
    LE              reduce using rule 63 (exp -> exp LE exp .)
    GE              reduce using rule 63 (exp -> exp LE exp .)
    MPOWER          reduce using rule 63 (exp -> exp LE exp .)
    POWER           reduce using rule 63 (exp -> exp LE exp .)
    MTIMES          reduce using rule 63 (exp -> exp LE exp .)
    MDIVIDE         reduce using rule 63 (exp -> exp LE exp .)
    TIMES           reduce using rule 63 (exp -> exp LE exp .)
    DIVIDE          reduce using rule 63 (exp -> exp LE exp .)
    BACKSLASH       reduce using rule 63 (exp -> exp LE exp .)
    PLUS            reduce using rule 63 (exp -> exp LE exp .)
    MINUS           reduce using rule 63 (exp -> exp LE exp .)
    COLON           reduce using rule 63 (exp -> exp LE exp .)
    SEMICOLON       reduce using rule 63 (exp -> exp LE exp .)
    COMMENT         reduce using rule 63 (exp -> exp LE exp .)
    IF              reduce using rule 63 (exp -> exp LE exp .)
    SWITCH          reduce using rule 63 (exp -> exp LE exp .)
    TRY             reduce using rule 63 (exp -> exp LE exp .)
    FOR             reduce using rule 63 (exp -> exp LE exp .)
    WHILE           reduce using rule 63 (exp -> exp LE exp .)
    IDENTIFIER      reduce using rule 63 (exp -> exp LE exp .)
    RETURN          reduce using rule 63 (exp -> exp LE exp .)
    LBRACKET        reduce using rule 63 (exp -> exp LE exp .)
    CLC             reduce using rule 63 (exp -> exp LE exp .)
    CLOSE           reduce using rule 63 (exp -> exp LE exp .)
    CLEAR           reduce using rule 63 (exp -> exp LE exp .)
    BREAK           reduce using rule 63 (exp -> exp LE exp .)
    CONTINUE        reduce using rule 63 (exp -> exp LE exp .)
    STRING          reduce using rule 63 (exp -> exp LE exp .)
    DIRECTORY       reduce using rule 63 (exp -> exp LE exp .)
    LPAREN          reduce using rule 63 (exp -> exp LE exp .)
    INTEGER         reduce using rule 63 (exp -> exp LE exp .)
    FLOAT           reduce using rule 63 (exp -> exp LE exp .)
    ALL             reduce using rule 63 (exp -> exp LE exp .)
    NOT             reduce using rule 63 (exp -> exp LE exp .)
    TRUE            reduce using rule 63 (exp -> exp LE exp .)
    FALSE           reduce using rule 63 (exp -> exp LE exp .)
    FUNCTION        reduce using rule 63 (exp -> exp LE exp .)
    $end            reduce using rule 63 (exp -> exp LE exp .)
    CASE            reduce using rule 63 (exp -> exp LE exp .)
    OTHERWISE       reduce using rule 63 (exp -> exp LE exp .)
    CATCH           reduce using rule 63 (exp -> exp LE exp .)
    END             reduce using rule 63 (exp -> exp LE exp .)
    ELSE            reduce using rule 63 (exp -> exp LE exp .)
    RBRACKET        reduce using rule 63 (exp -> exp LE exp .)
    COMMA           reduce using rule 63 (exp -> exp LE exp .)
    RPAREN          reduce using rule 63 (exp -> exp LE exp .)
    RBRACE          reduce using rule 63 (exp -> exp LE exp .)
    ELOR            shift and go to state 63
    ELAND           shift and go to state 62
    OROR            shift and go to state 60
    ANDAND          shift and go to state 79

  ! ELOR            [ reduce using rule 63 (exp -> exp LE exp .) ]
  ! ELAND           [ reduce using rule 63 (exp -> exp LE exp .) ]
  ! OROR            [ reduce using rule 63 (exp -> exp LE exp .) ]
  ! ANDAND          [ reduce using rule 63 (exp -> exp LE exp .) ]
  ! TRANSPOSE       [ shift and go to state 68 ]
  ! EQUALEQUAL      [ shift and go to state 73 ]
  ! NOTEQUAL        [ shift and go to state 61 ]
  ! LT              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 74 ]
  ! LE              [ shift and go to state 66 ]
  ! GE              [ shift and go to state 78 ]
  ! MPOWER          [ shift and go to state 80 ]
  ! POWER           [ shift and go to state 67 ]
  ! MTIMES          [ shift and go to state 64 ]
  ! MDIVIDE         [ shift and go to state 76 ]
  ! TIMES           [ shift and go to state 77 ]
  ! DIVIDE          [ shift and go to state 75 ]
  ! BACKSLASH       [ shift and go to state 69 ]
  ! PLUS            [ shift and go to state 72 ]
  ! MINUS           [ shift and go to state 65 ]
  ! COLON           [ shift and go to state 71 ]


state 114

    (66) exp -> exp POWER exp .
    (41) exp -> exp . TRANSPOSE
    (55) exp -> exp . ELOR exp
    (56) exp -> exp . ELAND exp
    (57) exp -> exp . OROR exp
    (58) exp -> exp . ANDAND exp
    (59) exp -> exp . EQUALEQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . LE exp
    (64) exp -> exp . GE exp
    (65) exp -> exp . MPOWER exp
    (66) exp -> exp . POWER exp
    (67) exp -> exp . MTIMES exp
    (68) exp -> exp . MDIVIDE exp
    (69) exp -> exp . TIMES exp
    (70) exp -> exp . DIVIDE exp
    (71) exp -> exp . BACKSLASH exp
    (72) exp -> exp . PLUS exp
    (73) exp -> exp . MINUS exp
    (74) exp -> exp . COLON exp COLON exp
    (75) exp -> exp . COLON exp

    TRANSPOSE       reduce using rule 66 (exp -> exp POWER exp .)
    MPOWER          reduce using rule 66 (exp -> exp POWER exp .)
    POWER           reduce using rule 66 (exp -> exp POWER exp .)
    SEMICOLON       reduce using rule 66 (exp -> exp POWER exp .)
    COMMENT         reduce using rule 66 (exp -> exp POWER exp .)
    IF              reduce using rule 66 (exp -> exp POWER exp .)
    SWITCH          reduce using rule 66 (exp -> exp POWER exp .)
    TRY             reduce using rule 66 (exp -> exp POWER exp .)
    FOR             reduce using rule 66 (exp -> exp POWER exp .)
    WHILE           reduce using rule 66 (exp -> exp POWER exp .)
    IDENTIFIER      reduce using rule 66 (exp -> exp POWER exp .)
    RETURN          reduce using rule 66 (exp -> exp POWER exp .)
    LBRACKET        reduce using rule 66 (exp -> exp POWER exp .)
    CLC             reduce using rule 66 (exp -> exp POWER exp .)
    CLOSE           reduce using rule 66 (exp -> exp POWER exp .)
    CLEAR           reduce using rule 66 (exp -> exp POWER exp .)
    BREAK           reduce using rule 66 (exp -> exp POWER exp .)
    CONTINUE        reduce using rule 66 (exp -> exp POWER exp .)
    STRING          reduce using rule 66 (exp -> exp POWER exp .)
    DIRECTORY       reduce using rule 66 (exp -> exp POWER exp .)
    LPAREN          reduce using rule 66 (exp -> exp POWER exp .)
    INTEGER         reduce using rule 66 (exp -> exp POWER exp .)
    FLOAT           reduce using rule 66 (exp -> exp POWER exp .)
    ALL             reduce using rule 66 (exp -> exp POWER exp .)
    NOT             reduce using rule 66 (exp -> exp POWER exp .)
    TRUE            reduce using rule 66 (exp -> exp POWER exp .)
    FALSE           reduce using rule 66 (exp -> exp POWER exp .)
    FUNCTION        reduce using rule 66 (exp -> exp POWER exp .)
    $end            reduce using rule 66 (exp -> exp POWER exp .)
    CASE            reduce using rule 66 (exp -> exp POWER exp .)
    OTHERWISE       reduce using rule 66 (exp -> exp POWER exp .)
    CATCH           reduce using rule 66 (exp -> exp POWER exp .)
    END             reduce using rule 66 (exp -> exp POWER exp .)
    ELSE            reduce using rule 66 (exp -> exp POWER exp .)
    RBRACKET        reduce using rule 66 (exp -> exp POWER exp .)
    COMMA           reduce using rule 66 (exp -> exp POWER exp .)
    RPAREN          reduce using rule 66 (exp -> exp POWER exp .)
    RBRACE          reduce using rule 66 (exp -> exp POWER exp .)
    ELOR            shift and go to state 63
    ELAND           shift and go to state 62
    OROR            shift and go to state 60
    ANDAND          shift and go to state 79
    EQUALEQUAL      shift and go to state 73
    NOTEQUAL        shift and go to state 61
    LT              shift and go to state 70
    GT              shift and go to state 74
    LE              shift and go to state 66
    GE              shift and go to state 78
    MTIMES          shift and go to state 64
    MDIVIDE         shift and go to state 76
    TIMES           shift and go to state 77
    DIVIDE          shift and go to state 75
    BACKSLASH       shift and go to state 69
    PLUS            shift and go to state 72
    MINUS           shift and go to state 65
    COLON           shift and go to state 71

  ! ELOR            [ reduce using rule 66 (exp -> exp POWER exp .) ]
  ! ELAND           [ reduce using rule 66 (exp -> exp POWER exp .) ]
  ! OROR            [ reduce using rule 66 (exp -> exp POWER exp .) ]
  ! ANDAND          [ reduce using rule 66 (exp -> exp POWER exp .) ]
  ! EQUALEQUAL      [ reduce using rule 66 (exp -> exp POWER exp .) ]
  ! NOTEQUAL        [ reduce using rule 66 (exp -> exp POWER exp .) ]
  ! LT              [ reduce using rule 66 (exp -> exp POWER exp .) ]
  ! GT              [ reduce using rule 66 (exp -> exp POWER exp .) ]
  ! LE              [ reduce using rule 66 (exp -> exp POWER exp .) ]
  ! GE              [ reduce using rule 66 (exp -> exp POWER exp .) ]
  ! MTIMES          [ reduce using rule 66 (exp -> exp POWER exp .) ]
  ! MDIVIDE         [ reduce using rule 66 (exp -> exp POWER exp .) ]
  ! TIMES           [ reduce using rule 66 (exp -> exp POWER exp .) ]
  ! DIVIDE          [ reduce using rule 66 (exp -> exp POWER exp .) ]
  ! BACKSLASH       [ reduce using rule 66 (exp -> exp POWER exp .) ]
  ! PLUS            [ reduce using rule 66 (exp -> exp POWER exp .) ]
  ! MINUS           [ reduce using rule 66 (exp -> exp POWER exp .) ]
  ! COLON           [ reduce using rule 66 (exp -> exp POWER exp .) ]
  ! TRANSPOSE       [ shift and go to state 68 ]
  ! MPOWER          [ shift and go to state 80 ]
  ! POWER           [ shift and go to state 67 ]


state 115

    (71) exp -> exp BACKSLASH exp .
    (41) exp -> exp . TRANSPOSE
    (55) exp -> exp . ELOR exp
    (56) exp -> exp . ELAND exp
    (57) exp -> exp . OROR exp
    (58) exp -> exp . ANDAND exp
    (59) exp -> exp . EQUALEQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . LE exp
    (64) exp -> exp . GE exp
    (65) exp -> exp . MPOWER exp
    (66) exp -> exp . POWER exp
    (67) exp -> exp . MTIMES exp
    (68) exp -> exp . MDIVIDE exp
    (69) exp -> exp . TIMES exp
    (70) exp -> exp . DIVIDE exp
    (71) exp -> exp . BACKSLASH exp
    (72) exp -> exp . PLUS exp
    (73) exp -> exp . MINUS exp
    (74) exp -> exp . COLON exp COLON exp
    (75) exp -> exp . COLON exp

    TRANSPOSE       reduce using rule 71 (exp -> exp BACKSLASH exp .)
    MPOWER          reduce using rule 71 (exp -> exp BACKSLASH exp .)
    POWER           reduce using rule 71 (exp -> exp BACKSLASH exp .)
    MTIMES          reduce using rule 71 (exp -> exp BACKSLASH exp .)
    MDIVIDE         reduce using rule 71 (exp -> exp BACKSLASH exp .)
    TIMES           reduce using rule 71 (exp -> exp BACKSLASH exp .)
    DIVIDE          reduce using rule 71 (exp -> exp BACKSLASH exp .)
    BACKSLASH       reduce using rule 71 (exp -> exp BACKSLASH exp .)
    SEMICOLON       reduce using rule 71 (exp -> exp BACKSLASH exp .)
    COMMENT         reduce using rule 71 (exp -> exp BACKSLASH exp .)
    IF              reduce using rule 71 (exp -> exp BACKSLASH exp .)
    SWITCH          reduce using rule 71 (exp -> exp BACKSLASH exp .)
    TRY             reduce using rule 71 (exp -> exp BACKSLASH exp .)
    FOR             reduce using rule 71 (exp -> exp BACKSLASH exp .)
    WHILE           reduce using rule 71 (exp -> exp BACKSLASH exp .)
    IDENTIFIER      reduce using rule 71 (exp -> exp BACKSLASH exp .)
    RETURN          reduce using rule 71 (exp -> exp BACKSLASH exp .)
    LBRACKET        reduce using rule 71 (exp -> exp BACKSLASH exp .)
    CLC             reduce using rule 71 (exp -> exp BACKSLASH exp .)
    CLOSE           reduce using rule 71 (exp -> exp BACKSLASH exp .)
    CLEAR           reduce using rule 71 (exp -> exp BACKSLASH exp .)
    BREAK           reduce using rule 71 (exp -> exp BACKSLASH exp .)
    CONTINUE        reduce using rule 71 (exp -> exp BACKSLASH exp .)
    STRING          reduce using rule 71 (exp -> exp BACKSLASH exp .)
    DIRECTORY       reduce using rule 71 (exp -> exp BACKSLASH exp .)
    LPAREN          reduce using rule 71 (exp -> exp BACKSLASH exp .)
    INTEGER         reduce using rule 71 (exp -> exp BACKSLASH exp .)
    FLOAT           reduce using rule 71 (exp -> exp BACKSLASH exp .)
    ALL             reduce using rule 71 (exp -> exp BACKSLASH exp .)
    NOT             reduce using rule 71 (exp -> exp BACKSLASH exp .)
    TRUE            reduce using rule 71 (exp -> exp BACKSLASH exp .)
    FALSE           reduce using rule 71 (exp -> exp BACKSLASH exp .)
    FUNCTION        reduce using rule 71 (exp -> exp BACKSLASH exp .)
    $end            reduce using rule 71 (exp -> exp BACKSLASH exp .)
    CASE            reduce using rule 71 (exp -> exp BACKSLASH exp .)
    OTHERWISE       reduce using rule 71 (exp -> exp BACKSLASH exp .)
    CATCH           reduce using rule 71 (exp -> exp BACKSLASH exp .)
    END             reduce using rule 71 (exp -> exp BACKSLASH exp .)
    ELSE            reduce using rule 71 (exp -> exp BACKSLASH exp .)
    RBRACKET        reduce using rule 71 (exp -> exp BACKSLASH exp .)
    COMMA           reduce using rule 71 (exp -> exp BACKSLASH exp .)
    RPAREN          reduce using rule 71 (exp -> exp BACKSLASH exp .)
    RBRACE          reduce using rule 71 (exp -> exp BACKSLASH exp .)
    ELOR            shift and go to state 63
    ELAND           shift and go to state 62
    OROR            shift and go to state 60
    ANDAND          shift and go to state 79
    EQUALEQUAL      shift and go to state 73
    NOTEQUAL        shift and go to state 61
    LT              shift and go to state 70
    GT              shift and go to state 74
    LE              shift and go to state 66
    GE              shift and go to state 78
    PLUS            shift and go to state 72
    MINUS           shift and go to state 65
    COLON           shift and go to state 71

  ! ELOR            [ reduce using rule 71 (exp -> exp BACKSLASH exp .) ]
  ! ELAND           [ reduce using rule 71 (exp -> exp BACKSLASH exp .) ]
  ! OROR            [ reduce using rule 71 (exp -> exp BACKSLASH exp .) ]
  ! ANDAND          [ reduce using rule 71 (exp -> exp BACKSLASH exp .) ]
  ! EQUALEQUAL      [ reduce using rule 71 (exp -> exp BACKSLASH exp .) ]
  ! NOTEQUAL        [ reduce using rule 71 (exp -> exp BACKSLASH exp .) ]
  ! LT              [ reduce using rule 71 (exp -> exp BACKSLASH exp .) ]
  ! GT              [ reduce using rule 71 (exp -> exp BACKSLASH exp .) ]
  ! LE              [ reduce using rule 71 (exp -> exp BACKSLASH exp .) ]
  ! GE              [ reduce using rule 71 (exp -> exp BACKSLASH exp .) ]
  ! PLUS            [ reduce using rule 71 (exp -> exp BACKSLASH exp .) ]
  ! MINUS           [ reduce using rule 71 (exp -> exp BACKSLASH exp .) ]
  ! COLON           [ reduce using rule 71 (exp -> exp BACKSLASH exp .) ]
  ! TRANSPOSE       [ shift and go to state 68 ]
  ! MPOWER          [ shift and go to state 80 ]
  ! POWER           [ shift and go to state 67 ]
  ! MTIMES          [ shift and go to state 64 ]
  ! MDIVIDE         [ shift and go to state 76 ]
  ! TIMES           [ shift and go to state 77 ]
  ! DIVIDE          [ shift and go to state 75 ]
  ! BACKSLASH       [ shift and go to state 69 ]


state 116

    (61) exp -> exp LT exp .
    (41) exp -> exp . TRANSPOSE
    (55) exp -> exp . ELOR exp
    (56) exp -> exp . ELAND exp
    (57) exp -> exp . OROR exp
    (58) exp -> exp . ANDAND exp
    (59) exp -> exp . EQUALEQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . LE exp
    (64) exp -> exp . GE exp
    (65) exp -> exp . MPOWER exp
    (66) exp -> exp . POWER exp
    (67) exp -> exp . MTIMES exp
    (68) exp -> exp . MDIVIDE exp
    (69) exp -> exp . TIMES exp
    (70) exp -> exp . DIVIDE exp
    (71) exp -> exp . BACKSLASH exp
    (72) exp -> exp . PLUS exp
    (73) exp -> exp . MINUS exp
    (74) exp -> exp . COLON exp COLON exp
    (75) exp -> exp . COLON exp

    TRANSPOSE       reduce using rule 61 (exp -> exp LT exp .)
    EQUALEQUAL      reduce using rule 61 (exp -> exp LT exp .)
    NOTEQUAL        reduce using rule 61 (exp -> exp LT exp .)
    LT              reduce using rule 61 (exp -> exp LT exp .)
    GT              reduce using rule 61 (exp -> exp LT exp .)
    LE              reduce using rule 61 (exp -> exp LT exp .)
    GE              reduce using rule 61 (exp -> exp LT exp .)
    MPOWER          reduce using rule 61 (exp -> exp LT exp .)
    POWER           reduce using rule 61 (exp -> exp LT exp .)
    MTIMES          reduce using rule 61 (exp -> exp LT exp .)
    MDIVIDE         reduce using rule 61 (exp -> exp LT exp .)
    TIMES           reduce using rule 61 (exp -> exp LT exp .)
    DIVIDE          reduce using rule 61 (exp -> exp LT exp .)
    BACKSLASH       reduce using rule 61 (exp -> exp LT exp .)
    PLUS            reduce using rule 61 (exp -> exp LT exp .)
    MINUS           reduce using rule 61 (exp -> exp LT exp .)
    COLON           reduce using rule 61 (exp -> exp LT exp .)
    SEMICOLON       reduce using rule 61 (exp -> exp LT exp .)
    COMMENT         reduce using rule 61 (exp -> exp LT exp .)
    IF              reduce using rule 61 (exp -> exp LT exp .)
    SWITCH          reduce using rule 61 (exp -> exp LT exp .)
    TRY             reduce using rule 61 (exp -> exp LT exp .)
    FOR             reduce using rule 61 (exp -> exp LT exp .)
    WHILE           reduce using rule 61 (exp -> exp LT exp .)
    IDENTIFIER      reduce using rule 61 (exp -> exp LT exp .)
    RETURN          reduce using rule 61 (exp -> exp LT exp .)
    LBRACKET        reduce using rule 61 (exp -> exp LT exp .)
    CLC             reduce using rule 61 (exp -> exp LT exp .)
    CLOSE           reduce using rule 61 (exp -> exp LT exp .)
    CLEAR           reduce using rule 61 (exp -> exp LT exp .)
    BREAK           reduce using rule 61 (exp -> exp LT exp .)
    CONTINUE        reduce using rule 61 (exp -> exp LT exp .)
    STRING          reduce using rule 61 (exp -> exp LT exp .)
    DIRECTORY       reduce using rule 61 (exp -> exp LT exp .)
    LPAREN          reduce using rule 61 (exp -> exp LT exp .)
    INTEGER         reduce using rule 61 (exp -> exp LT exp .)
    FLOAT           reduce using rule 61 (exp -> exp LT exp .)
    ALL             reduce using rule 61 (exp -> exp LT exp .)
    NOT             reduce using rule 61 (exp -> exp LT exp .)
    TRUE            reduce using rule 61 (exp -> exp LT exp .)
    FALSE           reduce using rule 61 (exp -> exp LT exp .)
    FUNCTION        reduce using rule 61 (exp -> exp LT exp .)
    $end            reduce using rule 61 (exp -> exp LT exp .)
    CASE            reduce using rule 61 (exp -> exp LT exp .)
    OTHERWISE       reduce using rule 61 (exp -> exp LT exp .)
    CATCH           reduce using rule 61 (exp -> exp LT exp .)
    END             reduce using rule 61 (exp -> exp LT exp .)
    ELSE            reduce using rule 61 (exp -> exp LT exp .)
    RBRACKET        reduce using rule 61 (exp -> exp LT exp .)
    COMMA           reduce using rule 61 (exp -> exp LT exp .)
    RPAREN          reduce using rule 61 (exp -> exp LT exp .)
    RBRACE          reduce using rule 61 (exp -> exp LT exp .)
    ELOR            shift and go to state 63
    ELAND           shift and go to state 62
    OROR            shift and go to state 60
    ANDAND          shift and go to state 79

  ! ELOR            [ reduce using rule 61 (exp -> exp LT exp .) ]
  ! ELAND           [ reduce using rule 61 (exp -> exp LT exp .) ]
  ! OROR            [ reduce using rule 61 (exp -> exp LT exp .) ]
  ! ANDAND          [ reduce using rule 61 (exp -> exp LT exp .) ]
  ! TRANSPOSE       [ shift and go to state 68 ]
  ! EQUALEQUAL      [ shift and go to state 73 ]
  ! NOTEQUAL        [ shift and go to state 61 ]
  ! LT              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 74 ]
  ! LE              [ shift and go to state 66 ]
  ! GE              [ shift and go to state 78 ]
  ! MPOWER          [ shift and go to state 80 ]
  ! POWER           [ shift and go to state 67 ]
  ! MTIMES          [ shift and go to state 64 ]
  ! MDIVIDE         [ shift and go to state 76 ]
  ! TIMES           [ shift and go to state 77 ]
  ! DIVIDE          [ shift and go to state 75 ]
  ! BACKSLASH       [ shift and go to state 69 ]
  ! PLUS            [ shift and go to state 72 ]
  ! MINUS           [ shift and go to state 65 ]
  ! COLON           [ shift and go to state 71 ]


state 117

    (74) exp -> exp COLON exp . COLON exp
    (75) exp -> exp COLON exp .
    (41) exp -> exp . TRANSPOSE
    (55) exp -> exp . ELOR exp
    (56) exp -> exp . ELAND exp
    (57) exp -> exp . OROR exp
    (58) exp -> exp . ANDAND exp
    (59) exp -> exp . EQUALEQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . LE exp
    (64) exp -> exp . GE exp
    (65) exp -> exp . MPOWER exp
    (66) exp -> exp . POWER exp
    (67) exp -> exp . MTIMES exp
    (68) exp -> exp . MDIVIDE exp
    (69) exp -> exp . TIMES exp
    (70) exp -> exp . DIVIDE exp
    (71) exp -> exp . BACKSLASH exp
    (72) exp -> exp . PLUS exp
    (73) exp -> exp . MINUS exp
    (74) exp -> exp . COLON exp COLON exp
    (75) exp -> exp . COLON exp

    TRANSPOSE       reduce using rule 75 (exp -> exp COLON exp .)
    MPOWER          reduce using rule 75 (exp -> exp COLON exp .)
    POWER           reduce using rule 75 (exp -> exp COLON exp .)
    MTIMES          reduce using rule 75 (exp -> exp COLON exp .)
    MDIVIDE         reduce using rule 75 (exp -> exp COLON exp .)
    TIMES           reduce using rule 75 (exp -> exp COLON exp .)
    DIVIDE          reduce using rule 75 (exp -> exp COLON exp .)
    BACKSLASH       reduce using rule 75 (exp -> exp COLON exp .)
    PLUS            reduce using rule 75 (exp -> exp COLON exp .)
    MINUS           reduce using rule 75 (exp -> exp COLON exp .)
    COLON           reduce using rule 75 (exp -> exp COLON exp .)
    SEMICOLON       reduce using rule 75 (exp -> exp COLON exp .)
    COMMENT         reduce using rule 75 (exp -> exp COLON exp .)
    IF              reduce using rule 75 (exp -> exp COLON exp .)
    SWITCH          reduce using rule 75 (exp -> exp COLON exp .)
    TRY             reduce using rule 75 (exp -> exp COLON exp .)
    FOR             reduce using rule 75 (exp -> exp COLON exp .)
    WHILE           reduce using rule 75 (exp -> exp COLON exp .)
    IDENTIFIER      reduce using rule 75 (exp -> exp COLON exp .)
    RETURN          reduce using rule 75 (exp -> exp COLON exp .)
    LBRACKET        reduce using rule 75 (exp -> exp COLON exp .)
    CLC             reduce using rule 75 (exp -> exp COLON exp .)
    CLOSE           reduce using rule 75 (exp -> exp COLON exp .)
    CLEAR           reduce using rule 75 (exp -> exp COLON exp .)
    BREAK           reduce using rule 75 (exp -> exp COLON exp .)
    CONTINUE        reduce using rule 75 (exp -> exp COLON exp .)
    STRING          reduce using rule 75 (exp -> exp COLON exp .)
    DIRECTORY       reduce using rule 75 (exp -> exp COLON exp .)
    LPAREN          reduce using rule 75 (exp -> exp COLON exp .)
    INTEGER         reduce using rule 75 (exp -> exp COLON exp .)
    FLOAT           reduce using rule 75 (exp -> exp COLON exp .)
    ALL             reduce using rule 75 (exp -> exp COLON exp .)
    NOT             reduce using rule 75 (exp -> exp COLON exp .)
    TRUE            reduce using rule 75 (exp -> exp COLON exp .)
    FALSE           reduce using rule 75 (exp -> exp COLON exp .)
    FUNCTION        reduce using rule 75 (exp -> exp COLON exp .)
    $end            reduce using rule 75 (exp -> exp COLON exp .)
    CASE            reduce using rule 75 (exp -> exp COLON exp .)
    OTHERWISE       reduce using rule 75 (exp -> exp COLON exp .)
    CATCH           reduce using rule 75 (exp -> exp COLON exp .)
    END             reduce using rule 75 (exp -> exp COLON exp .)
    ELSE            reduce using rule 75 (exp -> exp COLON exp .)
    RBRACKET        reduce using rule 75 (exp -> exp COLON exp .)
    COMMA           reduce using rule 75 (exp -> exp COLON exp .)
    RPAREN          reduce using rule 75 (exp -> exp COLON exp .)
    RBRACE          reduce using rule 75 (exp -> exp COLON exp .)
    ELOR            shift and go to state 63
    ELAND           shift and go to state 62
    OROR            shift and go to state 60
    ANDAND          shift and go to state 79
    EQUALEQUAL      shift and go to state 73
    NOTEQUAL        shift and go to state 61
    LT              shift and go to state 70
    GT              shift and go to state 74
    LE              shift and go to state 66
    GE              shift and go to state 78

  ! COLON           [ shift and go to state 145 ]
  ! ELOR            [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! ELAND           [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! OROR            [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! ANDAND          [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! EQUALEQUAL      [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! NOTEQUAL        [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! LT              [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! GT              [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! LE              [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! GE              [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! TRANSPOSE       [ shift and go to state 68 ]
  ! MPOWER          [ shift and go to state 80 ]
  ! POWER           [ shift and go to state 67 ]
  ! MTIMES          [ shift and go to state 64 ]
  ! MDIVIDE         [ shift and go to state 76 ]
  ! TIMES           [ shift and go to state 77 ]
  ! DIVIDE          [ shift and go to state 75 ]
  ! BACKSLASH       [ shift and go to state 69 ]
  ! PLUS            [ shift and go to state 72 ]
  ! MINUS           [ shift and go to state 65 ]


state 118

    (72) exp -> exp PLUS exp .
    (41) exp -> exp . TRANSPOSE
    (55) exp -> exp . ELOR exp
    (56) exp -> exp . ELAND exp
    (57) exp -> exp . OROR exp
    (58) exp -> exp . ANDAND exp
    (59) exp -> exp . EQUALEQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . LE exp
    (64) exp -> exp . GE exp
    (65) exp -> exp . MPOWER exp
    (66) exp -> exp . POWER exp
    (67) exp -> exp . MTIMES exp
    (68) exp -> exp . MDIVIDE exp
    (69) exp -> exp . TIMES exp
    (70) exp -> exp . DIVIDE exp
    (71) exp -> exp . BACKSLASH exp
    (72) exp -> exp . PLUS exp
    (73) exp -> exp . MINUS exp
    (74) exp -> exp . COLON exp COLON exp
    (75) exp -> exp . COLON exp

    TRANSPOSE       reduce using rule 72 (exp -> exp PLUS exp .)
    MPOWER          reduce using rule 72 (exp -> exp PLUS exp .)
    POWER           reduce using rule 72 (exp -> exp PLUS exp .)
    MTIMES          reduce using rule 72 (exp -> exp PLUS exp .)
    MDIVIDE         reduce using rule 72 (exp -> exp PLUS exp .)
    TIMES           reduce using rule 72 (exp -> exp PLUS exp .)
    DIVIDE          reduce using rule 72 (exp -> exp PLUS exp .)
    BACKSLASH       reduce using rule 72 (exp -> exp PLUS exp .)
    PLUS            reduce using rule 72 (exp -> exp PLUS exp .)
    MINUS           reduce using rule 72 (exp -> exp PLUS exp .)
    SEMICOLON       reduce using rule 72 (exp -> exp PLUS exp .)
    COMMENT         reduce using rule 72 (exp -> exp PLUS exp .)
    IF              reduce using rule 72 (exp -> exp PLUS exp .)
    SWITCH          reduce using rule 72 (exp -> exp PLUS exp .)
    TRY             reduce using rule 72 (exp -> exp PLUS exp .)
    FOR             reduce using rule 72 (exp -> exp PLUS exp .)
    WHILE           reduce using rule 72 (exp -> exp PLUS exp .)
    IDENTIFIER      reduce using rule 72 (exp -> exp PLUS exp .)
    RETURN          reduce using rule 72 (exp -> exp PLUS exp .)
    LBRACKET        reduce using rule 72 (exp -> exp PLUS exp .)
    CLC             reduce using rule 72 (exp -> exp PLUS exp .)
    CLOSE           reduce using rule 72 (exp -> exp PLUS exp .)
    CLEAR           reduce using rule 72 (exp -> exp PLUS exp .)
    BREAK           reduce using rule 72 (exp -> exp PLUS exp .)
    CONTINUE        reduce using rule 72 (exp -> exp PLUS exp .)
    STRING          reduce using rule 72 (exp -> exp PLUS exp .)
    DIRECTORY       reduce using rule 72 (exp -> exp PLUS exp .)
    LPAREN          reduce using rule 72 (exp -> exp PLUS exp .)
    INTEGER         reduce using rule 72 (exp -> exp PLUS exp .)
    FLOAT           reduce using rule 72 (exp -> exp PLUS exp .)
    ALL             reduce using rule 72 (exp -> exp PLUS exp .)
    NOT             reduce using rule 72 (exp -> exp PLUS exp .)
    TRUE            reduce using rule 72 (exp -> exp PLUS exp .)
    FALSE           reduce using rule 72 (exp -> exp PLUS exp .)
    FUNCTION        reduce using rule 72 (exp -> exp PLUS exp .)
    $end            reduce using rule 72 (exp -> exp PLUS exp .)
    CASE            reduce using rule 72 (exp -> exp PLUS exp .)
    OTHERWISE       reduce using rule 72 (exp -> exp PLUS exp .)
    CATCH           reduce using rule 72 (exp -> exp PLUS exp .)
    END             reduce using rule 72 (exp -> exp PLUS exp .)
    ELSE            reduce using rule 72 (exp -> exp PLUS exp .)
    RBRACKET        reduce using rule 72 (exp -> exp PLUS exp .)
    COMMA           reduce using rule 72 (exp -> exp PLUS exp .)
    RPAREN          reduce using rule 72 (exp -> exp PLUS exp .)
    RBRACE          reduce using rule 72 (exp -> exp PLUS exp .)
    ELOR            shift and go to state 63
    ELAND           shift and go to state 62
    OROR            shift and go to state 60
    ANDAND          shift and go to state 79
    EQUALEQUAL      shift and go to state 73
    NOTEQUAL        shift and go to state 61
    LT              shift and go to state 70
    GT              shift and go to state 74
    LE              shift and go to state 66
    GE              shift and go to state 78
    COLON           shift and go to state 71

  ! ELOR            [ reduce using rule 72 (exp -> exp PLUS exp .) ]
  ! ELAND           [ reduce using rule 72 (exp -> exp PLUS exp .) ]
  ! OROR            [ reduce using rule 72 (exp -> exp PLUS exp .) ]
  ! ANDAND          [ reduce using rule 72 (exp -> exp PLUS exp .) ]
  ! EQUALEQUAL      [ reduce using rule 72 (exp -> exp PLUS exp .) ]
  ! NOTEQUAL        [ reduce using rule 72 (exp -> exp PLUS exp .) ]
  ! LT              [ reduce using rule 72 (exp -> exp PLUS exp .) ]
  ! GT              [ reduce using rule 72 (exp -> exp PLUS exp .) ]
  ! LE              [ reduce using rule 72 (exp -> exp PLUS exp .) ]
  ! GE              [ reduce using rule 72 (exp -> exp PLUS exp .) ]
  ! COLON           [ reduce using rule 72 (exp -> exp PLUS exp .) ]
  ! TRANSPOSE       [ shift and go to state 68 ]
  ! MPOWER          [ shift and go to state 80 ]
  ! POWER           [ shift and go to state 67 ]
  ! MTIMES          [ shift and go to state 64 ]
  ! MDIVIDE         [ shift and go to state 76 ]
  ! TIMES           [ shift and go to state 77 ]
  ! DIVIDE          [ shift and go to state 75 ]
  ! BACKSLASH       [ shift and go to state 69 ]
  ! PLUS            [ shift and go to state 72 ]
  ! MINUS           [ shift and go to state 65 ]


state 119

    (59) exp -> exp EQUALEQUAL exp .
    (41) exp -> exp . TRANSPOSE
    (55) exp -> exp . ELOR exp
    (56) exp -> exp . ELAND exp
    (57) exp -> exp . OROR exp
    (58) exp -> exp . ANDAND exp
    (59) exp -> exp . EQUALEQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . LE exp
    (64) exp -> exp . GE exp
    (65) exp -> exp . MPOWER exp
    (66) exp -> exp . POWER exp
    (67) exp -> exp . MTIMES exp
    (68) exp -> exp . MDIVIDE exp
    (69) exp -> exp . TIMES exp
    (70) exp -> exp . DIVIDE exp
    (71) exp -> exp . BACKSLASH exp
    (72) exp -> exp . PLUS exp
    (73) exp -> exp . MINUS exp
    (74) exp -> exp . COLON exp COLON exp
    (75) exp -> exp . COLON exp

    TRANSPOSE       reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    EQUALEQUAL      reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    NOTEQUAL        reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    LT              reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    GT              reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    LE              reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    GE              reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    MPOWER          reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    POWER           reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    MTIMES          reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    MDIVIDE         reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    TIMES           reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    DIVIDE          reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    BACKSLASH       reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    PLUS            reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    MINUS           reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    COLON           reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    SEMICOLON       reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    COMMENT         reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    IF              reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    SWITCH          reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    TRY             reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    FOR             reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    WHILE           reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    IDENTIFIER      reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    RETURN          reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    LBRACKET        reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    CLC             reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    CLOSE           reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    CLEAR           reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    BREAK           reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    CONTINUE        reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    STRING          reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    DIRECTORY       reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    LPAREN          reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    INTEGER         reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    FLOAT           reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    ALL             reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    NOT             reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    TRUE            reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    FALSE           reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    FUNCTION        reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    $end            reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    CASE            reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    OTHERWISE       reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    CATCH           reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    END             reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    ELSE            reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    RBRACKET        reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    COMMA           reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    RPAREN          reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    RBRACE          reduce using rule 59 (exp -> exp EQUALEQUAL exp .)
    ELOR            shift and go to state 63
    ELAND           shift and go to state 62
    OROR            shift and go to state 60
    ANDAND          shift and go to state 79

  ! ELOR            [ reduce using rule 59 (exp -> exp EQUALEQUAL exp .) ]
  ! ELAND           [ reduce using rule 59 (exp -> exp EQUALEQUAL exp .) ]
  ! OROR            [ reduce using rule 59 (exp -> exp EQUALEQUAL exp .) ]
  ! ANDAND          [ reduce using rule 59 (exp -> exp EQUALEQUAL exp .) ]
  ! TRANSPOSE       [ shift and go to state 68 ]
  ! EQUALEQUAL      [ shift and go to state 73 ]
  ! NOTEQUAL        [ shift and go to state 61 ]
  ! LT              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 74 ]
  ! LE              [ shift and go to state 66 ]
  ! GE              [ shift and go to state 78 ]
  ! MPOWER          [ shift and go to state 80 ]
  ! POWER           [ shift and go to state 67 ]
  ! MTIMES          [ shift and go to state 64 ]
  ! MDIVIDE         [ shift and go to state 76 ]
  ! TIMES           [ shift and go to state 77 ]
  ! DIVIDE          [ shift and go to state 75 ]
  ! BACKSLASH       [ shift and go to state 69 ]
  ! PLUS            [ shift and go to state 72 ]
  ! MINUS           [ shift and go to state 65 ]
  ! COLON           [ shift and go to state 71 ]


state 120

    (62) exp -> exp GT exp .
    (41) exp -> exp . TRANSPOSE
    (55) exp -> exp . ELOR exp
    (56) exp -> exp . ELAND exp
    (57) exp -> exp . OROR exp
    (58) exp -> exp . ANDAND exp
    (59) exp -> exp . EQUALEQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . LE exp
    (64) exp -> exp . GE exp
    (65) exp -> exp . MPOWER exp
    (66) exp -> exp . POWER exp
    (67) exp -> exp . MTIMES exp
    (68) exp -> exp . MDIVIDE exp
    (69) exp -> exp . TIMES exp
    (70) exp -> exp . DIVIDE exp
    (71) exp -> exp . BACKSLASH exp
    (72) exp -> exp . PLUS exp
    (73) exp -> exp . MINUS exp
    (74) exp -> exp . COLON exp COLON exp
    (75) exp -> exp . COLON exp

    TRANSPOSE       reduce using rule 62 (exp -> exp GT exp .)
    EQUALEQUAL      reduce using rule 62 (exp -> exp GT exp .)
    NOTEQUAL        reduce using rule 62 (exp -> exp GT exp .)
    LT              reduce using rule 62 (exp -> exp GT exp .)
    GT              reduce using rule 62 (exp -> exp GT exp .)
    LE              reduce using rule 62 (exp -> exp GT exp .)
    GE              reduce using rule 62 (exp -> exp GT exp .)
    MPOWER          reduce using rule 62 (exp -> exp GT exp .)
    POWER           reduce using rule 62 (exp -> exp GT exp .)
    MTIMES          reduce using rule 62 (exp -> exp GT exp .)
    MDIVIDE         reduce using rule 62 (exp -> exp GT exp .)
    TIMES           reduce using rule 62 (exp -> exp GT exp .)
    DIVIDE          reduce using rule 62 (exp -> exp GT exp .)
    BACKSLASH       reduce using rule 62 (exp -> exp GT exp .)
    PLUS            reduce using rule 62 (exp -> exp GT exp .)
    MINUS           reduce using rule 62 (exp -> exp GT exp .)
    COLON           reduce using rule 62 (exp -> exp GT exp .)
    SEMICOLON       reduce using rule 62 (exp -> exp GT exp .)
    COMMENT         reduce using rule 62 (exp -> exp GT exp .)
    IF              reduce using rule 62 (exp -> exp GT exp .)
    SWITCH          reduce using rule 62 (exp -> exp GT exp .)
    TRY             reduce using rule 62 (exp -> exp GT exp .)
    FOR             reduce using rule 62 (exp -> exp GT exp .)
    WHILE           reduce using rule 62 (exp -> exp GT exp .)
    IDENTIFIER      reduce using rule 62 (exp -> exp GT exp .)
    RETURN          reduce using rule 62 (exp -> exp GT exp .)
    LBRACKET        reduce using rule 62 (exp -> exp GT exp .)
    CLC             reduce using rule 62 (exp -> exp GT exp .)
    CLOSE           reduce using rule 62 (exp -> exp GT exp .)
    CLEAR           reduce using rule 62 (exp -> exp GT exp .)
    BREAK           reduce using rule 62 (exp -> exp GT exp .)
    CONTINUE        reduce using rule 62 (exp -> exp GT exp .)
    STRING          reduce using rule 62 (exp -> exp GT exp .)
    DIRECTORY       reduce using rule 62 (exp -> exp GT exp .)
    LPAREN          reduce using rule 62 (exp -> exp GT exp .)
    INTEGER         reduce using rule 62 (exp -> exp GT exp .)
    FLOAT           reduce using rule 62 (exp -> exp GT exp .)
    ALL             reduce using rule 62 (exp -> exp GT exp .)
    NOT             reduce using rule 62 (exp -> exp GT exp .)
    TRUE            reduce using rule 62 (exp -> exp GT exp .)
    FALSE           reduce using rule 62 (exp -> exp GT exp .)
    FUNCTION        reduce using rule 62 (exp -> exp GT exp .)
    $end            reduce using rule 62 (exp -> exp GT exp .)
    CASE            reduce using rule 62 (exp -> exp GT exp .)
    OTHERWISE       reduce using rule 62 (exp -> exp GT exp .)
    CATCH           reduce using rule 62 (exp -> exp GT exp .)
    END             reduce using rule 62 (exp -> exp GT exp .)
    ELSE            reduce using rule 62 (exp -> exp GT exp .)
    RBRACKET        reduce using rule 62 (exp -> exp GT exp .)
    COMMA           reduce using rule 62 (exp -> exp GT exp .)
    RPAREN          reduce using rule 62 (exp -> exp GT exp .)
    RBRACE          reduce using rule 62 (exp -> exp GT exp .)
    ELOR            shift and go to state 63
    ELAND           shift and go to state 62
    OROR            shift and go to state 60
    ANDAND          shift and go to state 79

  ! ELOR            [ reduce using rule 62 (exp -> exp GT exp .) ]
  ! ELAND           [ reduce using rule 62 (exp -> exp GT exp .) ]
  ! OROR            [ reduce using rule 62 (exp -> exp GT exp .) ]
  ! ANDAND          [ reduce using rule 62 (exp -> exp GT exp .) ]
  ! TRANSPOSE       [ shift and go to state 68 ]
  ! EQUALEQUAL      [ shift and go to state 73 ]
  ! NOTEQUAL        [ shift and go to state 61 ]
  ! LT              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 74 ]
  ! LE              [ shift and go to state 66 ]
  ! GE              [ shift and go to state 78 ]
  ! MPOWER          [ shift and go to state 80 ]
  ! POWER           [ shift and go to state 67 ]
  ! MTIMES          [ shift and go to state 64 ]
  ! MDIVIDE         [ shift and go to state 76 ]
  ! TIMES           [ shift and go to state 77 ]
  ! DIVIDE          [ shift and go to state 75 ]
  ! BACKSLASH       [ shift and go to state 69 ]
  ! PLUS            [ shift and go to state 72 ]
  ! MINUS           [ shift and go to state 65 ]
  ! COLON           [ shift and go to state 71 ]


state 121

    (70) exp -> exp DIVIDE exp .
    (41) exp -> exp . TRANSPOSE
    (55) exp -> exp . ELOR exp
    (56) exp -> exp . ELAND exp
    (57) exp -> exp . OROR exp
    (58) exp -> exp . ANDAND exp
    (59) exp -> exp . EQUALEQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . LE exp
    (64) exp -> exp . GE exp
    (65) exp -> exp . MPOWER exp
    (66) exp -> exp . POWER exp
    (67) exp -> exp . MTIMES exp
    (68) exp -> exp . MDIVIDE exp
    (69) exp -> exp . TIMES exp
    (70) exp -> exp . DIVIDE exp
    (71) exp -> exp . BACKSLASH exp
    (72) exp -> exp . PLUS exp
    (73) exp -> exp . MINUS exp
    (74) exp -> exp . COLON exp COLON exp
    (75) exp -> exp . COLON exp

    TRANSPOSE       reduce using rule 70 (exp -> exp DIVIDE exp .)
    MPOWER          reduce using rule 70 (exp -> exp DIVIDE exp .)
    POWER           reduce using rule 70 (exp -> exp DIVIDE exp .)
    MTIMES          reduce using rule 70 (exp -> exp DIVIDE exp .)
    MDIVIDE         reduce using rule 70 (exp -> exp DIVIDE exp .)
    TIMES           reduce using rule 70 (exp -> exp DIVIDE exp .)
    DIVIDE          reduce using rule 70 (exp -> exp DIVIDE exp .)
    BACKSLASH       reduce using rule 70 (exp -> exp DIVIDE exp .)
    SEMICOLON       reduce using rule 70 (exp -> exp DIVIDE exp .)
    COMMENT         reduce using rule 70 (exp -> exp DIVIDE exp .)
    IF              reduce using rule 70 (exp -> exp DIVIDE exp .)
    SWITCH          reduce using rule 70 (exp -> exp DIVIDE exp .)
    TRY             reduce using rule 70 (exp -> exp DIVIDE exp .)
    FOR             reduce using rule 70 (exp -> exp DIVIDE exp .)
    WHILE           reduce using rule 70 (exp -> exp DIVIDE exp .)
    IDENTIFIER      reduce using rule 70 (exp -> exp DIVIDE exp .)
    RETURN          reduce using rule 70 (exp -> exp DIVIDE exp .)
    LBRACKET        reduce using rule 70 (exp -> exp DIVIDE exp .)
    CLC             reduce using rule 70 (exp -> exp DIVIDE exp .)
    CLOSE           reduce using rule 70 (exp -> exp DIVIDE exp .)
    CLEAR           reduce using rule 70 (exp -> exp DIVIDE exp .)
    BREAK           reduce using rule 70 (exp -> exp DIVIDE exp .)
    CONTINUE        reduce using rule 70 (exp -> exp DIVIDE exp .)
    STRING          reduce using rule 70 (exp -> exp DIVIDE exp .)
    DIRECTORY       reduce using rule 70 (exp -> exp DIVIDE exp .)
    LPAREN          reduce using rule 70 (exp -> exp DIVIDE exp .)
    INTEGER         reduce using rule 70 (exp -> exp DIVIDE exp .)
    FLOAT           reduce using rule 70 (exp -> exp DIVIDE exp .)
    ALL             reduce using rule 70 (exp -> exp DIVIDE exp .)
    NOT             reduce using rule 70 (exp -> exp DIVIDE exp .)
    TRUE            reduce using rule 70 (exp -> exp DIVIDE exp .)
    FALSE           reduce using rule 70 (exp -> exp DIVIDE exp .)
    FUNCTION        reduce using rule 70 (exp -> exp DIVIDE exp .)
    $end            reduce using rule 70 (exp -> exp DIVIDE exp .)
    CASE            reduce using rule 70 (exp -> exp DIVIDE exp .)
    OTHERWISE       reduce using rule 70 (exp -> exp DIVIDE exp .)
    CATCH           reduce using rule 70 (exp -> exp DIVIDE exp .)
    END             reduce using rule 70 (exp -> exp DIVIDE exp .)
    ELSE            reduce using rule 70 (exp -> exp DIVIDE exp .)
    RBRACKET        reduce using rule 70 (exp -> exp DIVIDE exp .)
    COMMA           reduce using rule 70 (exp -> exp DIVIDE exp .)
    RPAREN          reduce using rule 70 (exp -> exp DIVIDE exp .)
    RBRACE          reduce using rule 70 (exp -> exp DIVIDE exp .)
    ELOR            shift and go to state 63
    ELAND           shift and go to state 62
    OROR            shift and go to state 60
    ANDAND          shift and go to state 79
    EQUALEQUAL      shift and go to state 73
    NOTEQUAL        shift and go to state 61
    LT              shift and go to state 70
    GT              shift and go to state 74
    LE              shift and go to state 66
    GE              shift and go to state 78
    PLUS            shift and go to state 72
    MINUS           shift and go to state 65
    COLON           shift and go to state 71

  ! ELOR            [ reduce using rule 70 (exp -> exp DIVIDE exp .) ]
  ! ELAND           [ reduce using rule 70 (exp -> exp DIVIDE exp .) ]
  ! OROR            [ reduce using rule 70 (exp -> exp DIVIDE exp .) ]
  ! ANDAND          [ reduce using rule 70 (exp -> exp DIVIDE exp .) ]
  ! EQUALEQUAL      [ reduce using rule 70 (exp -> exp DIVIDE exp .) ]
  ! NOTEQUAL        [ reduce using rule 70 (exp -> exp DIVIDE exp .) ]
  ! LT              [ reduce using rule 70 (exp -> exp DIVIDE exp .) ]
  ! GT              [ reduce using rule 70 (exp -> exp DIVIDE exp .) ]
  ! LE              [ reduce using rule 70 (exp -> exp DIVIDE exp .) ]
  ! GE              [ reduce using rule 70 (exp -> exp DIVIDE exp .) ]
  ! PLUS            [ reduce using rule 70 (exp -> exp DIVIDE exp .) ]
  ! MINUS           [ reduce using rule 70 (exp -> exp DIVIDE exp .) ]
  ! COLON           [ reduce using rule 70 (exp -> exp DIVIDE exp .) ]
  ! TRANSPOSE       [ shift and go to state 68 ]
  ! MPOWER          [ shift and go to state 80 ]
  ! POWER           [ shift and go to state 67 ]
  ! MTIMES          [ shift and go to state 64 ]
  ! MDIVIDE         [ shift and go to state 76 ]
  ! TIMES           [ shift and go to state 77 ]
  ! DIVIDE          [ shift and go to state 75 ]
  ! BACKSLASH       [ shift and go to state 69 ]


state 122

    (68) exp -> exp MDIVIDE exp .
    (41) exp -> exp . TRANSPOSE
    (55) exp -> exp . ELOR exp
    (56) exp -> exp . ELAND exp
    (57) exp -> exp . OROR exp
    (58) exp -> exp . ANDAND exp
    (59) exp -> exp . EQUALEQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . LE exp
    (64) exp -> exp . GE exp
    (65) exp -> exp . MPOWER exp
    (66) exp -> exp . POWER exp
    (67) exp -> exp . MTIMES exp
    (68) exp -> exp . MDIVIDE exp
    (69) exp -> exp . TIMES exp
    (70) exp -> exp . DIVIDE exp
    (71) exp -> exp . BACKSLASH exp
    (72) exp -> exp . PLUS exp
    (73) exp -> exp . MINUS exp
    (74) exp -> exp . COLON exp COLON exp
    (75) exp -> exp . COLON exp

    TRANSPOSE       reduce using rule 68 (exp -> exp MDIVIDE exp .)
    MPOWER          reduce using rule 68 (exp -> exp MDIVIDE exp .)
    POWER           reduce using rule 68 (exp -> exp MDIVIDE exp .)
    MTIMES          reduce using rule 68 (exp -> exp MDIVIDE exp .)
    MDIVIDE         reduce using rule 68 (exp -> exp MDIVIDE exp .)
    TIMES           reduce using rule 68 (exp -> exp MDIVIDE exp .)
    DIVIDE          reduce using rule 68 (exp -> exp MDIVIDE exp .)
    BACKSLASH       reduce using rule 68 (exp -> exp MDIVIDE exp .)
    SEMICOLON       reduce using rule 68 (exp -> exp MDIVIDE exp .)
    COMMENT         reduce using rule 68 (exp -> exp MDIVIDE exp .)
    IF              reduce using rule 68 (exp -> exp MDIVIDE exp .)
    SWITCH          reduce using rule 68 (exp -> exp MDIVIDE exp .)
    TRY             reduce using rule 68 (exp -> exp MDIVIDE exp .)
    FOR             reduce using rule 68 (exp -> exp MDIVIDE exp .)
    WHILE           reduce using rule 68 (exp -> exp MDIVIDE exp .)
    IDENTIFIER      reduce using rule 68 (exp -> exp MDIVIDE exp .)
    RETURN          reduce using rule 68 (exp -> exp MDIVIDE exp .)
    LBRACKET        reduce using rule 68 (exp -> exp MDIVIDE exp .)
    CLC             reduce using rule 68 (exp -> exp MDIVIDE exp .)
    CLOSE           reduce using rule 68 (exp -> exp MDIVIDE exp .)
    CLEAR           reduce using rule 68 (exp -> exp MDIVIDE exp .)
    BREAK           reduce using rule 68 (exp -> exp MDIVIDE exp .)
    CONTINUE        reduce using rule 68 (exp -> exp MDIVIDE exp .)
    STRING          reduce using rule 68 (exp -> exp MDIVIDE exp .)
    DIRECTORY       reduce using rule 68 (exp -> exp MDIVIDE exp .)
    LPAREN          reduce using rule 68 (exp -> exp MDIVIDE exp .)
    INTEGER         reduce using rule 68 (exp -> exp MDIVIDE exp .)
    FLOAT           reduce using rule 68 (exp -> exp MDIVIDE exp .)
    ALL             reduce using rule 68 (exp -> exp MDIVIDE exp .)
    NOT             reduce using rule 68 (exp -> exp MDIVIDE exp .)
    TRUE            reduce using rule 68 (exp -> exp MDIVIDE exp .)
    FALSE           reduce using rule 68 (exp -> exp MDIVIDE exp .)
    FUNCTION        reduce using rule 68 (exp -> exp MDIVIDE exp .)
    $end            reduce using rule 68 (exp -> exp MDIVIDE exp .)
    CASE            reduce using rule 68 (exp -> exp MDIVIDE exp .)
    OTHERWISE       reduce using rule 68 (exp -> exp MDIVIDE exp .)
    CATCH           reduce using rule 68 (exp -> exp MDIVIDE exp .)
    END             reduce using rule 68 (exp -> exp MDIVIDE exp .)
    ELSE            reduce using rule 68 (exp -> exp MDIVIDE exp .)
    RBRACKET        reduce using rule 68 (exp -> exp MDIVIDE exp .)
    COMMA           reduce using rule 68 (exp -> exp MDIVIDE exp .)
    RPAREN          reduce using rule 68 (exp -> exp MDIVIDE exp .)
    RBRACE          reduce using rule 68 (exp -> exp MDIVIDE exp .)
    ELOR            shift and go to state 63
    ELAND           shift and go to state 62
    OROR            shift and go to state 60
    ANDAND          shift and go to state 79
    EQUALEQUAL      shift and go to state 73
    NOTEQUAL        shift and go to state 61
    LT              shift and go to state 70
    GT              shift and go to state 74
    LE              shift and go to state 66
    GE              shift and go to state 78
    PLUS            shift and go to state 72
    MINUS           shift and go to state 65
    COLON           shift and go to state 71

  ! ELOR            [ reduce using rule 68 (exp -> exp MDIVIDE exp .) ]
  ! ELAND           [ reduce using rule 68 (exp -> exp MDIVIDE exp .) ]
  ! OROR            [ reduce using rule 68 (exp -> exp MDIVIDE exp .) ]
  ! ANDAND          [ reduce using rule 68 (exp -> exp MDIVIDE exp .) ]
  ! EQUALEQUAL      [ reduce using rule 68 (exp -> exp MDIVIDE exp .) ]
  ! NOTEQUAL        [ reduce using rule 68 (exp -> exp MDIVIDE exp .) ]
  ! LT              [ reduce using rule 68 (exp -> exp MDIVIDE exp .) ]
  ! GT              [ reduce using rule 68 (exp -> exp MDIVIDE exp .) ]
  ! LE              [ reduce using rule 68 (exp -> exp MDIVIDE exp .) ]
  ! GE              [ reduce using rule 68 (exp -> exp MDIVIDE exp .) ]
  ! PLUS            [ reduce using rule 68 (exp -> exp MDIVIDE exp .) ]
  ! MINUS           [ reduce using rule 68 (exp -> exp MDIVIDE exp .) ]
  ! COLON           [ reduce using rule 68 (exp -> exp MDIVIDE exp .) ]
  ! TRANSPOSE       [ shift and go to state 68 ]
  ! MPOWER          [ shift and go to state 80 ]
  ! POWER           [ shift and go to state 67 ]
  ! MTIMES          [ shift and go to state 64 ]
  ! MDIVIDE         [ shift and go to state 76 ]
  ! TIMES           [ shift and go to state 77 ]
  ! DIVIDE          [ shift and go to state 75 ]
  ! BACKSLASH       [ shift and go to state 69 ]


state 123

    (69) exp -> exp TIMES exp .
    (41) exp -> exp . TRANSPOSE
    (55) exp -> exp . ELOR exp
    (56) exp -> exp . ELAND exp
    (57) exp -> exp . OROR exp
    (58) exp -> exp . ANDAND exp
    (59) exp -> exp . EQUALEQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . LE exp
    (64) exp -> exp . GE exp
    (65) exp -> exp . MPOWER exp
    (66) exp -> exp . POWER exp
    (67) exp -> exp . MTIMES exp
    (68) exp -> exp . MDIVIDE exp
    (69) exp -> exp . TIMES exp
    (70) exp -> exp . DIVIDE exp
    (71) exp -> exp . BACKSLASH exp
    (72) exp -> exp . PLUS exp
    (73) exp -> exp . MINUS exp
    (74) exp -> exp . COLON exp COLON exp
    (75) exp -> exp . COLON exp

    TRANSPOSE       reduce using rule 69 (exp -> exp TIMES exp .)
    MPOWER          reduce using rule 69 (exp -> exp TIMES exp .)
    POWER           reduce using rule 69 (exp -> exp TIMES exp .)
    MTIMES          reduce using rule 69 (exp -> exp TIMES exp .)
    MDIVIDE         reduce using rule 69 (exp -> exp TIMES exp .)
    TIMES           reduce using rule 69 (exp -> exp TIMES exp .)
    DIVIDE          reduce using rule 69 (exp -> exp TIMES exp .)
    BACKSLASH       reduce using rule 69 (exp -> exp TIMES exp .)
    SEMICOLON       reduce using rule 69 (exp -> exp TIMES exp .)
    COMMENT         reduce using rule 69 (exp -> exp TIMES exp .)
    IF              reduce using rule 69 (exp -> exp TIMES exp .)
    SWITCH          reduce using rule 69 (exp -> exp TIMES exp .)
    TRY             reduce using rule 69 (exp -> exp TIMES exp .)
    FOR             reduce using rule 69 (exp -> exp TIMES exp .)
    WHILE           reduce using rule 69 (exp -> exp TIMES exp .)
    IDENTIFIER      reduce using rule 69 (exp -> exp TIMES exp .)
    RETURN          reduce using rule 69 (exp -> exp TIMES exp .)
    LBRACKET        reduce using rule 69 (exp -> exp TIMES exp .)
    CLC             reduce using rule 69 (exp -> exp TIMES exp .)
    CLOSE           reduce using rule 69 (exp -> exp TIMES exp .)
    CLEAR           reduce using rule 69 (exp -> exp TIMES exp .)
    BREAK           reduce using rule 69 (exp -> exp TIMES exp .)
    CONTINUE        reduce using rule 69 (exp -> exp TIMES exp .)
    STRING          reduce using rule 69 (exp -> exp TIMES exp .)
    DIRECTORY       reduce using rule 69 (exp -> exp TIMES exp .)
    LPAREN          reduce using rule 69 (exp -> exp TIMES exp .)
    INTEGER         reduce using rule 69 (exp -> exp TIMES exp .)
    FLOAT           reduce using rule 69 (exp -> exp TIMES exp .)
    ALL             reduce using rule 69 (exp -> exp TIMES exp .)
    NOT             reduce using rule 69 (exp -> exp TIMES exp .)
    TRUE            reduce using rule 69 (exp -> exp TIMES exp .)
    FALSE           reduce using rule 69 (exp -> exp TIMES exp .)
    FUNCTION        reduce using rule 69 (exp -> exp TIMES exp .)
    $end            reduce using rule 69 (exp -> exp TIMES exp .)
    CASE            reduce using rule 69 (exp -> exp TIMES exp .)
    OTHERWISE       reduce using rule 69 (exp -> exp TIMES exp .)
    CATCH           reduce using rule 69 (exp -> exp TIMES exp .)
    END             reduce using rule 69 (exp -> exp TIMES exp .)
    ELSE            reduce using rule 69 (exp -> exp TIMES exp .)
    RBRACKET        reduce using rule 69 (exp -> exp TIMES exp .)
    COMMA           reduce using rule 69 (exp -> exp TIMES exp .)
    RPAREN          reduce using rule 69 (exp -> exp TIMES exp .)
    RBRACE          reduce using rule 69 (exp -> exp TIMES exp .)
    ELOR            shift and go to state 63
    ELAND           shift and go to state 62
    OROR            shift and go to state 60
    ANDAND          shift and go to state 79
    EQUALEQUAL      shift and go to state 73
    NOTEQUAL        shift and go to state 61
    LT              shift and go to state 70
    GT              shift and go to state 74
    LE              shift and go to state 66
    GE              shift and go to state 78
    PLUS            shift and go to state 72
    MINUS           shift and go to state 65
    COLON           shift and go to state 71

  ! ELOR            [ reduce using rule 69 (exp -> exp TIMES exp .) ]
  ! ELAND           [ reduce using rule 69 (exp -> exp TIMES exp .) ]
  ! OROR            [ reduce using rule 69 (exp -> exp TIMES exp .) ]
  ! ANDAND          [ reduce using rule 69 (exp -> exp TIMES exp .) ]
  ! EQUALEQUAL      [ reduce using rule 69 (exp -> exp TIMES exp .) ]
  ! NOTEQUAL        [ reduce using rule 69 (exp -> exp TIMES exp .) ]
  ! LT              [ reduce using rule 69 (exp -> exp TIMES exp .) ]
  ! GT              [ reduce using rule 69 (exp -> exp TIMES exp .) ]
  ! LE              [ reduce using rule 69 (exp -> exp TIMES exp .) ]
  ! GE              [ reduce using rule 69 (exp -> exp TIMES exp .) ]
  ! PLUS            [ reduce using rule 69 (exp -> exp TIMES exp .) ]
  ! MINUS           [ reduce using rule 69 (exp -> exp TIMES exp .) ]
  ! COLON           [ reduce using rule 69 (exp -> exp TIMES exp .) ]
  ! TRANSPOSE       [ shift and go to state 68 ]
  ! MPOWER          [ shift and go to state 80 ]
  ! POWER           [ shift and go to state 67 ]
  ! MTIMES          [ shift and go to state 64 ]
  ! MDIVIDE         [ shift and go to state 76 ]
  ! TIMES           [ shift and go to state 77 ]
  ! DIVIDE          [ shift and go to state 75 ]
  ! BACKSLASH       [ shift and go to state 69 ]


state 124

    (64) exp -> exp GE exp .
    (41) exp -> exp . TRANSPOSE
    (55) exp -> exp . ELOR exp
    (56) exp -> exp . ELAND exp
    (57) exp -> exp . OROR exp
    (58) exp -> exp . ANDAND exp
    (59) exp -> exp . EQUALEQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . LE exp
    (64) exp -> exp . GE exp
    (65) exp -> exp . MPOWER exp
    (66) exp -> exp . POWER exp
    (67) exp -> exp . MTIMES exp
    (68) exp -> exp . MDIVIDE exp
    (69) exp -> exp . TIMES exp
    (70) exp -> exp . DIVIDE exp
    (71) exp -> exp . BACKSLASH exp
    (72) exp -> exp . PLUS exp
    (73) exp -> exp . MINUS exp
    (74) exp -> exp . COLON exp COLON exp
    (75) exp -> exp . COLON exp

    TRANSPOSE       reduce using rule 64 (exp -> exp GE exp .)
    EQUALEQUAL      reduce using rule 64 (exp -> exp GE exp .)
    NOTEQUAL        reduce using rule 64 (exp -> exp GE exp .)
    LT              reduce using rule 64 (exp -> exp GE exp .)
    GT              reduce using rule 64 (exp -> exp GE exp .)
    LE              reduce using rule 64 (exp -> exp GE exp .)
    GE              reduce using rule 64 (exp -> exp GE exp .)
    MPOWER          reduce using rule 64 (exp -> exp GE exp .)
    POWER           reduce using rule 64 (exp -> exp GE exp .)
    MTIMES          reduce using rule 64 (exp -> exp GE exp .)
    MDIVIDE         reduce using rule 64 (exp -> exp GE exp .)
    TIMES           reduce using rule 64 (exp -> exp GE exp .)
    DIVIDE          reduce using rule 64 (exp -> exp GE exp .)
    BACKSLASH       reduce using rule 64 (exp -> exp GE exp .)
    PLUS            reduce using rule 64 (exp -> exp GE exp .)
    MINUS           reduce using rule 64 (exp -> exp GE exp .)
    COLON           reduce using rule 64 (exp -> exp GE exp .)
    SEMICOLON       reduce using rule 64 (exp -> exp GE exp .)
    COMMENT         reduce using rule 64 (exp -> exp GE exp .)
    IF              reduce using rule 64 (exp -> exp GE exp .)
    SWITCH          reduce using rule 64 (exp -> exp GE exp .)
    TRY             reduce using rule 64 (exp -> exp GE exp .)
    FOR             reduce using rule 64 (exp -> exp GE exp .)
    WHILE           reduce using rule 64 (exp -> exp GE exp .)
    IDENTIFIER      reduce using rule 64 (exp -> exp GE exp .)
    RETURN          reduce using rule 64 (exp -> exp GE exp .)
    LBRACKET        reduce using rule 64 (exp -> exp GE exp .)
    CLC             reduce using rule 64 (exp -> exp GE exp .)
    CLOSE           reduce using rule 64 (exp -> exp GE exp .)
    CLEAR           reduce using rule 64 (exp -> exp GE exp .)
    BREAK           reduce using rule 64 (exp -> exp GE exp .)
    CONTINUE        reduce using rule 64 (exp -> exp GE exp .)
    STRING          reduce using rule 64 (exp -> exp GE exp .)
    DIRECTORY       reduce using rule 64 (exp -> exp GE exp .)
    LPAREN          reduce using rule 64 (exp -> exp GE exp .)
    INTEGER         reduce using rule 64 (exp -> exp GE exp .)
    FLOAT           reduce using rule 64 (exp -> exp GE exp .)
    ALL             reduce using rule 64 (exp -> exp GE exp .)
    NOT             reduce using rule 64 (exp -> exp GE exp .)
    TRUE            reduce using rule 64 (exp -> exp GE exp .)
    FALSE           reduce using rule 64 (exp -> exp GE exp .)
    FUNCTION        reduce using rule 64 (exp -> exp GE exp .)
    $end            reduce using rule 64 (exp -> exp GE exp .)
    CASE            reduce using rule 64 (exp -> exp GE exp .)
    OTHERWISE       reduce using rule 64 (exp -> exp GE exp .)
    CATCH           reduce using rule 64 (exp -> exp GE exp .)
    END             reduce using rule 64 (exp -> exp GE exp .)
    ELSE            reduce using rule 64 (exp -> exp GE exp .)
    RBRACKET        reduce using rule 64 (exp -> exp GE exp .)
    COMMA           reduce using rule 64 (exp -> exp GE exp .)
    RPAREN          reduce using rule 64 (exp -> exp GE exp .)
    RBRACE          reduce using rule 64 (exp -> exp GE exp .)
    ELOR            shift and go to state 63
    ELAND           shift and go to state 62
    OROR            shift and go to state 60
    ANDAND          shift and go to state 79

  ! ELOR            [ reduce using rule 64 (exp -> exp GE exp .) ]
  ! ELAND           [ reduce using rule 64 (exp -> exp GE exp .) ]
  ! OROR            [ reduce using rule 64 (exp -> exp GE exp .) ]
  ! ANDAND          [ reduce using rule 64 (exp -> exp GE exp .) ]
  ! TRANSPOSE       [ shift and go to state 68 ]
  ! EQUALEQUAL      [ shift and go to state 73 ]
  ! NOTEQUAL        [ shift and go to state 61 ]
  ! LT              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 74 ]
  ! LE              [ shift and go to state 66 ]
  ! GE              [ shift and go to state 78 ]
  ! MPOWER          [ shift and go to state 80 ]
  ! POWER           [ shift and go to state 67 ]
  ! MTIMES          [ shift and go to state 64 ]
  ! MDIVIDE         [ shift and go to state 76 ]
  ! TIMES           [ shift and go to state 77 ]
  ! DIVIDE          [ shift and go to state 75 ]
  ! BACKSLASH       [ shift and go to state 69 ]
  ! PLUS            [ shift and go to state 72 ]
  ! MINUS           [ shift and go to state 65 ]
  ! COLON           [ shift and go to state 71 ]


state 125

    (58) exp -> exp ANDAND exp .
    (41) exp -> exp . TRANSPOSE
    (55) exp -> exp . ELOR exp
    (56) exp -> exp . ELAND exp
    (57) exp -> exp . OROR exp
    (58) exp -> exp . ANDAND exp
    (59) exp -> exp . EQUALEQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . LE exp
    (64) exp -> exp . GE exp
    (65) exp -> exp . MPOWER exp
    (66) exp -> exp . POWER exp
    (67) exp -> exp . MTIMES exp
    (68) exp -> exp . MDIVIDE exp
    (69) exp -> exp . TIMES exp
    (70) exp -> exp . DIVIDE exp
    (71) exp -> exp . BACKSLASH exp
    (72) exp -> exp . PLUS exp
    (73) exp -> exp . MINUS exp
    (74) exp -> exp . COLON exp COLON exp
    (75) exp -> exp . COLON exp

    TRANSPOSE       reduce using rule 58 (exp -> exp ANDAND exp .)
    ELOR            reduce using rule 58 (exp -> exp ANDAND exp .)
    ELAND           reduce using rule 58 (exp -> exp ANDAND exp .)
    ANDAND          reduce using rule 58 (exp -> exp ANDAND exp .)
    EQUALEQUAL      reduce using rule 58 (exp -> exp ANDAND exp .)
    NOTEQUAL        reduce using rule 58 (exp -> exp ANDAND exp .)
    LT              reduce using rule 58 (exp -> exp ANDAND exp .)
    GT              reduce using rule 58 (exp -> exp ANDAND exp .)
    LE              reduce using rule 58 (exp -> exp ANDAND exp .)
    GE              reduce using rule 58 (exp -> exp ANDAND exp .)
    MPOWER          reduce using rule 58 (exp -> exp ANDAND exp .)
    POWER           reduce using rule 58 (exp -> exp ANDAND exp .)
    MTIMES          reduce using rule 58 (exp -> exp ANDAND exp .)
    MDIVIDE         reduce using rule 58 (exp -> exp ANDAND exp .)
    TIMES           reduce using rule 58 (exp -> exp ANDAND exp .)
    DIVIDE          reduce using rule 58 (exp -> exp ANDAND exp .)
    BACKSLASH       reduce using rule 58 (exp -> exp ANDAND exp .)
    PLUS            reduce using rule 58 (exp -> exp ANDAND exp .)
    MINUS           reduce using rule 58 (exp -> exp ANDAND exp .)
    COLON           reduce using rule 58 (exp -> exp ANDAND exp .)
    SEMICOLON       reduce using rule 58 (exp -> exp ANDAND exp .)
    COMMENT         reduce using rule 58 (exp -> exp ANDAND exp .)
    IF              reduce using rule 58 (exp -> exp ANDAND exp .)
    SWITCH          reduce using rule 58 (exp -> exp ANDAND exp .)
    TRY             reduce using rule 58 (exp -> exp ANDAND exp .)
    FOR             reduce using rule 58 (exp -> exp ANDAND exp .)
    WHILE           reduce using rule 58 (exp -> exp ANDAND exp .)
    IDENTIFIER      reduce using rule 58 (exp -> exp ANDAND exp .)
    RETURN          reduce using rule 58 (exp -> exp ANDAND exp .)
    LBRACKET        reduce using rule 58 (exp -> exp ANDAND exp .)
    CLC             reduce using rule 58 (exp -> exp ANDAND exp .)
    CLOSE           reduce using rule 58 (exp -> exp ANDAND exp .)
    CLEAR           reduce using rule 58 (exp -> exp ANDAND exp .)
    BREAK           reduce using rule 58 (exp -> exp ANDAND exp .)
    CONTINUE        reduce using rule 58 (exp -> exp ANDAND exp .)
    STRING          reduce using rule 58 (exp -> exp ANDAND exp .)
    DIRECTORY       reduce using rule 58 (exp -> exp ANDAND exp .)
    LPAREN          reduce using rule 58 (exp -> exp ANDAND exp .)
    INTEGER         reduce using rule 58 (exp -> exp ANDAND exp .)
    FLOAT           reduce using rule 58 (exp -> exp ANDAND exp .)
    ALL             reduce using rule 58 (exp -> exp ANDAND exp .)
    NOT             reduce using rule 58 (exp -> exp ANDAND exp .)
    TRUE            reduce using rule 58 (exp -> exp ANDAND exp .)
    FALSE           reduce using rule 58 (exp -> exp ANDAND exp .)
    FUNCTION        reduce using rule 58 (exp -> exp ANDAND exp .)
    $end            reduce using rule 58 (exp -> exp ANDAND exp .)
    CASE            reduce using rule 58 (exp -> exp ANDAND exp .)
    OTHERWISE       reduce using rule 58 (exp -> exp ANDAND exp .)
    CATCH           reduce using rule 58 (exp -> exp ANDAND exp .)
    END             reduce using rule 58 (exp -> exp ANDAND exp .)
    ELSE            reduce using rule 58 (exp -> exp ANDAND exp .)
    RBRACKET        reduce using rule 58 (exp -> exp ANDAND exp .)
    COMMA           reduce using rule 58 (exp -> exp ANDAND exp .)
    RPAREN          reduce using rule 58 (exp -> exp ANDAND exp .)
    RBRACE          reduce using rule 58 (exp -> exp ANDAND exp .)
    OROR            shift and go to state 60

  ! OROR            [ reduce using rule 58 (exp -> exp ANDAND exp .) ]
  ! TRANSPOSE       [ shift and go to state 68 ]
  ! ELOR            [ shift and go to state 63 ]
  ! ELAND           [ shift and go to state 62 ]
  ! ANDAND          [ shift and go to state 79 ]
  ! EQUALEQUAL      [ shift and go to state 73 ]
  ! NOTEQUAL        [ shift and go to state 61 ]
  ! LT              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 74 ]
  ! LE              [ shift and go to state 66 ]
  ! GE              [ shift and go to state 78 ]
  ! MPOWER          [ shift and go to state 80 ]
  ! POWER           [ shift and go to state 67 ]
  ! MTIMES          [ shift and go to state 64 ]
  ! MDIVIDE         [ shift and go to state 76 ]
  ! TIMES           [ shift and go to state 77 ]
  ! DIVIDE          [ shift and go to state 75 ]
  ! BACKSLASH       [ shift and go to state 69 ]
  ! PLUS            [ shift and go to state 72 ]
  ! MINUS           [ shift and go to state 65 ]
  ! COLON           [ shift and go to state 71 ]


state 126

    (65) exp -> exp MPOWER exp .
    (41) exp -> exp . TRANSPOSE
    (55) exp -> exp . ELOR exp
    (56) exp -> exp . ELAND exp
    (57) exp -> exp . OROR exp
    (58) exp -> exp . ANDAND exp
    (59) exp -> exp . EQUALEQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . LE exp
    (64) exp -> exp . GE exp
    (65) exp -> exp . MPOWER exp
    (66) exp -> exp . POWER exp
    (67) exp -> exp . MTIMES exp
    (68) exp -> exp . MDIVIDE exp
    (69) exp -> exp . TIMES exp
    (70) exp -> exp . DIVIDE exp
    (71) exp -> exp . BACKSLASH exp
    (72) exp -> exp . PLUS exp
    (73) exp -> exp . MINUS exp
    (74) exp -> exp . COLON exp COLON exp
    (75) exp -> exp . COLON exp

    TRANSPOSE       reduce using rule 65 (exp -> exp MPOWER exp .)
    MPOWER          reduce using rule 65 (exp -> exp MPOWER exp .)
    POWER           reduce using rule 65 (exp -> exp MPOWER exp .)
    SEMICOLON       reduce using rule 65 (exp -> exp MPOWER exp .)
    COMMENT         reduce using rule 65 (exp -> exp MPOWER exp .)
    IF              reduce using rule 65 (exp -> exp MPOWER exp .)
    SWITCH          reduce using rule 65 (exp -> exp MPOWER exp .)
    TRY             reduce using rule 65 (exp -> exp MPOWER exp .)
    FOR             reduce using rule 65 (exp -> exp MPOWER exp .)
    WHILE           reduce using rule 65 (exp -> exp MPOWER exp .)
    IDENTIFIER      reduce using rule 65 (exp -> exp MPOWER exp .)
    RETURN          reduce using rule 65 (exp -> exp MPOWER exp .)
    LBRACKET        reduce using rule 65 (exp -> exp MPOWER exp .)
    CLC             reduce using rule 65 (exp -> exp MPOWER exp .)
    CLOSE           reduce using rule 65 (exp -> exp MPOWER exp .)
    CLEAR           reduce using rule 65 (exp -> exp MPOWER exp .)
    BREAK           reduce using rule 65 (exp -> exp MPOWER exp .)
    CONTINUE        reduce using rule 65 (exp -> exp MPOWER exp .)
    STRING          reduce using rule 65 (exp -> exp MPOWER exp .)
    DIRECTORY       reduce using rule 65 (exp -> exp MPOWER exp .)
    LPAREN          reduce using rule 65 (exp -> exp MPOWER exp .)
    INTEGER         reduce using rule 65 (exp -> exp MPOWER exp .)
    FLOAT           reduce using rule 65 (exp -> exp MPOWER exp .)
    ALL             reduce using rule 65 (exp -> exp MPOWER exp .)
    NOT             reduce using rule 65 (exp -> exp MPOWER exp .)
    TRUE            reduce using rule 65 (exp -> exp MPOWER exp .)
    FALSE           reduce using rule 65 (exp -> exp MPOWER exp .)
    FUNCTION        reduce using rule 65 (exp -> exp MPOWER exp .)
    $end            reduce using rule 65 (exp -> exp MPOWER exp .)
    CASE            reduce using rule 65 (exp -> exp MPOWER exp .)
    OTHERWISE       reduce using rule 65 (exp -> exp MPOWER exp .)
    CATCH           reduce using rule 65 (exp -> exp MPOWER exp .)
    END             reduce using rule 65 (exp -> exp MPOWER exp .)
    ELSE            reduce using rule 65 (exp -> exp MPOWER exp .)
    RBRACKET        reduce using rule 65 (exp -> exp MPOWER exp .)
    COMMA           reduce using rule 65 (exp -> exp MPOWER exp .)
    RPAREN          reduce using rule 65 (exp -> exp MPOWER exp .)
    RBRACE          reduce using rule 65 (exp -> exp MPOWER exp .)
    ELOR            shift and go to state 63
    ELAND           shift and go to state 62
    OROR            shift and go to state 60
    ANDAND          shift and go to state 79
    EQUALEQUAL      shift and go to state 73
    NOTEQUAL        shift and go to state 61
    LT              shift and go to state 70
    GT              shift and go to state 74
    LE              shift and go to state 66
    GE              shift and go to state 78
    MTIMES          shift and go to state 64
    MDIVIDE         shift and go to state 76
    TIMES           shift and go to state 77
    DIVIDE          shift and go to state 75
    BACKSLASH       shift and go to state 69
    PLUS            shift and go to state 72
    MINUS           shift and go to state 65
    COLON           shift and go to state 71

  ! ELOR            [ reduce using rule 65 (exp -> exp MPOWER exp .) ]
  ! ELAND           [ reduce using rule 65 (exp -> exp MPOWER exp .) ]
  ! OROR            [ reduce using rule 65 (exp -> exp MPOWER exp .) ]
  ! ANDAND          [ reduce using rule 65 (exp -> exp MPOWER exp .) ]
  ! EQUALEQUAL      [ reduce using rule 65 (exp -> exp MPOWER exp .) ]
  ! NOTEQUAL        [ reduce using rule 65 (exp -> exp MPOWER exp .) ]
  ! LT              [ reduce using rule 65 (exp -> exp MPOWER exp .) ]
  ! GT              [ reduce using rule 65 (exp -> exp MPOWER exp .) ]
  ! LE              [ reduce using rule 65 (exp -> exp MPOWER exp .) ]
  ! GE              [ reduce using rule 65 (exp -> exp MPOWER exp .) ]
  ! MTIMES          [ reduce using rule 65 (exp -> exp MPOWER exp .) ]
  ! MDIVIDE         [ reduce using rule 65 (exp -> exp MPOWER exp .) ]
  ! TIMES           [ reduce using rule 65 (exp -> exp MPOWER exp .) ]
  ! DIVIDE          [ reduce using rule 65 (exp -> exp MPOWER exp .) ]
  ! BACKSLASH       [ reduce using rule 65 (exp -> exp MPOWER exp .) ]
  ! PLUS            [ reduce using rule 65 (exp -> exp MPOWER exp .) ]
  ! MINUS           [ reduce using rule 65 (exp -> exp MPOWER exp .) ]
  ! COLON           [ reduce using rule 65 (exp -> exp MPOWER exp .) ]
  ! TRANSPOSE       [ shift and go to state 68 ]
  ! MPOWER          [ shift and go to state 80 ]
  ! POWER           [ shift and go to state 67 ]


state 127

    (81) explist -> explist SEMICOLON explist .
    (79) explist -> explist . exp
    (80) explist -> explist . COMMA exp
    (81) explist -> explist . SEMICOLON explist
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for DIRECTORY resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for ALL resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    RBRACKET        reduce using rule 81 (explist -> explist SEMICOLON explist .)
    COMMA           shift and go to state 82
    SEMICOLON       shift and go to state 81
    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

  ! COMMA           [ reduce using rule 81 (explist -> explist SEMICOLON explist .) ]
  ! SEMICOLON       [ reduce using rule 81 (explist -> explist SEMICOLON explist .) ]
  ! IDENTIFIER      [ reduce using rule 81 (explist -> explist SEMICOLON explist .) ]
  ! STRING          [ reduce using rule 81 (explist -> explist SEMICOLON explist .) ]
  ! DIRECTORY       [ reduce using rule 81 (explist -> explist SEMICOLON explist .) ]
  ! LPAREN          [ reduce using rule 81 (explist -> explist SEMICOLON explist .) ]
  ! INTEGER         [ reduce using rule 81 (explist -> explist SEMICOLON explist .) ]
  ! FLOAT           [ reduce using rule 81 (explist -> explist SEMICOLON explist .) ]
  ! ALL             [ reduce using rule 81 (explist -> explist SEMICOLON explist .) ]
  ! NOT             [ reduce using rule 81 (explist -> explist SEMICOLON explist .) ]
  ! TRUE            [ reduce using rule 81 (explist -> explist SEMICOLON explist .) ]
  ! FALSE           [ reduce using rule 81 (explist -> explist SEMICOLON explist .) ]
  ! COLON           [ reduce using rule 81 (explist -> explist SEMICOLON explist .) ]
  ! LBRACKET        [ reduce using rule 81 (explist -> explist SEMICOLON explist .) ]

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    number                         shift and go to state 22
    exp                            shift and go to state 83

state 128

    (80) explist -> explist COMMA exp .
    (41) exp -> exp . TRANSPOSE
    (55) exp -> exp . ELOR exp
    (56) exp -> exp . ELAND exp
    (57) exp -> exp . OROR exp
    (58) exp -> exp . ANDAND exp
    (59) exp -> exp . EQUALEQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . LE exp
    (64) exp -> exp . GE exp
    (65) exp -> exp . MPOWER exp
    (66) exp -> exp . POWER exp
    (67) exp -> exp . MTIMES exp
    (68) exp -> exp . MDIVIDE exp
    (69) exp -> exp . TIMES exp
    (70) exp -> exp . DIVIDE exp
    (71) exp -> exp . BACKSLASH exp
    (72) exp -> exp . PLUS exp
    (73) exp -> exp . MINUS exp
    (74) exp -> exp . COLON exp COLON exp
    (75) exp -> exp . COLON exp

  ! shift/reduce conflict for COLON resolved as shift
    RBRACKET        reduce using rule 80 (explist -> explist COMMA exp .)
    COMMA           reduce using rule 80 (explist -> explist COMMA exp .)
    SEMICOLON       reduce using rule 80 (explist -> explist COMMA exp .)
    IDENTIFIER      reduce using rule 80 (explist -> explist COMMA exp .)
    STRING          reduce using rule 80 (explist -> explist COMMA exp .)
    DIRECTORY       reduce using rule 80 (explist -> explist COMMA exp .)
    LPAREN          reduce using rule 80 (explist -> explist COMMA exp .)
    INTEGER         reduce using rule 80 (explist -> explist COMMA exp .)
    FLOAT           reduce using rule 80 (explist -> explist COMMA exp .)
    ALL             reduce using rule 80 (explist -> explist COMMA exp .)
    NOT             reduce using rule 80 (explist -> explist COMMA exp .)
    TRUE            reduce using rule 80 (explist -> explist COMMA exp .)
    FALSE           reduce using rule 80 (explist -> explist COMMA exp .)
    LBRACKET        reduce using rule 80 (explist -> explist COMMA exp .)
    TRANSPOSE       shift and go to state 68
    ELOR            shift and go to state 63
    ELAND           shift and go to state 62
    OROR            shift and go to state 60
    ANDAND          shift and go to state 79
    EQUALEQUAL      shift and go to state 73
    NOTEQUAL        shift and go to state 61
    LT              shift and go to state 70
    GT              shift and go to state 74
    LE              shift and go to state 66
    GE              shift and go to state 78
    MPOWER          shift and go to state 80
    POWER           shift and go to state 67
    MTIMES          shift and go to state 64
    MDIVIDE         shift and go to state 76
    TIMES           shift and go to state 77
    DIVIDE          shift and go to state 75
    BACKSLASH       shift and go to state 69
    PLUS            shift and go to state 72
    MINUS           shift and go to state 65
    COLON           shift and go to state 71

  ! COLON           [ reduce using rule 80 (explist -> explist COMMA exp .) ]


state 129

    (14) stmt -> WHILE exp compoundstmt END .

    SEMICOLON       reduce using rule 14 (stmt -> WHILE exp compoundstmt END .)
    COMMENT         reduce using rule 14 (stmt -> WHILE exp compoundstmt END .)
    IF              reduce using rule 14 (stmt -> WHILE exp compoundstmt END .)
    SWITCH          reduce using rule 14 (stmt -> WHILE exp compoundstmt END .)
    TRY             reduce using rule 14 (stmt -> WHILE exp compoundstmt END .)
    FOR             reduce using rule 14 (stmt -> WHILE exp compoundstmt END .)
    WHILE           reduce using rule 14 (stmt -> WHILE exp compoundstmt END .)
    IDENTIFIER      reduce using rule 14 (stmt -> WHILE exp compoundstmt END .)
    RETURN          reduce using rule 14 (stmt -> WHILE exp compoundstmt END .)
    LBRACKET        reduce using rule 14 (stmt -> WHILE exp compoundstmt END .)
    CLC             reduce using rule 14 (stmt -> WHILE exp compoundstmt END .)
    CLOSE           reduce using rule 14 (stmt -> WHILE exp compoundstmt END .)
    CLEAR           reduce using rule 14 (stmt -> WHILE exp compoundstmt END .)
    BREAK           reduce using rule 14 (stmt -> WHILE exp compoundstmt END .)
    CONTINUE        reduce using rule 14 (stmt -> WHILE exp compoundstmt END .)
    STRING          reduce using rule 14 (stmt -> WHILE exp compoundstmt END .)
    DIRECTORY       reduce using rule 14 (stmt -> WHILE exp compoundstmt END .)
    LPAREN          reduce using rule 14 (stmt -> WHILE exp compoundstmt END .)
    INTEGER         reduce using rule 14 (stmt -> WHILE exp compoundstmt END .)
    FLOAT           reduce using rule 14 (stmt -> WHILE exp compoundstmt END .)
    ALL             reduce using rule 14 (stmt -> WHILE exp compoundstmt END .)
    NOT             reduce using rule 14 (stmt -> WHILE exp compoundstmt END .)
    TRUE            reduce using rule 14 (stmt -> WHILE exp compoundstmt END .)
    FALSE           reduce using rule 14 (stmt -> WHILE exp compoundstmt END .)
    COLON           reduce using rule 14 (stmt -> WHILE exp compoundstmt END .)
    END             reduce using rule 14 (stmt -> WHILE exp compoundstmt END .)
    CASE            reduce using rule 14 (stmt -> WHILE exp compoundstmt END .)
    OTHERWISE       reduce using rule 14 (stmt -> WHILE exp compoundstmt END .)
    CATCH           reduce using rule 14 (stmt -> WHILE exp compoundstmt END .)
    FUNCTION        reduce using rule 14 (stmt -> WHILE exp compoundstmt END .)
    $end            reduce using rule 14 (stmt -> WHILE exp compoundstmt END .)
    ELSE            reduce using rule 14 (stmt -> WHILE exp compoundstmt END .)


state 130

    (21) multiclause -> clause multiclause .

    END             reduce using rule 21 (multiclause -> clause multiclause .)


state 131

    (24) clause -> OTHERWISE compoundstmt .

    CASE            reduce using rule 24 (clause -> OTHERWISE compoundstmt .)
    OTHERWISE       reduce using rule 24 (clause -> OTHERWISE compoundstmt .)
    CATCH           reduce using rule 24 (clause -> OTHERWISE compoundstmt .)
    END             reduce using rule 24 (clause -> OTHERWISE compoundstmt .)


state 132

    (23) clause -> CASE exp . compoundstmt
    (41) exp -> exp . TRANSPOSE
    (55) exp -> exp . ELOR exp
    (56) exp -> exp . ELAND exp
    (57) exp -> exp . OROR exp
    (58) exp -> exp . ANDAND exp
    (59) exp -> exp . EQUALEQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . LE exp
    (64) exp -> exp . GE exp
    (65) exp -> exp . MPOWER exp
    (66) exp -> exp . POWER exp
    (67) exp -> exp . MTIMES exp
    (68) exp -> exp . MDIVIDE exp
    (69) exp -> exp . TIMES exp
    (70) exp -> exp . DIVIDE exp
    (71) exp -> exp . BACKSLASH exp
    (72) exp -> exp . PLUS exp
    (73) exp -> exp . MINUS exp
    (74) exp -> exp . COLON exp COLON exp
    (75) exp -> exp . COLON exp
    (5) compoundstmt -> . stmt SEMICOLON compoundstmt
    (6) compoundstmt -> . stmt compoundstmt
    (7) compoundstmt -> . COMMENT compoundstmt
    (8) compoundstmt -> .
    (9) stmt -> . IF exp compoundstmt END
    (10) stmt -> . IF exp compoundstmt ELSE compoundstmt END
    (11) stmt -> . SWITCH exp multiclause END
    (12) stmt -> . TRY compoundstmt multiclause END
    (13) stmt -> . FOR range compoundstmt END
    (14) stmt -> . WHILE exp compoundstmt END
    (15) stmt -> . IDENTIFIER EQUAL exp
    (16) stmt -> . matrix EQUAL exp
    (17) stmt -> . RETURN exp
    (18) stmt -> . keycall
    (19) stmt -> . IDENTIFIER PERIOD IDENTIFIER
    (20) stmt -> . exp
    (77) matrix -> . LBRACKET explist RBRACKET
    (29) keycall -> . CLC
    (30) keycall -> . CLOSE optvars
    (31) keycall -> . CLEAR optvars
    (32) keycall -> . BREAK
    (33) keycall -> . CONTINUE
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON

    TRANSPOSE       shift and go to state 68
    ELOR            shift and go to state 63
    ELAND           shift and go to state 62
    OROR            shift and go to state 60
    ANDAND          shift and go to state 79
    EQUALEQUAL      shift and go to state 73
    NOTEQUAL        shift and go to state 61
    LT              shift and go to state 70
    GT              shift and go to state 74
    LE              shift and go to state 66
    GE              shift and go to state 78
    MPOWER          shift and go to state 80
    POWER           shift and go to state 67
    MTIMES          shift and go to state 64
    MDIVIDE         shift and go to state 76
    TIMES           shift and go to state 77
    DIVIDE          shift and go to state 75
    BACKSLASH       shift and go to state 69
    PLUS            shift and go to state 72
    MINUS           shift and go to state 65
    COLON           shift and go to state 85
    COMMENT         shift and go to state 5
    CASE            reduce using rule 8 (compoundstmt -> .)
    OTHERWISE       reduce using rule 8 (compoundstmt -> .)
    CATCH           reduce using rule 8 (compoundstmt -> .)
    END             reduce using rule 8 (compoundstmt -> .)
    IF              shift and go to state 24
    SWITCH          shift and go to state 9
    TRY             shift and go to state 18
    FOR             shift and go to state 15
    WHILE           shift and go to state 3
    IDENTIFIER      shift and go to state 12
    RETURN          shift and go to state 1
    LBRACKET        shift and go to state 2
    CLC             shift and go to state 23
    CLOSE           shift and go to state 10
    CLEAR           shift and go to state 16
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26

    matrix                         shift and go to state 6
    keycall                        shift and go to state 8
    stmt                           shift and go to state 17
    number                         shift and go to state 22
    keyword                        shift and go to state 27
    exp                            shift and go to state 32
    compoundstmt                   shift and go to state 146

state 133

    (11) stmt -> SWITCH exp multiclause END .

    SEMICOLON       reduce using rule 11 (stmt -> SWITCH exp multiclause END .)
    COMMENT         reduce using rule 11 (stmt -> SWITCH exp multiclause END .)
    IF              reduce using rule 11 (stmt -> SWITCH exp multiclause END .)
    SWITCH          reduce using rule 11 (stmt -> SWITCH exp multiclause END .)
    TRY             reduce using rule 11 (stmt -> SWITCH exp multiclause END .)
    FOR             reduce using rule 11 (stmt -> SWITCH exp multiclause END .)
    WHILE           reduce using rule 11 (stmt -> SWITCH exp multiclause END .)
    IDENTIFIER      reduce using rule 11 (stmt -> SWITCH exp multiclause END .)
    RETURN          reduce using rule 11 (stmt -> SWITCH exp multiclause END .)
    LBRACKET        reduce using rule 11 (stmt -> SWITCH exp multiclause END .)
    CLC             reduce using rule 11 (stmt -> SWITCH exp multiclause END .)
    CLOSE           reduce using rule 11 (stmt -> SWITCH exp multiclause END .)
    CLEAR           reduce using rule 11 (stmt -> SWITCH exp multiclause END .)
    BREAK           reduce using rule 11 (stmt -> SWITCH exp multiclause END .)
    CONTINUE        reduce using rule 11 (stmt -> SWITCH exp multiclause END .)
    STRING          reduce using rule 11 (stmt -> SWITCH exp multiclause END .)
    DIRECTORY       reduce using rule 11 (stmt -> SWITCH exp multiclause END .)
    LPAREN          reduce using rule 11 (stmt -> SWITCH exp multiclause END .)
    INTEGER         reduce using rule 11 (stmt -> SWITCH exp multiclause END .)
    FLOAT           reduce using rule 11 (stmt -> SWITCH exp multiclause END .)
    ALL             reduce using rule 11 (stmt -> SWITCH exp multiclause END .)
    NOT             reduce using rule 11 (stmt -> SWITCH exp multiclause END .)
    TRUE            reduce using rule 11 (stmt -> SWITCH exp multiclause END .)
    FALSE           reduce using rule 11 (stmt -> SWITCH exp multiclause END .)
    COLON           reduce using rule 11 (stmt -> SWITCH exp multiclause END .)
    END             reduce using rule 11 (stmt -> SWITCH exp multiclause END .)
    CASE            reduce using rule 11 (stmt -> SWITCH exp multiclause END .)
    OTHERWISE       reduce using rule 11 (stmt -> SWITCH exp multiclause END .)
    CATCH           reduce using rule 11 (stmt -> SWITCH exp multiclause END .)
    FUNCTION        reduce using rule 11 (stmt -> SWITCH exp multiclause END .)
    $end            reduce using rule 11 (stmt -> SWITCH exp multiclause END .)
    ELSE            reduce using rule 11 (stmt -> SWITCH exp multiclause END .)


state 134

    (25) clause -> CATCH IDENTIFIER . compoundstmt
    (15) stmt -> IDENTIFIER . EQUAL exp
    (19) stmt -> IDENTIFIER . PERIOD IDENTIFIER
    (38) exp -> IDENTIFIER .
    (43) exp -> IDENTIFIER . LPAREN optargs RPAREN
    (82) exp -> IDENTIFIER . LBRACE args RBRACE
    (5) compoundstmt -> . stmt SEMICOLON compoundstmt
    (6) compoundstmt -> . stmt compoundstmt
    (7) compoundstmt -> . COMMENT compoundstmt
    (8) compoundstmt -> .
    (9) stmt -> . IF exp compoundstmt END
    (10) stmt -> . IF exp compoundstmt ELSE compoundstmt END
    (11) stmt -> . SWITCH exp multiclause END
    (12) stmt -> . TRY compoundstmt multiclause END
    (13) stmt -> . FOR range compoundstmt END
    (14) stmt -> . WHILE exp compoundstmt END
    (15) stmt -> . IDENTIFIER EQUAL exp
    (16) stmt -> . matrix EQUAL exp
    (17) stmt -> . RETURN exp
    (18) stmt -> . keycall
    (19) stmt -> . IDENTIFIER PERIOD IDENTIFIER
    (20) stmt -> . exp
    (77) matrix -> . LBRACKET explist RBRACKET
    (29) keycall -> . CLC
    (30) keycall -> . CLOSE optvars
    (31) keycall -> . CLEAR optvars
    (32) keycall -> . BREAK
    (33) keycall -> . CONTINUE
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! reduce/reduce conflict for CASE resolved using rule 8 (compoundstmt -> .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 8 (compoundstmt -> .)
  ! reduce/reduce conflict for CATCH resolved using rule 8 (compoundstmt -> .)
  ! reduce/reduce conflict for END resolved using rule 8 (compoundstmt -> .)
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for CLC resolved as shift
  ! shift/reduce conflict for CLOSE resolved as shift
  ! shift/reduce conflict for CLEAR resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for DIRECTORY resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for ALL resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    EQUAL           shift and go to state 47
    PERIOD          shift and go to state 48
    TRANSPOSE       reduce using rule 38 (exp -> IDENTIFIER .)
    ELOR            reduce using rule 38 (exp -> IDENTIFIER .)
    ELAND           reduce using rule 38 (exp -> IDENTIFIER .)
    OROR            reduce using rule 38 (exp -> IDENTIFIER .)
    ANDAND          reduce using rule 38 (exp -> IDENTIFIER .)
    EQUALEQUAL      reduce using rule 38 (exp -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 38 (exp -> IDENTIFIER .)
    LT              reduce using rule 38 (exp -> IDENTIFIER .)
    GT              reduce using rule 38 (exp -> IDENTIFIER .)
    LE              reduce using rule 38 (exp -> IDENTIFIER .)
    GE              reduce using rule 38 (exp -> IDENTIFIER .)
    MPOWER          reduce using rule 38 (exp -> IDENTIFIER .)
    POWER           reduce using rule 38 (exp -> IDENTIFIER .)
    MTIMES          reduce using rule 38 (exp -> IDENTIFIER .)
    MDIVIDE         reduce using rule 38 (exp -> IDENTIFIER .)
    TIMES           reduce using rule 38 (exp -> IDENTIFIER .)
    DIVIDE          reduce using rule 38 (exp -> IDENTIFIER .)
    BACKSLASH       reduce using rule 38 (exp -> IDENTIFIER .)
    PLUS            reduce using rule 38 (exp -> IDENTIFIER .)
    MINUS           reduce using rule 38 (exp -> IDENTIFIER .)
    SEMICOLON       reduce using rule 38 (exp -> IDENTIFIER .)
    LPAREN          shift and go to state 147
    LBRACE          shift and go to state 46
    COMMENT         shift and go to state 5
    CASE            reduce using rule 8 (compoundstmt -> .)
    OTHERWISE       reduce using rule 8 (compoundstmt -> .)
    CATCH           reduce using rule 8 (compoundstmt -> .)
    END             reduce using rule 8 (compoundstmt -> .)
    IF              shift and go to state 24
    SWITCH          shift and go to state 9
    TRY             shift and go to state 18
    FOR             shift and go to state 15
    WHILE           shift and go to state 3
    IDENTIFIER      shift and go to state 12
    RETURN          shift and go to state 1
    LBRACKET        shift and go to state 2
    CLC             shift and go to state 23
    CLOSE           shift and go to state 10
    CLEAR           shift and go to state 16
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7

  ! COLON           [ reduce using rule 38 (exp -> IDENTIFIER .) ]
  ! COMMENT         [ reduce using rule 38 (exp -> IDENTIFIER .) ]
  ! IF              [ reduce using rule 38 (exp -> IDENTIFIER .) ]
  ! SWITCH          [ reduce using rule 38 (exp -> IDENTIFIER .) ]
  ! TRY             [ reduce using rule 38 (exp -> IDENTIFIER .) ]
  ! FOR             [ reduce using rule 38 (exp -> IDENTIFIER .) ]
  ! WHILE           [ reduce using rule 38 (exp -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 38 (exp -> IDENTIFIER .) ]
  ! RETURN          [ reduce using rule 38 (exp -> IDENTIFIER .) ]
  ! LBRACKET        [ reduce using rule 38 (exp -> IDENTIFIER .) ]
  ! CLC             [ reduce using rule 38 (exp -> IDENTIFIER .) ]
  ! CLOSE           [ reduce using rule 38 (exp -> IDENTIFIER .) ]
  ! CLEAR           [ reduce using rule 38 (exp -> IDENTIFIER .) ]
  ! BREAK           [ reduce using rule 38 (exp -> IDENTIFIER .) ]
  ! CONTINUE        [ reduce using rule 38 (exp -> IDENTIFIER .) ]
  ! STRING          [ reduce using rule 38 (exp -> IDENTIFIER .) ]
  ! DIRECTORY       [ reduce using rule 38 (exp -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 38 (exp -> IDENTIFIER .) ]
  ! INTEGER         [ reduce using rule 38 (exp -> IDENTIFIER .) ]
  ! FLOAT           [ reduce using rule 38 (exp -> IDENTIFIER .) ]
  ! ALL             [ reduce using rule 38 (exp -> IDENTIFIER .) ]
  ! NOT             [ reduce using rule 38 (exp -> IDENTIFIER .) ]
  ! TRUE            [ reduce using rule 38 (exp -> IDENTIFIER .) ]
  ! FALSE           [ reduce using rule 38 (exp -> IDENTIFIER .) ]
  ! CASE            [ reduce using rule 38 (exp -> IDENTIFIER .) ]
  ! OTHERWISE       [ reduce using rule 38 (exp -> IDENTIFIER .) ]
  ! CATCH           [ reduce using rule 38 (exp -> IDENTIFIER .) ]
  ! END             [ reduce using rule 38 (exp -> IDENTIFIER .) ]

    matrix                         shift and go to state 6
    keycall                        shift and go to state 8
    stmt                           shift and go to state 17
    number                         shift and go to state 22
    keyword                        shift and go to state 27
    exp                            shift and go to state 32
    compoundstmt                   shift and go to state 148

state 135

    (26) clause -> CATCH compoundstmt .

    CASE            reduce using rule 26 (clause -> CATCH compoundstmt .)
    OTHERWISE       reduce using rule 26 (clause -> CATCH compoundstmt .)
    CATCH           reduce using rule 26 (clause -> CATCH compoundstmt .)
    END             reduce using rule 26 (clause -> CATCH compoundstmt .)


state 136

    (82) exp -> IDENTIFIER LBRACE args RBRACE .

    TRANSPOSE       reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    ELOR            reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    ELAND           reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    OROR            reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    ANDAND          reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    EQUALEQUAL      reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    NOTEQUAL        reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    LT              reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    GT              reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    LE              reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    GE              reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    MPOWER          reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    POWER           reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    MTIMES          reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    MDIVIDE         reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    TIMES           reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    DIVIDE          reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    BACKSLASH       reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    PLUS            reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    MINUS           reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    COLON           reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    SEMICOLON       reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    COMMENT         reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    IF              reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    SWITCH          reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    TRY             reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    FOR             reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    WHILE           reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    IDENTIFIER      reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    RETURN          reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    LBRACKET        reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    CLC             reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    CLOSE           reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    CLEAR           reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    BREAK           reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    CONTINUE        reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    STRING          reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    DIRECTORY       reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    LPAREN          reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    INTEGER         reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    FLOAT           reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    ALL             reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    NOT             reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    TRUE            reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    FALSE           reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    FUNCTION        reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    $end            reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    CASE            reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    OTHERWISE       reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    CATCH           reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    END             reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    ELSE            reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    RBRACKET        reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    COMMA           reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    RPAREN          reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)
    RBRACE          reduce using rule 82 (exp -> IDENTIFIER LBRACE args RBRACE .)


state 137

    (53) args -> exp COMMA . args
    (53) args -> . exp COMMA args
    (54) args -> . exp
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    args                           shift and go to state 149
    number                         shift and go to state 22
    exp                            shift and go to state 95

state 138

    (43) exp -> IDENTIFIER LPAREN optargs RPAREN .

    TRANSPOSE       reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    ELOR            reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    ELAND           reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    OROR            reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    ANDAND          reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    EQUALEQUAL      reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    NOTEQUAL        reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    LT              reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    GT              reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    LE              reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    GE              reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    MPOWER          reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    POWER           reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    MTIMES          reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    MDIVIDE         reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    TIMES           reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    DIVIDE          reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    BACKSLASH       reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    PLUS            reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    MINUS           reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    COLON           reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    SEMICOLON       reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    COMMENT         reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    IF              reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    SWITCH          reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    TRY             reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    FOR             reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    WHILE           reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    IDENTIFIER      reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    RETURN          reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    LBRACKET        reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    CLC             reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    CLOSE           reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    CLEAR           reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    BREAK           reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    CONTINUE        reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    STRING          reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    DIRECTORY       reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    LPAREN          reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    INTEGER         reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    FLOAT           reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    ALL             reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    NOT             reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    TRUE            reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    FALSE           reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    FUNCTION        reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    $end            reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    CASE            reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    OTHERWISE       reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    CATCH           reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    END             reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    ELSE            reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    RBRACKET        reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    COMMA           reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    RPAREN          reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    RBRACE          reduce using rule 43 (exp -> IDENTIFIER LPAREN optargs RPAREN .)


state 139

    (4) element -> FUNCTION IDENTIFIER EQUAL IDENTIFIER . LPAREN optargs RPAREN compoundstmt END

    LPAREN          shift and go to state 150


state 140

    (13) stmt -> FOR range compoundstmt END .

    SEMICOLON       reduce using rule 13 (stmt -> FOR range compoundstmt END .)
    COMMENT         reduce using rule 13 (stmt -> FOR range compoundstmt END .)
    IF              reduce using rule 13 (stmt -> FOR range compoundstmt END .)
    SWITCH          reduce using rule 13 (stmt -> FOR range compoundstmt END .)
    TRY             reduce using rule 13 (stmt -> FOR range compoundstmt END .)
    FOR             reduce using rule 13 (stmt -> FOR range compoundstmt END .)
    WHILE           reduce using rule 13 (stmt -> FOR range compoundstmt END .)
    IDENTIFIER      reduce using rule 13 (stmt -> FOR range compoundstmt END .)
    RETURN          reduce using rule 13 (stmt -> FOR range compoundstmt END .)
    LBRACKET        reduce using rule 13 (stmt -> FOR range compoundstmt END .)
    CLC             reduce using rule 13 (stmt -> FOR range compoundstmt END .)
    CLOSE           reduce using rule 13 (stmt -> FOR range compoundstmt END .)
    CLEAR           reduce using rule 13 (stmt -> FOR range compoundstmt END .)
    BREAK           reduce using rule 13 (stmt -> FOR range compoundstmt END .)
    CONTINUE        reduce using rule 13 (stmt -> FOR range compoundstmt END .)
    STRING          reduce using rule 13 (stmt -> FOR range compoundstmt END .)
    DIRECTORY       reduce using rule 13 (stmt -> FOR range compoundstmt END .)
    LPAREN          reduce using rule 13 (stmt -> FOR range compoundstmt END .)
    INTEGER         reduce using rule 13 (stmt -> FOR range compoundstmt END .)
    FLOAT           reduce using rule 13 (stmt -> FOR range compoundstmt END .)
    ALL             reduce using rule 13 (stmt -> FOR range compoundstmt END .)
    NOT             reduce using rule 13 (stmt -> FOR range compoundstmt END .)
    TRUE            reduce using rule 13 (stmt -> FOR range compoundstmt END .)
    FALSE           reduce using rule 13 (stmt -> FOR range compoundstmt END .)
    COLON           reduce using rule 13 (stmt -> FOR range compoundstmt END .)
    END             reduce using rule 13 (stmt -> FOR range compoundstmt END .)
    CASE            reduce using rule 13 (stmt -> FOR range compoundstmt END .)
    OTHERWISE       reduce using rule 13 (stmt -> FOR range compoundstmt END .)
    CATCH           reduce using rule 13 (stmt -> FOR range compoundstmt END .)
    FUNCTION        reduce using rule 13 (stmt -> FOR range compoundstmt END .)
    $end            reduce using rule 13 (stmt -> FOR range compoundstmt END .)
    ELSE            reduce using rule 13 (stmt -> FOR range compoundstmt END .)


state 141

    (27) range -> IDENTIFIER EQUAL exp . COLON exp
    (28) range -> IDENTIFIER EQUAL exp . COLON exp COLON exp
    (41) exp -> exp . TRANSPOSE
    (55) exp -> exp . ELOR exp
    (56) exp -> exp . ELAND exp
    (57) exp -> exp . OROR exp
    (58) exp -> exp . ANDAND exp
    (59) exp -> exp . EQUALEQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . LE exp
    (64) exp -> exp . GE exp
    (65) exp -> exp . MPOWER exp
    (66) exp -> exp . POWER exp
    (67) exp -> exp . MTIMES exp
    (68) exp -> exp . MDIVIDE exp
    (69) exp -> exp . TIMES exp
    (70) exp -> exp . DIVIDE exp
    (71) exp -> exp . BACKSLASH exp
    (72) exp -> exp . PLUS exp
    (73) exp -> exp . MINUS exp
    (74) exp -> exp . COLON exp COLON exp
    (75) exp -> exp . COLON exp

    COLON           shift and go to state 151
    TRANSPOSE       shift and go to state 68
    ELOR            shift and go to state 63
    ELAND           shift and go to state 62
    OROR            shift and go to state 60
    ANDAND          shift and go to state 79
    EQUALEQUAL      shift and go to state 73
    NOTEQUAL        shift and go to state 61
    LT              shift and go to state 70
    GT              shift and go to state 74
    LE              shift and go to state 66
    GE              shift and go to state 78
    MPOWER          shift and go to state 80
    POWER           shift and go to state 67
    MTIMES          shift and go to state 64
    MDIVIDE         shift and go to state 76
    TIMES           shift and go to state 77
    DIVIDE          shift and go to state 75
    BACKSLASH       shift and go to state 69
    PLUS            shift and go to state 72
    MINUS           shift and go to state 65


state 142

    (12) stmt -> TRY compoundstmt multiclause END .

    SEMICOLON       reduce using rule 12 (stmt -> TRY compoundstmt multiclause END .)
    COMMENT         reduce using rule 12 (stmt -> TRY compoundstmt multiclause END .)
    IF              reduce using rule 12 (stmt -> TRY compoundstmt multiclause END .)
    SWITCH          reduce using rule 12 (stmt -> TRY compoundstmt multiclause END .)
    TRY             reduce using rule 12 (stmt -> TRY compoundstmt multiclause END .)
    FOR             reduce using rule 12 (stmt -> TRY compoundstmt multiclause END .)
    WHILE           reduce using rule 12 (stmt -> TRY compoundstmt multiclause END .)
    IDENTIFIER      reduce using rule 12 (stmt -> TRY compoundstmt multiclause END .)
    RETURN          reduce using rule 12 (stmt -> TRY compoundstmt multiclause END .)
    LBRACKET        reduce using rule 12 (stmt -> TRY compoundstmt multiclause END .)
    CLC             reduce using rule 12 (stmt -> TRY compoundstmt multiclause END .)
    CLOSE           reduce using rule 12 (stmt -> TRY compoundstmt multiclause END .)
    CLEAR           reduce using rule 12 (stmt -> TRY compoundstmt multiclause END .)
    BREAK           reduce using rule 12 (stmt -> TRY compoundstmt multiclause END .)
    CONTINUE        reduce using rule 12 (stmt -> TRY compoundstmt multiclause END .)
    STRING          reduce using rule 12 (stmt -> TRY compoundstmt multiclause END .)
    DIRECTORY       reduce using rule 12 (stmt -> TRY compoundstmt multiclause END .)
    LPAREN          reduce using rule 12 (stmt -> TRY compoundstmt multiclause END .)
    INTEGER         reduce using rule 12 (stmt -> TRY compoundstmt multiclause END .)
    FLOAT           reduce using rule 12 (stmt -> TRY compoundstmt multiclause END .)
    ALL             reduce using rule 12 (stmt -> TRY compoundstmt multiclause END .)
    NOT             reduce using rule 12 (stmt -> TRY compoundstmt multiclause END .)
    TRUE            reduce using rule 12 (stmt -> TRY compoundstmt multiclause END .)
    FALSE           reduce using rule 12 (stmt -> TRY compoundstmt multiclause END .)
    COLON           reduce using rule 12 (stmt -> TRY compoundstmt multiclause END .)
    END             reduce using rule 12 (stmt -> TRY compoundstmt multiclause END .)
    CASE            reduce using rule 12 (stmt -> TRY compoundstmt multiclause END .)
    OTHERWISE       reduce using rule 12 (stmt -> TRY compoundstmt multiclause END .)
    CATCH           reduce using rule 12 (stmt -> TRY compoundstmt multiclause END .)
    FUNCTION        reduce using rule 12 (stmt -> TRY compoundstmt multiclause END .)
    $end            reduce using rule 12 (stmt -> TRY compoundstmt multiclause END .)
    ELSE            reduce using rule 12 (stmt -> TRY compoundstmt multiclause END .)


state 143

    (10) stmt -> IF exp compoundstmt ELSE . compoundstmt END
    (5) compoundstmt -> . stmt SEMICOLON compoundstmt
    (6) compoundstmt -> . stmt compoundstmt
    (7) compoundstmt -> . COMMENT compoundstmt
    (8) compoundstmt -> .
    (9) stmt -> . IF exp compoundstmt END
    (10) stmt -> . IF exp compoundstmt ELSE compoundstmt END
    (11) stmt -> . SWITCH exp multiclause END
    (12) stmt -> . TRY compoundstmt multiclause END
    (13) stmt -> . FOR range compoundstmt END
    (14) stmt -> . WHILE exp compoundstmt END
    (15) stmt -> . IDENTIFIER EQUAL exp
    (16) stmt -> . matrix EQUAL exp
    (17) stmt -> . RETURN exp
    (18) stmt -> . keycall
    (19) stmt -> . IDENTIFIER PERIOD IDENTIFIER
    (20) stmt -> . exp
    (77) matrix -> . LBRACKET explist RBRACKET
    (29) keycall -> . CLC
    (30) keycall -> . CLOSE optvars
    (31) keycall -> . CLEAR optvars
    (32) keycall -> . BREAK
    (33) keycall -> . CONTINUE
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON

    COMMENT         shift and go to state 5
    END             reduce using rule 8 (compoundstmt -> .)
    IF              shift and go to state 24
    SWITCH          shift and go to state 9
    TRY             shift and go to state 18
    FOR             shift and go to state 15
    WHILE           shift and go to state 3
    IDENTIFIER      shift and go to state 12
    RETURN          shift and go to state 1
    LBRACKET        shift and go to state 2
    CLC             shift and go to state 23
    CLOSE           shift and go to state 10
    CLEAR           shift and go to state 16
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7

    matrix                         shift and go to state 6
    keycall                        shift and go to state 8
    stmt                           shift and go to state 17
    number                         shift and go to state 22
    keyword                        shift and go to state 27
    exp                            shift and go to state 32
    compoundstmt                   shift and go to state 152

state 144

    (9) stmt -> IF exp compoundstmt END .

    SEMICOLON       reduce using rule 9 (stmt -> IF exp compoundstmt END .)
    COMMENT         reduce using rule 9 (stmt -> IF exp compoundstmt END .)
    IF              reduce using rule 9 (stmt -> IF exp compoundstmt END .)
    SWITCH          reduce using rule 9 (stmt -> IF exp compoundstmt END .)
    TRY             reduce using rule 9 (stmt -> IF exp compoundstmt END .)
    FOR             reduce using rule 9 (stmt -> IF exp compoundstmt END .)
    WHILE           reduce using rule 9 (stmt -> IF exp compoundstmt END .)
    IDENTIFIER      reduce using rule 9 (stmt -> IF exp compoundstmt END .)
    RETURN          reduce using rule 9 (stmt -> IF exp compoundstmt END .)
    LBRACKET        reduce using rule 9 (stmt -> IF exp compoundstmt END .)
    CLC             reduce using rule 9 (stmt -> IF exp compoundstmt END .)
    CLOSE           reduce using rule 9 (stmt -> IF exp compoundstmt END .)
    CLEAR           reduce using rule 9 (stmt -> IF exp compoundstmt END .)
    BREAK           reduce using rule 9 (stmt -> IF exp compoundstmt END .)
    CONTINUE        reduce using rule 9 (stmt -> IF exp compoundstmt END .)
    STRING          reduce using rule 9 (stmt -> IF exp compoundstmt END .)
    DIRECTORY       reduce using rule 9 (stmt -> IF exp compoundstmt END .)
    LPAREN          reduce using rule 9 (stmt -> IF exp compoundstmt END .)
    INTEGER         reduce using rule 9 (stmt -> IF exp compoundstmt END .)
    FLOAT           reduce using rule 9 (stmt -> IF exp compoundstmt END .)
    ALL             reduce using rule 9 (stmt -> IF exp compoundstmt END .)
    NOT             reduce using rule 9 (stmt -> IF exp compoundstmt END .)
    TRUE            reduce using rule 9 (stmt -> IF exp compoundstmt END .)
    FALSE           reduce using rule 9 (stmt -> IF exp compoundstmt END .)
    COLON           reduce using rule 9 (stmt -> IF exp compoundstmt END .)
    END             reduce using rule 9 (stmt -> IF exp compoundstmt END .)
    CASE            reduce using rule 9 (stmt -> IF exp compoundstmt END .)
    OTHERWISE       reduce using rule 9 (stmt -> IF exp compoundstmt END .)
    CATCH           reduce using rule 9 (stmt -> IF exp compoundstmt END .)
    FUNCTION        reduce using rule 9 (stmt -> IF exp compoundstmt END .)
    $end            reduce using rule 9 (stmt -> IF exp compoundstmt END .)
    ELSE            reduce using rule 9 (stmt -> IF exp compoundstmt END .)


state 145

    (74) exp -> exp COLON exp COLON . exp
    (74) exp -> exp COLON . exp COLON exp
    (75) exp -> exp COLON . exp
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    number                         shift and go to state 22
    exp                            shift and go to state 153

state 146

    (23) clause -> CASE exp compoundstmt .

    CASE            reduce using rule 23 (clause -> CASE exp compoundstmt .)
    OTHERWISE       reduce using rule 23 (clause -> CASE exp compoundstmt .)
    CATCH           reduce using rule 23 (clause -> CASE exp compoundstmt .)
    END             reduce using rule 23 (clause -> CASE exp compoundstmt .)


state 147

    (43) exp -> IDENTIFIER LPAREN . optargs RPAREN
    (42) exp -> LPAREN . exp RPAREN
    (51) optargs -> . args
    (52) optargs -> .
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (53) args -> . exp COMMA args
    (54) args -> . exp
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    RPAREN          reduce using rule 52 (optargs -> .)
    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    args                           shift and go to state 99
    number                         shift and go to state 22
    exp                            shift and go to state 154
    optargs                        shift and go to state 98

state 148

    (25) clause -> CATCH IDENTIFIER compoundstmt .

    CASE            reduce using rule 25 (clause -> CATCH IDENTIFIER compoundstmt .)
    OTHERWISE       reduce using rule 25 (clause -> CATCH IDENTIFIER compoundstmt .)
    CATCH           reduce using rule 25 (clause -> CATCH IDENTIFIER compoundstmt .)
    END             reduce using rule 25 (clause -> CATCH IDENTIFIER compoundstmt .)


state 149

    (53) args -> exp COMMA args .

    RPAREN          reduce using rule 53 (args -> exp COMMA args .)
    RBRACE          reduce using rule 53 (args -> exp COMMA args .)


state 150

    (4) element -> FUNCTION IDENTIFIER EQUAL IDENTIFIER LPAREN . optargs RPAREN compoundstmt END
    (51) optargs -> . args
    (52) optargs -> .
    (53) args -> . exp COMMA args
    (54) args -> . exp
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    RPAREN          reduce using rule 52 (optargs -> .)
    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    args                           shift and go to state 99
    number                         shift and go to state 22
    exp                            shift and go to state 95
    optargs                        shift and go to state 155

state 151

    (27) range -> IDENTIFIER EQUAL exp COLON . exp
    (28) range -> IDENTIFIER EQUAL exp COLON . exp COLON exp
    (74) exp -> exp COLON . exp COLON exp
    (75) exp -> exp COLON . exp
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    number                         shift and go to state 22
    exp                            shift and go to state 156

state 152

    (10) stmt -> IF exp compoundstmt ELSE compoundstmt . END

    END             shift and go to state 157


state 153

    (74) exp -> exp COLON exp COLON exp .
    (74) exp -> exp COLON exp . COLON exp
    (75) exp -> exp COLON exp .
    (41) exp -> exp . TRANSPOSE
    (55) exp -> exp . ELOR exp
    (56) exp -> exp . ELAND exp
    (57) exp -> exp . OROR exp
    (58) exp -> exp . ANDAND exp
    (59) exp -> exp . EQUALEQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . LE exp
    (64) exp -> exp . GE exp
    (65) exp -> exp . MPOWER exp
    (66) exp -> exp . POWER exp
    (67) exp -> exp . MTIMES exp
    (68) exp -> exp . MDIVIDE exp
    (69) exp -> exp . TIMES exp
    (70) exp -> exp . DIVIDE exp
    (71) exp -> exp . BACKSLASH exp
    (72) exp -> exp . PLUS exp
    (73) exp -> exp . MINUS exp
    (74) exp -> exp . COLON exp COLON exp
    (75) exp -> exp . COLON exp

  ! reduce/reduce conflict for COLON resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for TRANSPOSE resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for ELOR resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for ELAND resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for OROR resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for ANDAND resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for EQUALEQUAL resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for NOTEQUAL resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for LT resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for GT resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for LE resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for GE resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for MPOWER resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for POWER resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for MTIMES resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for MDIVIDE resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for TIMES resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for BACKSLASH resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for PLUS resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for MINUS resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for COMMENT resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for IF resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for SWITCH resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for TRY resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for FOR resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for WHILE resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for RETURN resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for CLC resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for CLOSE resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for CLEAR resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for BREAK resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for STRING resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for DIRECTORY resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for LPAREN resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for INTEGER resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for FLOAT resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for ALL resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for NOT resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for TRUE resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for FALSE resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for END resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for $end resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for CASE resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for CATCH resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for ELSE resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for COMMA resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for RPAREN resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for RBRACE resolved using rule 74 (exp -> exp COLON exp COLON exp .)
    TRANSPOSE       reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    MPOWER          reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    POWER           reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    MTIMES          reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    MDIVIDE         reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    TIMES           reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    DIVIDE          reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    BACKSLASH       reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    PLUS            reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    MINUS           reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    COLON           reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    SEMICOLON       reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    COMMENT         reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    IF              reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    SWITCH          reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    TRY             reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    FOR             reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    WHILE           reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    IDENTIFIER      reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    RETURN          reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    LBRACKET        reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    CLC             reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    CLOSE           reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    CLEAR           reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    BREAK           reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    CONTINUE        reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    STRING          reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    DIRECTORY       reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    LPAREN          reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    INTEGER         reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    FLOAT           reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    ALL             reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    NOT             reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    TRUE            reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    FALSE           reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    FUNCTION        reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    $end            reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    CASE            reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    OTHERWISE       reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    CATCH           reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    END             reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    ELSE            reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    RBRACKET        reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    COMMA           reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    RPAREN          reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    RBRACE          reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    ELOR            shift and go to state 63
    ELAND           shift and go to state 62
    OROR            shift and go to state 60
    ANDAND          shift and go to state 79
    EQUALEQUAL      shift and go to state 73
    NOTEQUAL        shift and go to state 61
    LT              shift and go to state 70
    GT              shift and go to state 74
    LE              shift and go to state 66
    GE              shift and go to state 78

  ! ELOR            [ reduce using rule 74 (exp -> exp COLON exp COLON exp .) ]
  ! ELAND           [ reduce using rule 74 (exp -> exp COLON exp COLON exp .) ]
  ! OROR            [ reduce using rule 74 (exp -> exp COLON exp COLON exp .) ]
  ! ANDAND          [ reduce using rule 74 (exp -> exp COLON exp COLON exp .) ]
  ! EQUALEQUAL      [ reduce using rule 74 (exp -> exp COLON exp COLON exp .) ]
  ! NOTEQUAL        [ reduce using rule 74 (exp -> exp COLON exp COLON exp .) ]
  ! LT              [ reduce using rule 74 (exp -> exp COLON exp COLON exp .) ]
  ! GT              [ reduce using rule 74 (exp -> exp COLON exp COLON exp .) ]
  ! LE              [ reduce using rule 74 (exp -> exp COLON exp COLON exp .) ]
  ! GE              [ reduce using rule 74 (exp -> exp COLON exp COLON exp .) ]
  ! COLON           [ shift and go to state 145 ]
  ! COLON           [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! TRANSPOSE       [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! ELOR            [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! ELAND           [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! OROR            [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! ANDAND          [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! EQUALEQUAL      [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! NOTEQUAL        [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! LT              [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! GT              [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! LE              [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! GE              [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! MPOWER          [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! POWER           [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! MTIMES          [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! MDIVIDE         [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! TIMES           [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! DIVIDE          [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! BACKSLASH       [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! PLUS            [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! MINUS           [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! COMMENT         [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! IF              [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! SWITCH          [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! TRY             [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! FOR             [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! WHILE           [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! IDENTIFIER      [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! RETURN          [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! LBRACKET        [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! CLC             [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! CLOSE           [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! CLEAR           [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! BREAK           [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! CONTINUE        [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! STRING          [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! DIRECTORY       [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! LPAREN          [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! INTEGER         [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! FLOAT           [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! ALL             [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! NOT             [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! TRUE            [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! FALSE           [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! END             [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! SEMICOLON       [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! FUNCTION        [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! $end            [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! CASE            [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! OTHERWISE       [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! CATCH           [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! ELSE            [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! RBRACKET        [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! COMMA           [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! RPAREN          [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! RBRACE          [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! TRANSPOSE       [ shift and go to state 68 ]
  ! MPOWER          [ shift and go to state 80 ]
  ! POWER           [ shift and go to state 67 ]
  ! MTIMES          [ shift and go to state 64 ]
  ! MDIVIDE         [ shift and go to state 76 ]
  ! TIMES           [ shift and go to state 77 ]
  ! DIVIDE          [ shift and go to state 75 ]
  ! BACKSLASH       [ shift and go to state 69 ]
  ! PLUS            [ shift and go to state 72 ]
  ! MINUS           [ shift and go to state 65 ]


state 154

    (42) exp -> LPAREN exp . RPAREN
    (41) exp -> exp . TRANSPOSE
    (55) exp -> exp . ELOR exp
    (56) exp -> exp . ELAND exp
    (57) exp -> exp . OROR exp
    (58) exp -> exp . ANDAND exp
    (59) exp -> exp . EQUALEQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . LE exp
    (64) exp -> exp . GE exp
    (65) exp -> exp . MPOWER exp
    (66) exp -> exp . POWER exp
    (67) exp -> exp . MTIMES exp
    (68) exp -> exp . MDIVIDE exp
    (69) exp -> exp . TIMES exp
    (70) exp -> exp . DIVIDE exp
    (71) exp -> exp . BACKSLASH exp
    (72) exp -> exp . PLUS exp
    (73) exp -> exp . MINUS exp
    (74) exp -> exp . COLON exp COLON exp
    (75) exp -> exp . COLON exp
    (53) args -> exp . COMMA args
    (54) args -> exp .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 105
    TRANSPOSE       shift and go to state 68
    ELOR            shift and go to state 63
    ELAND           shift and go to state 62
    OROR            shift and go to state 60
    ANDAND          shift and go to state 79
    EQUALEQUAL      shift and go to state 73
    NOTEQUAL        shift and go to state 61
    LT              shift and go to state 70
    GT              shift and go to state 74
    LE              shift and go to state 66
    GE              shift and go to state 78
    MPOWER          shift and go to state 80
    POWER           shift and go to state 67
    MTIMES          shift and go to state 64
    MDIVIDE         shift and go to state 76
    TIMES           shift and go to state 77
    DIVIDE          shift and go to state 75
    BACKSLASH       shift and go to state 69
    PLUS            shift and go to state 72
    MINUS           shift and go to state 65
    COLON           shift and go to state 71
    COMMA           shift and go to state 137

  ! RPAREN          [ reduce using rule 54 (args -> exp .) ]


state 155

    (4) element -> FUNCTION IDENTIFIER EQUAL IDENTIFIER LPAREN optargs . RPAREN compoundstmt END

    RPAREN          shift and go to state 158


state 156

    (27) range -> IDENTIFIER EQUAL exp COLON exp .
    (28) range -> IDENTIFIER EQUAL exp COLON exp . COLON exp
    (74) exp -> exp COLON exp . COLON exp
    (75) exp -> exp COLON exp .
    (41) exp -> exp . TRANSPOSE
    (55) exp -> exp . ELOR exp
    (56) exp -> exp . ELAND exp
    (57) exp -> exp . OROR exp
    (58) exp -> exp . ANDAND exp
    (59) exp -> exp . EQUALEQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . LE exp
    (64) exp -> exp . GE exp
    (65) exp -> exp . MPOWER exp
    (66) exp -> exp . POWER exp
    (67) exp -> exp . MTIMES exp
    (68) exp -> exp . MDIVIDE exp
    (69) exp -> exp . TIMES exp
    (70) exp -> exp . DIVIDE exp
    (71) exp -> exp . BACKSLASH exp
    (72) exp -> exp . PLUS exp
    (73) exp -> exp . MINUS exp
    (74) exp -> exp . COLON exp COLON exp
    (75) exp -> exp . COLON exp

  ! reduce/reduce conflict for COLON resolved using rule 27 (range -> IDENTIFIER EQUAL exp COLON exp .)
    COMMENT         reduce using rule 27 (range -> IDENTIFIER EQUAL exp COLON exp .)
    IF              reduce using rule 27 (range -> IDENTIFIER EQUAL exp COLON exp .)
    SWITCH          reduce using rule 27 (range -> IDENTIFIER EQUAL exp COLON exp .)
    TRY             reduce using rule 27 (range -> IDENTIFIER EQUAL exp COLON exp .)
    FOR             reduce using rule 27 (range -> IDENTIFIER EQUAL exp COLON exp .)
    WHILE           reduce using rule 27 (range -> IDENTIFIER EQUAL exp COLON exp .)
    IDENTIFIER      reduce using rule 27 (range -> IDENTIFIER EQUAL exp COLON exp .)
    RETURN          reduce using rule 27 (range -> IDENTIFIER EQUAL exp COLON exp .)
    LBRACKET        reduce using rule 27 (range -> IDENTIFIER EQUAL exp COLON exp .)
    CLC             reduce using rule 27 (range -> IDENTIFIER EQUAL exp COLON exp .)
    CLOSE           reduce using rule 27 (range -> IDENTIFIER EQUAL exp COLON exp .)
    CLEAR           reduce using rule 27 (range -> IDENTIFIER EQUAL exp COLON exp .)
    BREAK           reduce using rule 27 (range -> IDENTIFIER EQUAL exp COLON exp .)
    CONTINUE        reduce using rule 27 (range -> IDENTIFIER EQUAL exp COLON exp .)
    STRING          reduce using rule 27 (range -> IDENTIFIER EQUAL exp COLON exp .)
    DIRECTORY       reduce using rule 27 (range -> IDENTIFIER EQUAL exp COLON exp .)
    LPAREN          reduce using rule 27 (range -> IDENTIFIER EQUAL exp COLON exp .)
    INTEGER         reduce using rule 27 (range -> IDENTIFIER EQUAL exp COLON exp .)
    FLOAT           reduce using rule 27 (range -> IDENTIFIER EQUAL exp COLON exp .)
    ALL             reduce using rule 27 (range -> IDENTIFIER EQUAL exp COLON exp .)
    NOT             reduce using rule 27 (range -> IDENTIFIER EQUAL exp COLON exp .)
    TRUE            reduce using rule 27 (range -> IDENTIFIER EQUAL exp COLON exp .)
    FALSE           reduce using rule 27 (range -> IDENTIFIER EQUAL exp COLON exp .)
    COLON           reduce using rule 27 (range -> IDENTIFIER EQUAL exp COLON exp .)
    END             reduce using rule 27 (range -> IDENTIFIER EQUAL exp COLON exp .)
    TRANSPOSE       reduce using rule 75 (exp -> exp COLON exp .)
    MPOWER          reduce using rule 75 (exp -> exp COLON exp .)
    POWER           reduce using rule 75 (exp -> exp COLON exp .)
    MTIMES          reduce using rule 75 (exp -> exp COLON exp .)
    MDIVIDE         reduce using rule 75 (exp -> exp COLON exp .)
    TIMES           reduce using rule 75 (exp -> exp COLON exp .)
    DIVIDE          reduce using rule 75 (exp -> exp COLON exp .)
    BACKSLASH       reduce using rule 75 (exp -> exp COLON exp .)
    PLUS            reduce using rule 75 (exp -> exp COLON exp .)
    MINUS           reduce using rule 75 (exp -> exp COLON exp .)
    ELOR            shift and go to state 63
    ELAND           shift and go to state 62
    OROR            shift and go to state 60
    ANDAND          shift and go to state 79
    EQUALEQUAL      shift and go to state 73
    NOTEQUAL        shift and go to state 61
    LT              shift and go to state 70
    GT              shift and go to state 74
    LE              shift and go to state 66
    GE              shift and go to state 78

  ! COLON           [ shift and go to state 159 ]
  ! COLON           [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! ELOR            [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! ELAND           [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! OROR            [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! ANDAND          [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! EQUALEQUAL      [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! NOTEQUAL        [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! LT              [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! GT              [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! LE              [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! GE              [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! TRANSPOSE       [ shift and go to state 68 ]
  ! MPOWER          [ shift and go to state 80 ]
  ! POWER           [ shift and go to state 67 ]
  ! MTIMES          [ shift and go to state 64 ]
  ! MDIVIDE         [ shift and go to state 76 ]
  ! TIMES           [ shift and go to state 77 ]
  ! DIVIDE          [ shift and go to state 75 ]
  ! BACKSLASH       [ shift and go to state 69 ]
  ! PLUS            [ shift and go to state 72 ]
  ! MINUS           [ shift and go to state 65 ]


state 157

    (10) stmt -> IF exp compoundstmt ELSE compoundstmt END .

    SEMICOLON       reduce using rule 10 (stmt -> IF exp compoundstmt ELSE compoundstmt END .)
    COMMENT         reduce using rule 10 (stmt -> IF exp compoundstmt ELSE compoundstmt END .)
    IF              reduce using rule 10 (stmt -> IF exp compoundstmt ELSE compoundstmt END .)
    SWITCH          reduce using rule 10 (stmt -> IF exp compoundstmt ELSE compoundstmt END .)
    TRY             reduce using rule 10 (stmt -> IF exp compoundstmt ELSE compoundstmt END .)
    FOR             reduce using rule 10 (stmt -> IF exp compoundstmt ELSE compoundstmt END .)
    WHILE           reduce using rule 10 (stmt -> IF exp compoundstmt ELSE compoundstmt END .)
    IDENTIFIER      reduce using rule 10 (stmt -> IF exp compoundstmt ELSE compoundstmt END .)
    RETURN          reduce using rule 10 (stmt -> IF exp compoundstmt ELSE compoundstmt END .)
    LBRACKET        reduce using rule 10 (stmt -> IF exp compoundstmt ELSE compoundstmt END .)
    CLC             reduce using rule 10 (stmt -> IF exp compoundstmt ELSE compoundstmt END .)
    CLOSE           reduce using rule 10 (stmt -> IF exp compoundstmt ELSE compoundstmt END .)
    CLEAR           reduce using rule 10 (stmt -> IF exp compoundstmt ELSE compoundstmt END .)
    BREAK           reduce using rule 10 (stmt -> IF exp compoundstmt ELSE compoundstmt END .)
    CONTINUE        reduce using rule 10 (stmt -> IF exp compoundstmt ELSE compoundstmt END .)
    STRING          reduce using rule 10 (stmt -> IF exp compoundstmt ELSE compoundstmt END .)
    DIRECTORY       reduce using rule 10 (stmt -> IF exp compoundstmt ELSE compoundstmt END .)
    LPAREN          reduce using rule 10 (stmt -> IF exp compoundstmt ELSE compoundstmt END .)
    INTEGER         reduce using rule 10 (stmt -> IF exp compoundstmt ELSE compoundstmt END .)
    FLOAT           reduce using rule 10 (stmt -> IF exp compoundstmt ELSE compoundstmt END .)
    ALL             reduce using rule 10 (stmt -> IF exp compoundstmt ELSE compoundstmt END .)
    NOT             reduce using rule 10 (stmt -> IF exp compoundstmt ELSE compoundstmt END .)
    TRUE            reduce using rule 10 (stmt -> IF exp compoundstmt ELSE compoundstmt END .)
    FALSE           reduce using rule 10 (stmt -> IF exp compoundstmt ELSE compoundstmt END .)
    COLON           reduce using rule 10 (stmt -> IF exp compoundstmt ELSE compoundstmt END .)
    END             reduce using rule 10 (stmt -> IF exp compoundstmt ELSE compoundstmt END .)
    CASE            reduce using rule 10 (stmt -> IF exp compoundstmt ELSE compoundstmt END .)
    OTHERWISE       reduce using rule 10 (stmt -> IF exp compoundstmt ELSE compoundstmt END .)
    CATCH           reduce using rule 10 (stmt -> IF exp compoundstmt ELSE compoundstmt END .)
    FUNCTION        reduce using rule 10 (stmt -> IF exp compoundstmt ELSE compoundstmt END .)
    $end            reduce using rule 10 (stmt -> IF exp compoundstmt ELSE compoundstmt END .)
    ELSE            reduce using rule 10 (stmt -> IF exp compoundstmt ELSE compoundstmt END .)


state 158

    (4) element -> FUNCTION IDENTIFIER EQUAL IDENTIFIER LPAREN optargs RPAREN . compoundstmt END
    (5) compoundstmt -> . stmt SEMICOLON compoundstmt
    (6) compoundstmt -> . stmt compoundstmt
    (7) compoundstmt -> . COMMENT compoundstmt
    (8) compoundstmt -> .
    (9) stmt -> . IF exp compoundstmt END
    (10) stmt -> . IF exp compoundstmt ELSE compoundstmt END
    (11) stmt -> . SWITCH exp multiclause END
    (12) stmt -> . TRY compoundstmt multiclause END
    (13) stmt -> . FOR range compoundstmt END
    (14) stmt -> . WHILE exp compoundstmt END
    (15) stmt -> . IDENTIFIER EQUAL exp
    (16) stmt -> . matrix EQUAL exp
    (17) stmt -> . RETURN exp
    (18) stmt -> . keycall
    (19) stmt -> . IDENTIFIER PERIOD IDENTIFIER
    (20) stmt -> . exp
    (77) matrix -> . LBRACKET explist RBRACKET
    (29) keycall -> . CLC
    (30) keycall -> . CLOSE optvars
    (31) keycall -> . CLEAR optvars
    (32) keycall -> . BREAK
    (33) keycall -> . CONTINUE
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON

    COMMENT         shift and go to state 5
    END             reduce using rule 8 (compoundstmt -> .)
    IF              shift and go to state 24
    SWITCH          shift and go to state 9
    TRY             shift and go to state 18
    FOR             shift and go to state 15
    WHILE           shift and go to state 3
    IDENTIFIER      shift and go to state 12
    RETURN          shift and go to state 1
    LBRACKET        shift and go to state 2
    CLC             shift and go to state 23
    CLOSE           shift and go to state 10
    CLEAR           shift and go to state 16
    BREAK           shift and go to state 30
    CONTINUE        shift and go to state 31
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7

    matrix                         shift and go to state 6
    keycall                        shift and go to state 8
    stmt                           shift and go to state 17
    number                         shift and go to state 22
    keyword                        shift and go to state 27
    exp                            shift and go to state 32
    compoundstmt                   shift and go to state 160

state 159

    (28) range -> IDENTIFIER EQUAL exp COLON exp COLON . exp
    (74) exp -> exp COLON exp COLON . exp
    (74) exp -> exp COLON . exp COLON exp
    (75) exp -> exp COLON . exp
    (38) exp -> . IDENTIFIER
    (39) exp -> . STRING
    (40) exp -> . DIRECTORY
    (41) exp -> . exp TRANSPOSE
    (42) exp -> . LPAREN exp RPAREN
    (43) exp -> . IDENTIFIER LPAREN optargs RPAREN
    (44) exp -> . number
    (45) exp -> . keyword
    (55) exp -> . exp ELOR exp
    (56) exp -> . exp ELAND exp
    (57) exp -> . exp OROR exp
    (58) exp -> . exp ANDAND exp
    (59) exp -> . exp EQUALEQUAL exp
    (60) exp -> . exp NOTEQUAL exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp GT exp
    (63) exp -> . exp LE exp
    (64) exp -> . exp GE exp
    (65) exp -> . exp MPOWER exp
    (66) exp -> . exp POWER exp
    (67) exp -> . exp MTIMES exp
    (68) exp -> . exp MDIVIDE exp
    (69) exp -> . exp TIMES exp
    (70) exp -> . exp DIVIDE exp
    (71) exp -> . exp BACKSLASH exp
    (72) exp -> . exp PLUS exp
    (73) exp -> . exp MINUS exp
    (74) exp -> . exp COLON exp COLON exp
    (75) exp -> . exp COLON exp
    (76) exp -> . matrix
    (82) exp -> . IDENTIFIER LBRACE args RBRACE
    (36) number -> . INTEGER
    (37) number -> . FLOAT
    (46) keyword -> . ALL
    (47) keyword -> . NOT
    (48) keyword -> . TRUE
    (49) keyword -> . FALSE
    (50) keyword -> . COLON
    (77) matrix -> . LBRACKET explist RBRACKET

    IDENTIFIER      shift and go to state 36
    STRING          shift and go to state 11
    DIRECTORY       shift and go to state 21
    LPAREN          shift and go to state 19
    INTEGER         shift and go to state 20
    FLOAT           shift and go to state 28
    ALL             shift and go to state 25
    NOT             shift and go to state 33
    TRUE            shift and go to state 4
    FALSE           shift and go to state 26
    COLON           shift and go to state 7
    LBRACKET        shift and go to state 2

    matrix                         shift and go to state 35
    keyword                        shift and go to state 27
    number                         shift and go to state 22
    exp                            shift and go to state 161

state 160

    (4) element -> FUNCTION IDENTIFIER EQUAL IDENTIFIER LPAREN optargs RPAREN compoundstmt . END

    END             shift and go to state 162


state 161

    (28) range -> IDENTIFIER EQUAL exp COLON exp COLON exp .
    (74) exp -> exp COLON exp COLON exp .
    (74) exp -> exp COLON exp . COLON exp
    (75) exp -> exp COLON exp .
    (41) exp -> exp . TRANSPOSE
    (55) exp -> exp . ELOR exp
    (56) exp -> exp . ELAND exp
    (57) exp -> exp . OROR exp
    (58) exp -> exp . ANDAND exp
    (59) exp -> exp . EQUALEQUAL exp
    (60) exp -> exp . NOTEQUAL exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . GT exp
    (63) exp -> exp . LE exp
    (64) exp -> exp . GE exp
    (65) exp -> exp . MPOWER exp
    (66) exp -> exp . POWER exp
    (67) exp -> exp . MTIMES exp
    (68) exp -> exp . MDIVIDE exp
    (69) exp -> exp . TIMES exp
    (70) exp -> exp . DIVIDE exp
    (71) exp -> exp . BACKSLASH exp
    (72) exp -> exp . PLUS exp
    (73) exp -> exp . MINUS exp
    (74) exp -> exp . COLON exp COLON exp
    (75) exp -> exp . COLON exp

  ! reduce/reduce conflict for COLON resolved using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
  ! reduce/reduce conflict for COLON resolved using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
  ! reduce/reduce conflict for TRANSPOSE resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for ELOR resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for ELAND resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for OROR resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for ANDAND resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for EQUALEQUAL resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for NOTEQUAL resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for LT resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for GT resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for LE resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for GE resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for MPOWER resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for POWER resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for MTIMES resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for MDIVIDE resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for TIMES resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for BACKSLASH resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for PLUS resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for MINUS resolved using rule 74 (exp -> exp COLON exp COLON exp .)
  ! reduce/reduce conflict for COMMENT resolved using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
  ! reduce/reduce conflict for IF resolved using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
  ! reduce/reduce conflict for SWITCH resolved using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
  ! reduce/reduce conflict for TRY resolved using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
  ! reduce/reduce conflict for FOR resolved using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
  ! reduce/reduce conflict for WHILE resolved using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
  ! reduce/reduce conflict for RETURN resolved using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
  ! reduce/reduce conflict for CLC resolved using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
  ! reduce/reduce conflict for CLOSE resolved using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
  ! reduce/reduce conflict for CLEAR resolved using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
  ! reduce/reduce conflict for BREAK resolved using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
  ! reduce/reduce conflict for STRING resolved using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
  ! reduce/reduce conflict for DIRECTORY resolved using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
  ! reduce/reduce conflict for LPAREN resolved using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
  ! reduce/reduce conflict for INTEGER resolved using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
  ! reduce/reduce conflict for FLOAT resolved using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
  ! reduce/reduce conflict for ALL resolved using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
  ! reduce/reduce conflict for NOT resolved using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
  ! reduce/reduce conflict for TRUE resolved using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
  ! reduce/reduce conflict for FALSE resolved using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
  ! reduce/reduce conflict for END resolved using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
    COMMENT         reduce using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
    IF              reduce using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
    SWITCH          reduce using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
    TRY             reduce using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
    FOR             reduce using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
    WHILE           reduce using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
    IDENTIFIER      reduce using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
    RETURN          reduce using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
    LBRACKET        reduce using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
    CLC             reduce using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
    CLOSE           reduce using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
    CLEAR           reduce using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
    BREAK           reduce using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
    CONTINUE        reduce using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
    STRING          reduce using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
    DIRECTORY       reduce using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
    LPAREN          reduce using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
    INTEGER         reduce using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
    FLOAT           reduce using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
    ALL             reduce using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
    NOT             reduce using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
    TRUE            reduce using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
    FALSE           reduce using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
    COLON           reduce using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
    END             reduce using rule 28 (range -> IDENTIFIER EQUAL exp COLON exp COLON exp .)
    TRANSPOSE       reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    MPOWER          reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    POWER           reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    MTIMES          reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    MDIVIDE         reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    TIMES           reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    DIVIDE          reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    BACKSLASH       reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    PLUS            reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    MINUS           reduce using rule 74 (exp -> exp COLON exp COLON exp .)
    ELOR            shift and go to state 63
    ELAND           shift and go to state 62
    OROR            shift and go to state 60
    ANDAND          shift and go to state 79
    EQUALEQUAL      shift and go to state 73
    NOTEQUAL        shift and go to state 61
    LT              shift and go to state 70
    GT              shift and go to state 74
    LE              shift and go to state 66
    GE              shift and go to state 78

  ! COLON           [ reduce using rule 74 (exp -> exp COLON exp COLON exp .) ]
  ! ELOR            [ reduce using rule 74 (exp -> exp COLON exp COLON exp .) ]
  ! ELAND           [ reduce using rule 74 (exp -> exp COLON exp COLON exp .) ]
  ! OROR            [ reduce using rule 74 (exp -> exp COLON exp COLON exp .) ]
  ! ANDAND          [ reduce using rule 74 (exp -> exp COLON exp COLON exp .) ]
  ! EQUALEQUAL      [ reduce using rule 74 (exp -> exp COLON exp COLON exp .) ]
  ! NOTEQUAL        [ reduce using rule 74 (exp -> exp COLON exp COLON exp .) ]
  ! LT              [ reduce using rule 74 (exp -> exp COLON exp COLON exp .) ]
  ! GT              [ reduce using rule 74 (exp -> exp COLON exp COLON exp .) ]
  ! LE              [ reduce using rule 74 (exp -> exp COLON exp COLON exp .) ]
  ! GE              [ reduce using rule 74 (exp -> exp COLON exp COLON exp .) ]
  ! COLON           [ shift and go to state 145 ]
  ! COLON           [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! TRANSPOSE       [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! ELOR            [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! ELAND           [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! OROR            [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! ANDAND          [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! EQUALEQUAL      [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! NOTEQUAL        [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! LT              [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! GT              [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! LE              [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! GE              [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! MPOWER          [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! POWER           [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! MTIMES          [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! MDIVIDE         [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! TIMES           [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! DIVIDE          [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! BACKSLASH       [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! PLUS            [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! MINUS           [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! COMMENT         [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! IF              [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! SWITCH          [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! TRY             [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! FOR             [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! WHILE           [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! IDENTIFIER      [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! RETURN          [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! LBRACKET        [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! CLC             [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! CLOSE           [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! CLEAR           [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! BREAK           [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! CONTINUE        [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! STRING          [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! DIRECTORY       [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! LPAREN          [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! INTEGER         [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! FLOAT           [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! ALL             [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! NOT             [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! TRUE            [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! FALSE           [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! END             [ reduce using rule 75 (exp -> exp COLON exp .) ]
  ! TRANSPOSE       [ shift and go to state 68 ]
  ! MPOWER          [ shift and go to state 80 ]
  ! POWER           [ shift and go to state 67 ]
  ! MTIMES          [ shift and go to state 64 ]
  ! MDIVIDE         [ shift and go to state 76 ]
  ! TIMES           [ shift and go to state 77 ]
  ! DIVIDE          [ shift and go to state 75 ]
  ! BACKSLASH       [ shift and go to state 69 ]
  ! PLUS            [ shift and go to state 72 ]
  ! MINUS           [ shift and go to state 65 ]


state 162

    (4) element -> FUNCTION IDENTIFIER EQUAL IDENTIFIER LPAREN optargs RPAREN compoundstmt END .

    FUNCTION        reduce using rule 4 (element -> FUNCTION IDENTIFIER EQUAL IDENTIFIER LPAREN optargs RPAREN compoundstmt END .)
    COMMENT         reduce using rule 4 (element -> FUNCTION IDENTIFIER EQUAL IDENTIFIER LPAREN optargs RPAREN compoundstmt END .)
    IF              reduce using rule 4 (element -> FUNCTION IDENTIFIER EQUAL IDENTIFIER LPAREN optargs RPAREN compoundstmt END .)
    SWITCH          reduce using rule 4 (element -> FUNCTION IDENTIFIER EQUAL IDENTIFIER LPAREN optargs RPAREN compoundstmt END .)
    TRY             reduce using rule 4 (element -> FUNCTION IDENTIFIER EQUAL IDENTIFIER LPAREN optargs RPAREN compoundstmt END .)
    FOR             reduce using rule 4 (element -> FUNCTION IDENTIFIER EQUAL IDENTIFIER LPAREN optargs RPAREN compoundstmt END .)
    WHILE           reduce using rule 4 (element -> FUNCTION IDENTIFIER EQUAL IDENTIFIER LPAREN optargs RPAREN compoundstmt END .)
    IDENTIFIER      reduce using rule 4 (element -> FUNCTION IDENTIFIER EQUAL IDENTIFIER LPAREN optargs RPAREN compoundstmt END .)
    RETURN          reduce using rule 4 (element -> FUNCTION IDENTIFIER EQUAL IDENTIFIER LPAREN optargs RPAREN compoundstmt END .)
    LBRACKET        reduce using rule 4 (element -> FUNCTION IDENTIFIER EQUAL IDENTIFIER LPAREN optargs RPAREN compoundstmt END .)
    CLC             reduce using rule 4 (element -> FUNCTION IDENTIFIER EQUAL IDENTIFIER LPAREN optargs RPAREN compoundstmt END .)
    CLOSE           reduce using rule 4 (element -> FUNCTION IDENTIFIER EQUAL IDENTIFIER LPAREN optargs RPAREN compoundstmt END .)
    CLEAR           reduce using rule 4 (element -> FUNCTION IDENTIFIER EQUAL IDENTIFIER LPAREN optargs RPAREN compoundstmt END .)
    BREAK           reduce using rule 4 (element -> FUNCTION IDENTIFIER EQUAL IDENTIFIER LPAREN optargs RPAREN compoundstmt END .)
    CONTINUE        reduce using rule 4 (element -> FUNCTION IDENTIFIER EQUAL IDENTIFIER LPAREN optargs RPAREN compoundstmt END .)
    STRING          reduce using rule 4 (element -> FUNCTION IDENTIFIER EQUAL IDENTIFIER LPAREN optargs RPAREN compoundstmt END .)
    DIRECTORY       reduce using rule 4 (element -> FUNCTION IDENTIFIER EQUAL IDENTIFIER LPAREN optargs RPAREN compoundstmt END .)
    LPAREN          reduce using rule 4 (element -> FUNCTION IDENTIFIER EQUAL IDENTIFIER LPAREN optargs RPAREN compoundstmt END .)
    INTEGER         reduce using rule 4 (element -> FUNCTION IDENTIFIER EQUAL IDENTIFIER LPAREN optargs RPAREN compoundstmt END .)
    FLOAT           reduce using rule 4 (element -> FUNCTION IDENTIFIER EQUAL IDENTIFIER LPAREN optargs RPAREN compoundstmt END .)
    ALL             reduce using rule 4 (element -> FUNCTION IDENTIFIER EQUAL IDENTIFIER LPAREN optargs RPAREN compoundstmt END .)
    NOT             reduce using rule 4 (element -> FUNCTION IDENTIFIER EQUAL IDENTIFIER LPAREN optargs RPAREN compoundstmt END .)
    TRUE            reduce using rule 4 (element -> FUNCTION IDENTIFIER EQUAL IDENTIFIER LPAREN optargs RPAREN compoundstmt END .)
    FALSE           reduce using rule 4 (element -> FUNCTION IDENTIFIER EQUAL IDENTIFIER LPAREN optargs RPAREN compoundstmt END .)
    COLON           reduce using rule 4 (element -> FUNCTION IDENTIFIER EQUAL IDENTIFIER LPAREN optargs RPAREN compoundstmt END .)
    $end            reduce using rule 4 (element -> FUNCTION IDENTIFIER EQUAL IDENTIFIER LPAREN optargs RPAREN compoundstmt END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FUNCTION in state 0 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 0 resolved as shift
WARNING: shift/reduce conflict for TRY in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 0 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 0 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 0 resolved as shift
WARNING: shift/reduce conflict for CLC in state 0 resolved as shift
WARNING: shift/reduce conflict for CLOSE in state 0 resolved as shift
WARNING: shift/reduce conflict for CLEAR in state 0 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 0 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 0 resolved as shift
WARNING: shift/reduce conflict for STRING in state 0 resolved as shift
WARNING: shift/reduce conflict for DIRECTORY in state 0 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 0 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 0 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 0 resolved as shift
WARNING: shift/reduce conflict for ALL in state 0 resolved as shift
WARNING: shift/reduce conflict for NOT in state 0 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 0 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 0 resolved as shift
WARNING: shift/reduce conflict for COLON in state 0 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 5 resolved as shift
WARNING: shift/reduce conflict for IF in state 5 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 5 resolved as shift
WARNING: shift/reduce conflict for TRY in state 5 resolved as shift
WARNING: shift/reduce conflict for FOR in state 5 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 5 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 5 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 5 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 5 resolved as shift
WARNING: shift/reduce conflict for CLC in state 5 resolved as shift
WARNING: shift/reduce conflict for CLOSE in state 5 resolved as shift
WARNING: shift/reduce conflict for CLEAR in state 5 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 5 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 5 resolved as shift
WARNING: shift/reduce conflict for STRING in state 5 resolved as shift
WARNING: shift/reduce conflict for DIRECTORY in state 5 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 5 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 5 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 5 resolved as shift
WARNING: shift/reduce conflict for ALL in state 5 resolved as shift
WARNING: shift/reduce conflict for NOT in state 5 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 5 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 5 resolved as shift
WARNING: shift/reduce conflict for COLON in state 5 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 12 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 17 resolved as shift
WARNING: shift/reduce conflict for IF in state 17 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 17 resolved as shift
WARNING: shift/reduce conflict for TRY in state 17 resolved as shift
WARNING: shift/reduce conflict for FOR in state 17 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 17 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 17 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 17 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 17 resolved as shift
WARNING: shift/reduce conflict for CLC in state 17 resolved as shift
WARNING: shift/reduce conflict for CLOSE in state 17 resolved as shift
WARNING: shift/reduce conflict for CLEAR in state 17 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 17 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 17 resolved as shift
WARNING: shift/reduce conflict for STRING in state 17 resolved as shift
WARNING: shift/reduce conflict for DIRECTORY in state 17 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 17 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 17 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 17 resolved as shift
WARNING: shift/reduce conflict for ALL in state 17 resolved as shift
WARNING: shift/reduce conflict for NOT in state 17 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 17 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 17 resolved as shift
WARNING: shift/reduce conflict for COLON in state 17 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 29 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 29 resolved as shift
WARNING: shift/reduce conflict for IF in state 29 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 29 resolved as shift
WARNING: shift/reduce conflict for TRY in state 29 resolved as shift
WARNING: shift/reduce conflict for FOR in state 29 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 29 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 29 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 29 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 29 resolved as shift
WARNING: shift/reduce conflict for CLC in state 29 resolved as shift
WARNING: shift/reduce conflict for CLOSE in state 29 resolved as shift
WARNING: shift/reduce conflict for CLEAR in state 29 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 29 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 29 resolved as shift
WARNING: shift/reduce conflict for STRING in state 29 resolved as shift
WARNING: shift/reduce conflict for DIRECTORY in state 29 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 29 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 29 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 29 resolved as shift
WARNING: shift/reduce conflict for ALL in state 29 resolved as shift
WARNING: shift/reduce conflict for NOT in state 29 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 29 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 29 resolved as shift
WARNING: shift/reduce conflict for COLON in state 29 resolved as shift
WARNING: shift/reduce conflict for COLON in state 32 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 36 resolved as shift
WARNING: shift/reduce conflict for COLON in state 37 resolved as shift
WARNING: shift/reduce conflict for COLON in state 39 resolved as shift
WARNING: shift/reduce conflict for COLON in state 45 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 45 resolved as shift
WARNING: shift/reduce conflict for STRING in state 45 resolved as shift
WARNING: shift/reduce conflict for DIRECTORY in state 45 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 45 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 45 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 45 resolved as shift
WARNING: shift/reduce conflict for ALL in state 45 resolved as shift
WARNING: shift/reduce conflict for NOT in state 45 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 45 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 45 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 45 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 54 resolved as shift
WARNING: shift/reduce conflict for IF in state 54 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 54 resolved as shift
WARNING: shift/reduce conflict for TRY in state 54 resolved as shift
WARNING: shift/reduce conflict for FOR in state 54 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 54 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 54 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 54 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 54 resolved as shift
WARNING: shift/reduce conflict for CLC in state 54 resolved as shift
WARNING: shift/reduce conflict for CLOSE in state 54 resolved as shift
WARNING: shift/reduce conflict for CLEAR in state 54 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 54 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 54 resolved as shift
WARNING: shift/reduce conflict for STRING in state 54 resolved as shift
WARNING: shift/reduce conflict for DIRECTORY in state 54 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 54 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 54 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 54 resolved as shift
WARNING: shift/reduce conflict for ALL in state 54 resolved as shift
WARNING: shift/reduce conflict for NOT in state 54 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 54 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 54 resolved as shift
WARNING: shift/reduce conflict for COLON in state 54 resolved as shift
WARNING: shift/reduce conflict for COLON in state 83 resolved as shift
WARNING: shift/reduce conflict for COLON in state 87 resolved as shift
WARNING: shift/reduce conflict for COLON in state 96 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 127 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 127 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 127 resolved as shift
WARNING: shift/reduce conflict for STRING in state 127 resolved as shift
WARNING: shift/reduce conflict for DIRECTORY in state 127 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 127 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 127 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 127 resolved as shift
WARNING: shift/reduce conflict for ALL in state 127 resolved as shift
WARNING: shift/reduce conflict for NOT in state 127 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 127 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 127 resolved as shift
WARNING: shift/reduce conflict for COLON in state 127 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 127 resolved as shift
WARNING: shift/reduce conflict for COLON in state 128 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 134 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 134 resolved as shift
WARNING: shift/reduce conflict for IF in state 134 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 134 resolved as shift
WARNING: shift/reduce conflict for TRY in state 134 resolved as shift
WARNING: shift/reduce conflict for FOR in state 134 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 134 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 134 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 134 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 134 resolved as shift
WARNING: shift/reduce conflict for CLC in state 134 resolved as shift
WARNING: shift/reduce conflict for CLOSE in state 134 resolved as shift
WARNING: shift/reduce conflict for CLEAR in state 134 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 134 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 134 resolved as shift
WARNING: shift/reduce conflict for STRING in state 134 resolved as shift
WARNING: shift/reduce conflict for DIRECTORY in state 134 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 134 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 134 resolved as shift
WARNING: shift/reduce conflict for ALL in state 134 resolved as shift
WARNING: shift/reduce conflict for NOT in state 134 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 134 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 134 resolved as shift
WARNING: shift/reduce conflict for COLON in state 134 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 154 resolved as shift
WARNING: reduce/reduce conflict in state 0 resolved using rule (mat -> <empty>)
WARNING: rejected rule (compoundstmt -> <empty>) in state 0
WARNING: reduce/reduce conflict in state 29 resolved using rule (mat -> <empty>)
WARNING: rejected rule (compoundstmt -> <empty>) in state 29
WARNING: reduce/reduce conflict in state 134 resolved using rule (compoundstmt -> <empty>)
WARNING: rejected rule (exp -> IDENTIFIER) in state 134
WARNING: reduce/reduce conflict in state 153 resolved using rule (exp -> exp COLON exp COLON exp)
WARNING: rejected rule (exp -> exp COLON exp) in state 153
WARNING: reduce/reduce conflict in state 156 resolved using rule (range -> IDENTIFIER EQUAL exp COLON exp)
WARNING: rejected rule (exp -> exp COLON exp) in state 156
WARNING: reduce/reduce conflict in state 161 resolved using rule (range -> IDENTIFIER EQUAL exp COLON exp COLON exp)
WARNING: rejected rule (exp -> exp COLON exp COLON exp) in state 161
WARNING: reduce/reduce conflict in state 161 resolved using rule (range -> IDENTIFIER EQUAL exp COLON exp COLON exp)
WARNING: rejected rule (exp -> exp COLON exp) in state 161
WARNING: reduce/reduce conflict in state 161 resolved using rule (exp -> exp COLON exp COLON exp)
WARNING: rejected rule (exp -> exp COLON exp) in state 161
